{"version":3,"sources":["reportWebVitals.ts","env.ts","models/Project.ts","models/table/TableContext.ts","models/table/TableRowStore.ts","models/table/TableStore.ts","models/sm/SMGraph.ts","models/sm/SemanticModelStore.ts","models/entity/Entity.ts","models/entity/EntitySettings.ts","models/entity/EntityStore.ts","models/ontology/PropertyStore.ts","models/ontology/ClassStore.ts","models/index.ts","pages/HomePage.tsx","pages/ProjectPage.tsx","components/entity/Entity.ts","components/entity/InlineEntityComponent.tsx","components/entity/FetchEntityComponent.tsx","components/entity/InlinePropertyComponent.tsx","components/element/Collapse.tsx","components/entity/ValueComponent.tsx","components/entity/StatementComponent.tsx","components/entity/PropertyComponent.tsx","components/entity/PropertyFilterComponent.tsx","components/entity/PageEntityComponent.tsx","components/entity/PopoverEntityComponent.tsx","components/element/Number.tsx","components/element/Button.tsx","components/table/CandidateEntityListComponent.tsx","components/table/CellComponent.tsx","components/table/TableComponent.tsx","components/table/styles.ts","misc/SequentialFuncInvoker.ts","pages/table/OntSearchComponent.tsx","pages/table/EntitySettingComponent.tsx","components/graph/RectNode.ts","components/graph/CircleNode.ts","components/graph/wordwrap/optimizer.ts","components/graph/wordwrap/model.ts","components/graph/wordwrap/wordwrap.ts","components/graph/G6Graph.ts","components/graph/GraphComponent.tsx","pages/table/NodeSearchComponent.tsx","pages/table/forms/EdgeForm.tsx","pages/table/forms/NodeForm.tsx","pages/table/forms/index.tsx","pages/table/SemanticModelComponent.tsx","pages/table/TablePage.tsx","logo.png","routes.tsx","pages/SettingPage.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SERVER","process","REACT_APP_PLATFORM","REACT_APP_API_SERVER","Project","id","name","description","this","makeObservable","observable","ProjectStore","undefined","deserialize","record","CRUDStore","isLineBreak","item","nLines","TableRowStore","PairKeysUniqueIndex","findByTable","tableId","start","no","map","tableIndex","index","get","output","i","rowId","push","records","Object","values","links","forEach","link","entity","entityId","candidate_entities","ce","candidateEntities","entity_id","indices","add","RStore","TableStore","SingleKeyIndex","findByProject","projectId","Array","from","projectIndex","contextPage","context_page","contextValues","context_values","context_tree","contextTree","contentBefore","content_before","x","n_lines","contentAfter","content_after","URICount","nodes","counter","id2num","label","node","nextLabel","uri","getNum","nodetype","SMGraph","edges","version","stale","nodeId2Index","column2nodeIndex","uriCount","clone","toJS","onSave","hasNode","nodesByURI","filter","nodeByColumnIndex","nodeByEntityId","value","type","edge","source","target","e","hasEdge","length","incomingEdges","outgoingEdges","nextNodeId","nid","Error","findPathMax2hops","sourceId","targetId","matchPaths","outedges","outedge","outedge2","getClassIdOfColumnIndex","columnIndex","inedges","inedge","getOutgoingProperties","outprops","coutedge","_removeNode","nodeId","nodeIndex","isInContext","_removeEdge","edgeIndex","sourceDegree","targetDegree","splice","buildIndex","n","addColumnRelationship","action","upsertColumnType","upsertRelationship","addClassNode","addLiteralNode","removeNode","updateClassNode","updateDataNode","updateLiteralNode","addEdge","removeEdge","updateEdge","sourceColumnIndex","targetColumnIndex","edgeData","sourceIncomingEdges","targetIncomingEdges","realSource","realTarget","approximation","pred1","pred2","edge1","edge2","tempid","props","assign","size","SemanticModel","graph","table","isDraft","sm","draftID","DraftSemanticModel","columns","column","SemanticModelStore","getNewDraftId","getCreateDraft","data","column_index","is_in_context","toString","sms","drafts","getDraftsByTable","idx","concat","m","exec","parseInt","Math","max","draft","remove","has","serializeUpdateDraft","Entity","readableLabel","aliases","properties","id2uri","uri2id","entityURI","startsWith","slice","EntitySettings","_showedPropsInFullView","Set","_showedPropsInPopoverView","setShowedPropsInFullView","setShowedPropsInPopoverView","addShowedPropsInFullView","prop","addShowedPropsInPopoverView","removeShowedPropsInFullView","delete","removeShowedPropsInPopoverView","showedPropsInFullView","computed","showedPropsInPopoverView","EntityStore","settings","readable_label","stmts","stmt","qualifiersOrder","qualifiers_order","PropertyStore","SingleKeyUniqueIndex","getPropertyByURI","uriIndex","ClassStore","getClassByURI","stores","projectStore","tableStore","tableRowStore","semanticModelStore","entityStore","propertyStore","classStore","window","_stores","StoreContext","createContext","useStores","React","useContext","HomePage","observer","useEffect","fetch","limit","offset","Fragment","gutter","className","span","Title","level","bordered","itemLayout","dataSource","list","renderItem","project","Item","Meta","avatar","shape","style","marginTop","backgroundColor","charCodeAt","toUpperCase","title","path","routes","urlArgs","queryArgs","ProjectPage","withStyles","border","borderRadius","borderLeft","paddingLeft","paddingRight","fontWeight","classes","useURLParams","fetchById","dataIndex","renderText","text","tbl","query","encodeWhereQuery","_","upperFirst","defaultSize","request","params","sort","a","pageSize","current","conditions","result","table2row","success","total","options","search","headerTitle","pagination","pageSizeOptions","rowKey","useEntityProperties","propIds","useMemo","ids","entries","pid","keys","qualifiers","qid","batch","fetchByIds","fromEntries","doesNotExist","InlineEntityComponent","nolink","onCtrlClick","restprops","href","openInNewPage","FetchEntityComponent","render","renderLoading","renderNotFound","forceWaiting","status","subTitle","InlinePropertyComponent","property","showId","CollapsibleComponent","hide","display","useState","visible","setVisible","toggleVisible","btn","EyeInvisibleOutlined","onClick","EyeOutlined","children","collapsible","ValueComponent","timezone","before","after","precision","calendarmodel","time","lowerBound","upperBound","unit","amount","language","globe","latitude","longitude","JSON","stringify","StatementComponent","marginLeft","id2prop","qval","Text","italic","valueIndex","PropertyComponent","propDivider","height","color","filteredProps","components","strong","direction","width","PropertyFilterComponent","root","enable","setEnable","addFilteredProp","removeFilteredProp","onChange","checked","mode","allowClear","optionFilterProp","onSelect","onDeselect","PageEntityComponent","margin","minWidth","float","lang2value","lang","fontSize","copyable","lang2values","join","openPageEntityComponent","args","zIndex","content","Modal","info","icon","bodyStyle","okButtonProps","maskClosable","mask","top","PopoverEntityComponent","marginBottom","paddingTop","cursor","Number","fractionDigits","toFixed","CheckboxIcon","checkboxIcon","padding","selected","colorSelected","blue","colorUnselected","grey","stateSelected","setStateSelected","correctSelected","styles","correctCandidateEntity","candidateEntity","candidateEntitySeeMore","CandidateEntityListComponent","topK","showAllCandidateModals","setShowAllCandidateModals","candidateLst","faCheck","faCheckDouble","probability","findIndex","candidate","score","onOk","onCancel","Promise","resolve","textDecoration","noEntityLink","CellComponent","cell","flatMap","prefix","substring","end","linksurface","infix","url","dangerouslySetInnerHTML","__html","trim","verticalAlign","TableComponent","toolBarRender","showRowIndex","col","disabled","context","webpage","TableInformation","contentHierarchy","hierarchy","heading","every","repeat","ContentComponent","key","lines","comps","line","lst","SequentialFuncInvoker","timer","fn","calledAt","selection","OntPropSearchComponent","useSearchComponent","OntClassSearchComponent","EntitySearchComponent","storeName","store","seqInvoker","isArray","refetch","iter","r","showSearch","onSearch","EntitySettingComponent","drawText","group","wordwrap","units","xoffset","yoffset","cfg","stroke","y","addShape","attrs","fontFamily","fill","lineWidth","draggable","registerCircleNode","defaultWidth","getApproximateWidth","G6","registerNode","draw","labelOffset","labelCfg","wrapText","cacheFn","cache","ParagraphOptimizer","paragraph","getDesiredLineLength","cacheLineLengths","cacheLineDemerits","cacheParagraphDemerits","cacheParagraphBreakpoints","optimize","optimizeParagraph","nPreviousLines","lineAdjustment","computeLineAdjustment","breakpoints","demerits","computeLineDemerits","optimalSplit","caret","Infinity","prevParagraphBreakpoints","nextParagraphBreakpoints","computeLineLength","len","computeLineElastic","stretchability","shrinkability","stretch","shrink","lineNumber","desiredLength","elastic","computeLineBadness","lastLineItem","linePenalty","cost","lineBadness","computeParagraphDemerits","getLineLength","Paragraph","lineLengths","spaceWidth","groupByLine","breaklines","layout","lineHeight","cssLineHeight","align","autoLength","renderingUnits","reduce","desiredLens","maxLen","desiredLen","nGlues","glueWidth","abs","renderingUnit","renderedWidth","renderedUnit","measureFn","hyphenateFn","separable","penaltyCost","chunks","split","w","re","RegExp","match","hyphenWidth","isSpace","word","test","charAt","g","flagged","c","b","hyphen","WordWrap","fontCfg","layoutCfg","measureCtx","circleLayout","hypher","font","desiredLineLengths","getUnitsFromText","measureText","hyphenate","wrapTextCircle","maxRadius","acceptableError","radius","findRadius","getLayout","deltaX","deltaY","nWords","canvas","document","createElement","getContext","Hypher","enUsPatterns","CircleLayout","getCssFont","container","getComputedStyle","fontStyle","fontVariant","parseFloat","lineBreak","radius2layout","textLength","lowerbound","ceil","l","totalLength","computeHalfNumberOfLines","linesY","computeCentralLineLength","centralLine","floor","sqrt","G6Graph","hotswapProps","isEqual","enableActivateRelations","destroy","fitCenter","setDataAndRender","onFinish","clear","updateLayout","updateContainerSize","center","resetMatrix","bbox","getCanvasBBox","graphHeight","graphWidth","clientWidth","extraHeight","viewportOffset","getBoundingClientRect","documentScrollY","scrollY","documentElement","clientHeight","offsetHeight","initHeight","changeSize","moveTo","leftOffset","topOffset","untilLayoutStable","maxTries","delay","significantChange","prevBBox","setTimeout","nextBBox","wp","paddingWidth","hp","paddingHeight","setState","_cfg","model","states","labelStyles","state","registerRectNode","modes","resetSelected","Graph","scrollWidth","preventOverlap","linkDistance","nodeSpacing","defaultEdge","endArrow","Arrow","triangle","background","default","edit","nodeStateStyles","active","opacity","inactive","edgeStateStyles","onNodeClick","on","event","onEdgeClick","newNodes","u","labelStyle","uniq","console","error","newEdges","uv","hasParallelEdges","pair","Util","processParallelEdges","position","toolbar","left","GraphLayout","Force","Dagre","rankdir","nodesep","ranksep","GraphComponent","forwardRef","ref","renderingAdjustedHeight","layouts","useRef","useImperativeHandle","recenter","transformData","toolbarElement","GraphToolbar","autoHide","isHover","setIsHover","setLayout","onMouseEnter","onMouseLeave","centerGraph","changeLayout","FullscreenOutlined","overlay","LayoutOutlined","DownOutlined","class_node","green","literal_node","purple","data_node","gold","NodeSearchComponent","option","textAlign","borderSpacing","EdgeForm","setSource","setTarget","setURI","setApproximation","dupEdge","fetchOne","labelCol","wrapperCol","labelWrap","validateStatus","help","val","cls","newEdge","destroyAll","danger","ClassNodeSubForm","onDone","LiteralNodeSubForm","setId","setIsInContext","duplicatedId","ent","NodeForm","setNodeType","Group","buttonStyle","Button","openForm","graphContainer","yellow","selectedDraft","SemanticModelComponent","graphRef","currentIndex","setCurrentIndex","getDefaultDraftSemanticModel","setCreateDraft","getNodeLabel","centering","useHotkeys","smLists","isSelected","smListComponent","onConfirm","deleteCreateDraft","okText","cancelText","create","update","nSms","getNewSemanticModelName","borderColor","tableExport","mouseClickNavigationHandler","TablePage","marginRight","PREFETCH_LIMIT","queryParams","useQueryParams","b64query","tableQueryConditions","decodeWhereQuery","hasPrev","hasNext","allLeft","allRight","sortedIndex","all","fields","op","gtr","ltr","newState","move","nextTableId","open","toPreviousTable","toNextTable","navState","useTableNavigation","hasByTable","rtable","semComponent","queryRow","row","v","btns","extraSubTitle","TableNavBar","onBack","history","getURL","extra","NoQueryArgsPathDef","component","urlSchema","pathDef","PathDef","querySchema","NoArgsPathDef","exact","upload","projects","home","_routes","applyLayout","element","menus","src","logo","alt","ProjectOutlined","CloudUploadOutlined","SettingOutlined","isFirstItemLogo","ReactDOM","Provider","enUSLocale","getElementById"],"mappings":"+JAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wCCHDQ,GAHXC,mIAAYC,mBAIuB,WAAnCD,mIAAYC,mBACPD,mIAAYE,qBACb,ICAOC,EAOX,WAAmBC,EAAYC,EAAcC,GAAsB,yBANnEF,QAMkE,OAJlEC,UAIkE,OAFlEC,iBAEkE,EAChEC,KAAKH,GAAKA,EACVG,KAAKF,KAAOA,EACZE,KAAKD,YAAcA,EAEnBE,YAAeD,KAAM,CACnBH,GAAIK,IACJJ,KAAMI,IACNH,YAAaG,OAiCNC,EAAb,kDAME,aAAe,IAAD,8BACZ,wBAASX,EAAT,qBAA+BY,GAAW,IAGrCC,YAAc,SAACC,GACpB,OAAO,IAAIV,EAAQU,EAAOT,GAAIS,EAAOR,KAAMQ,EAAOP,cALtC,EANhB,wDAcE,SAA4BO,GAC1B,MAAO,CACLT,GAAIS,EAAOR,KACXA,KAAMQ,EAAOR,KACbC,YAAaO,EAAOP,eAlB1B,kCAsBE,SAA4BO,GAC1B,MAAO,CAAER,KAAMQ,EAAOR,KAAMC,YAAaO,EAAOP,iBAvBpD,GAAkCQ,K,gBCtC3B,SAASC,EAAYC,GAC1B,YAAsCL,IAA9BK,EAAmBC,OChBtB,IAAMC,EAAb,kDACE,aAAe,IAAD,8BACZ,wBAASnB,EAAT,sBAAgCY,GAAW,EAAO,CAChD,IAAIQ,IAAoB,QAAS,YAqBrCC,YAAc,SAACC,EAAiBC,EAAeC,GAC7C,IAAMC,EAAM,EAAKC,WAAWC,MAAMC,IAAIN,GACtC,QAAYV,IAARa,EAAmB,MAAO,GAG9B,IADA,IAAMI,EAAS,GACNC,EAAI,EAAGA,EAAIN,EAAIM,IAAK,CAC3B,IAAMC,EAAQN,EAAIG,IAAIE,EAAIP,GAC1B,QAAcX,IAAVmB,EACF,MAEFF,EAAOG,KAAK,EAAKC,QAAQL,IAAIG,IAE/B,OAAOF,GAnCK,EA0CPhB,YAAc,SAACC,GAepB,OAdAoB,OAAOC,OAAOrB,EAAOsB,OAAOC,SAAQ,SAACD,GACnCA,EAAMC,SAAQ,SAACC,GACO,OAAhBA,EAAKC,SACPD,EAAKE,SAAWF,EAAKC,QAEvBD,EAAKG,mBAAmBJ,SAAQ,SAACK,GAC/BA,EAAGF,SAAWE,EAAGH,cACVG,EAAGH,UAEZD,EAAKK,kBAAoBL,EAAKG,0BACvBH,EAAKM,iBACLN,EAAKG,yBAGT3B,GAzDK,EADhB,4CAOE,WACE,OAAON,KAAKqC,QAAQ,KARxB,mBAuCE,SAAgB/B,GACdN,KAAKkB,WAAWoB,IAAIhC,OAxCxB,GAAmCiC,KCAtBC,EAAb,kDACE,aAAe,IAAD,8BACZ,wBAAShD,EAAT,mBAA6BY,GAAW,EAAO,CAC7C,IAAIqC,IAAe,cAevBC,cAAgB,SAACC,EAAmB5B,EAAgBC,GAClD,OAAO4B,MAAMC,KAAK,EAAKC,aAAa3B,MAAMC,IAAIuB,IAAc,IAAI1B,KAC9D,SAACpB,GAAD,OAAQ,EAAK4B,QAAQL,IAAIvB,OAnBf,EAuBPQ,YAAc,SAACC,GAoCpB,OAnCAA,EAAOyC,YAAczC,EAAO0C,aAEH,OAAvB1C,EAAOyC,kBACgB3C,IAAvBE,EAAOyC,aACuB,OAA9BzC,EAAOyC,YAAYhB,SAEnBzB,EAAOyC,YAAYf,SAAW1B,EAAOyC,YAAYhB,cAC1CzB,EAAOyC,YAAYhB,QAE5BzB,EAAO2C,cAAgB3C,EAAO4C,oBACF9C,IAAxBE,EAAO6C,eACT7C,EAAO8C,YAAc9C,EAAO6C,aAAalC,KAAI,SAACR,GAiB5C,OAhBAA,EAAK4C,cAAgB5C,EAAK6C,eAAerC,KAAI,SAACsC,GAK5C,YAJkBnD,IAAdmD,EAAEC,UACJD,EAAE7C,OAAS6C,EAAEC,eACND,EAAEC,SAEJD,KAET9C,EAAKgD,aAAehD,EAAKiD,cAAczC,KAAI,SAACsC,GAK1C,YAJkBnD,IAAdmD,EAAEC,UACJD,EAAE7C,OAAS6C,EAAEC,eACND,EAAEC,SAEJD,YAEF9C,EAAK6C,sBACL7C,EAAKiD,cACLjD,YAEFH,EAAO6C,qBAET7C,EAAO6C,oBACP7C,EAAO4C,sBACP5C,EAAO0C,aACP1C,GA3DK,EADhB,8CAOE,WACE,OAAON,KAAKqC,QAAQ,KARxB,mBA+DE,SAAgB/B,GACdN,KAAK8C,aAAaR,IAAIhC,OAhE1B,GAAgCiC,K,wBCoDnBoB,EAKX,WAAYC,GAAmB,IAAD,gCAHtBC,QAAqC,GAGf,KAFtBC,OAAmC,GAEb,KAY9BC,MAAQ,SAACC,GACP,YAA6B5D,IAAzB,EAAK0D,OAAOE,EAAKnE,KAA8C,IAAzB,EAAKiE,OAAOE,EAAKnE,IAClDmE,EAAKD,MAER,GAAN,OAAUC,EAAKD,MAAf,YAAwB,EAAKD,OAAOE,EAAKnE,MAhBb,KAmB9BoE,UAAY,SAACC,EAAaH,GACxB,YAA0B3D,IAAtB,EAAKyD,QAAQK,GACRH,EAEH,GAAN,OAAUA,EAAV,YAAmB,EAAKF,QAAQK,KAvBJ,KA0B9B5B,IAAM,SAAC0B,QAC0B5D,IAA3B,EAAKyD,QAAQG,EAAKE,OACpB,EAAKL,QAAQG,EAAKE,KAAO,GAE3B,EAAKJ,OAAOE,EAAKnE,IAAM,EAAKgE,QAAQG,EAAKE,KACzC,EAAKL,QAAQG,EAAKE,MAAQ,GA/BE,KAkC9BC,OAAS,SAACH,GACR,OAAO,EAAKF,OAAOE,EAAKnE,KAnCI,oBACX+D,GAAS,IADE,IAC5B,2BAA8B,CAAC,IAAtBI,EAAqB,QACN,eAAlBA,EAAKI,gBAEsBhE,IAA3BJ,KAAK6D,QAAQG,EAAKE,OACpBlE,KAAK6D,QAAQG,EAAKE,KAAO,GAE3BlE,KAAK8D,OAAOE,EAAKnE,IAAMG,KAAK6D,QAAQG,EAAKE,KACzClE,KAAK6D,QAAQG,EAAKE,MAAQ,IARA,gCAuCnBG,EAAb,WAUE,WAAYxE,EAAY+D,EAAiBU,GAAkB,IAAD,gCATnDzE,QASmD,OARnD0E,aAQmD,OAPnDX,WAOmD,OANnDU,WAMmD,OALnDE,WAKmD,OAJnDC,aAAyC,GAIU,KAHnDC,iBAAsD,GAGH,KAFnDC,cAEmD,OAiC1DC,MAAQ,WACN,IAAMtE,EAAS,EAAKuE,OACpB,OAAO,IAAIR,EAAQ,EAAKxE,GAAIS,EAAOsD,MAAOtD,EAAOgE,QAnCO,KAsC1DQ,OAAS,WACP,EAAKN,OAAQ,GAvC2C,KA0C1DR,KAAO,SAACnE,GAAD,OAAgB,EAAK+D,MAAM,EAAKa,aAAa5E,KA1CM,KA2C1DkF,QAAU,SAAClF,GAAD,YAA0CO,IAA1B,EAAKqE,aAAa5E,IA3Cc,KA4C1DmF,WAAa,SAACd,GAAD,OACX,EAAKN,MAAMqB,QACT,SAACjB,GAAD,MAA4B,eAAlBA,EAAKI,UAA6BJ,EAAKE,MAAQA,MA9CH,KAgD1DgB,kBAAoB,SAACrF,GAAD,OAAgB,EAAK+D,MAAM,EAAKc,iBAAiB7E,KAhDX,KAiD1DsF,eAAiB,SAACtF,GAAD,OACf,EAAK+D,MAAMqB,QACT,SAACjB,GAAD,MACoB,iBAAlBA,EAAKI,UACe,cAApBJ,EAAKoB,MAAMC,MACXrB,EAAKoB,MAAMvF,KAAOA,KACpB,IAvDsD,KAyD1DyF,KAAO,SAACC,EAAgBC,GAAjB,OACL,EAAKlB,MAAMW,QAAO,SAACQ,GAAD,OAAOA,EAAEF,SAAWA,GAAUE,EAAED,SAAWA,KAAQ,IA1Db,KA2D1DE,QAAU,SAACH,EAAgBC,GAAjB,OACR,EAAKlB,MAAMW,QAAO,SAACQ,GAAD,OAAOA,EAAEF,SAAWA,GAAUE,EAAED,SAAWA,KAC1DG,OAAS,GA7D4C,KA8D1DC,cAAgB,SAACJ,GAAD,OACd,EAAKlB,MAAMW,QAAO,SAACQ,GAAD,OAAOA,EAAED,SAAWA,MA/DkB,KAgE1DK,cAAgB,SAACN,GAAD,OACd,EAAKjB,MAAMW,QAAO,SAACQ,GAAD,OAAOA,EAAEF,SAAWA,MAjEkB,KAmE1DO,WAAa,WACX,IAAK,IAAIxE,EAAI,EAAGA,EAAwB,IAApB,EAAKsC,MAAM+B,OAAcrE,IAAK,CAChD,IAAIyE,EAAG,YAAQzE,GACf,QAA+BlB,IAA3B,EAAKqE,aAAasB,GACpB,OAAOA,EAGX,MAAM,IAAIC,MAAM,kCA1EwC,KAsF1DC,iBAAmB,SACjBC,EACAC,GAEA,IADwB,EACpBC,EAAkC,GAClCC,EAAW,EAAKR,cAAcK,GAFV,cAGJG,GAHI,IAGxB,2BAA8B,CAAC,IAAtBC,EAAqB,QAC5B,GAAIA,EAAQd,SAAWW,EAAvB,CAD4B,oBAMP,EAAKN,cAAcS,EAAQd,SANpB,IAM5B,2BAAyD,CAAC,IAAjDe,EAAgD,QACnDA,EAASf,SAAWW,GACtBC,EAAW5E,KAAK,CAAC8E,EAASC,KARF,oCAE1BH,EAAW5E,KAAK,CAAC8E,OAASlG,KALN,8BAgBxB,OAAOgG,GAzGiD,KAiH1DI,wBAA0B,SAACC,GACzB,IADqE,EACjEC,EAAU,EAAKd,cAAc,EAAKV,kBAAkBuB,GAAa5G,IADA,cAElD6G,GAFkD,IAErE,2BAA4B,CAAC,IAApBC,EAAmB,QAC1B,GAAmB,+CAAfA,EAAOzC,IAAsD,CAC/D,GAAIwC,EAAQf,OAAS,EACnB,MAAM,IAAIK,MACR,mEAGJ,OAAOW,EAAOpB,SATmD,gCAjHb,KAgI1DqB,sBAAwB,SAAC/G,GACvB,IAD2D,EACvDgH,EAAgC,GADuB,cAEvC,EAAKhB,cAAchG,IAFoB,IAE3D,2BAA4C,CAAC,IAApCyG,EAAmC,QACtCd,EAAS,EAAKxB,KAAKsC,EAAQd,QAC/B,GACsB,eAApBA,EAAOpB,UACQ,wCAAfoB,EAAOtB,IACP,CAAC,IAAD,gBACqB,EAAK2B,cAAcS,EAAQd,SADhD,IACA,2BAAyD,CAAC,IAAjDsB,EAAgD,QACvDD,EAASrF,KAAK,CAAC8E,EAASQ,KAF1B,oCAKAD,EAASrF,KAAK,CAAC8E,OAASlG,KAZ+B,8BAe3D,OAAOyG,GA/IiD,KA8blDE,YAAc,SAACC,GACrB,QACgC5G,IAA9B,EAAKqE,aAAauC,SACwB5G,IAA1C,EAAKwD,MAAM,EAAKa,aAAauC,IAF/B,CAOA,IAAIC,EAAY,EAAKxC,aAAauC,GAC9BhD,EAAO,EAAKJ,MAAMqD,GAEtB,KACoB,cAAlBjD,EAAKI,UACc,iBAAlBJ,EAAKI,UAA+BJ,EAAKkD,aAF5C,CASC,EAAKtD,MAAMqD,QAAqB7G,EAGjC,IAvBwC,EAuBpCkE,EAAQ,EAAKA,MAAMW,QACrB,SAACK,GAAD,OAAUA,EAAKC,SAAWyB,GAAU1B,EAAKE,SAAWwB,KAxBd,cA0BvB1C,GA1BuB,IA0BxC,2BAAwB,CAAC,IAAhBgB,EAAe,QACtB,EAAK6B,YAAY7B,EAAKC,OAAQD,EAAKE,SA3BG,kCA9bgB,KAgelD2B,YAAc,SAACjB,EAAkBC,GAKvC,IAJA,IAAIiB,OAAYhH,EACZiH,EAAe,EACfC,EAAe,EAEVhG,EAAI,EAAGA,EAAI,EAAKgD,MAAMqB,OAAQrE,IAAK,CAC1C,IAAIgE,EAAO,EAAKhB,MAAMhD,GAClBgE,EAAKC,SAAWW,GAAYZ,EAAKE,SAAWW,IAC9CiB,EAAY9F,GAEVgE,EAAKC,SAAWW,GAAYZ,EAAKE,SAAWU,IAC9CmB,GAAgB,GAEd/B,EAAKC,SAAWY,GAAYb,EAAKE,SAAWW,IAC9CmB,GAAgB,QAIFlH,IAAdgH,IAKJ,EAAK9C,MAAMiD,OAAOH,EAAW,GAIR,IAAjBC,GACF,EAAKN,YAAYb,GAEE,IAAjBoB,GACF,EAAKP,YAAYZ,KA/fqC,KAmgBlDqB,WAAa,WACnB,EAAK/C,aAAe,GACpB,EAAKC,iBAAmB,GAExB,IAAK,IAAIpD,EAAI,EAAGA,EAAI,EAAKsC,MAAM+B,OAAQrE,IAAK,CAC1C,IAAImG,EAAI,EAAK7D,MAAMtC,GACnB,EAAKmD,aAAagD,EAAE5H,IAAMyB,EACP,cAAfmG,EAAErD,UAA8C,OAAlBqD,EAAEhB,cAClC,EAAK/B,iBAAiB+C,EAAEhB,aAAenF,KA1gB3CtB,KAAKH,GAAKA,EACVG,KAAKuE,QAAU,EACfvE,KAAK4D,MAAQA,EACb5D,KAAKsE,MAAQA,EACbtE,KAAKwE,OAAQ,EAEbxE,KAAKwH,aACLxH,KAAK2E,SAAW,IAAIhB,EAAS3D,KAAK4D,OAElC3D,YAAeD,KAAM,CACnBuE,QAASrE,IACT0D,MAAO1D,IACPoE,MAAOpE,IACPsE,MAAOtE,IACPuE,aAAcvE,IACdwE,iBAAkBxE,IAClByE,SAAUzE,IACVwH,sBAAuBC,IACvBC,iBAAkBD,IAClBE,mBAAoBF,IACpBG,aAAcH,IACdI,eAAgBJ,IAChBK,WAAYL,IACZM,gBAAiBN,IACjBO,eAAgBP,IAChBQ,kBAAmBR,IACnBS,QAAST,IACTU,WAAYV,IACZW,WAAYX,MAvClB,wCAuFE,WACE,MAAO,CACL/D,MAAOiB,YAAK7E,KAAK4D,OACjBU,MAAOO,YAAK7E,KAAKsE,OACjBG,aAAcI,YAAK7E,KAAKyE,iBA3F9B,mCA0KE,SACE8D,EACAC,EACAC,GAEA,IAAIlD,EAASvF,KAAKkF,kBAAkBqD,GAChC/C,EAASxF,KAAKkF,kBAAkBsD,GAEhCE,EAAsB1I,KAAK4F,cAAcL,EAAO1F,IACpD,GAAmC,IAA/B6I,EAAoB/C,OACtB,MAAM,IAAIK,MAAM,oDAElB,GAAmC,IAA/B0C,EAAoB/C,OACtB,MAAM,IAAIK,MACR,iGAIJ,IAAI2C,EAAsB3I,KAAK4F,cAAcJ,EAAO3F,IACpD,GAAI8I,EAAoBhD,OAAS,EAC/B,MAAM,IAAIK,MACR,iGAIJ,IAAI4C,EAAaF,EAAoB,GAAGnD,OACpCsD,EAC6B,IAA/BF,EAAoBhD,OAChBH,EAAO3F,GACP8I,EAAoB,GAAGpD,OAE7BvF,KAAKoI,QAAL,2BACKK,GADL,IAEElD,OAAQqD,EACRpD,OAAQqD,OA5Md,8BAuNE,SAAwBpC,EAAqBlB,GAC3C,IAAIC,EAASxF,KAAKkF,kBAAkBuB,GAChCkC,EAAsB3I,KAAK4F,cAAcJ,EAAO3F,IAEpD,GAAI8I,EAAoBhD,OAAS,EAC/B,MAAM,IAAIK,MACR,0FAIJ,GAAmC,IAA/B2C,EAAoBhD,OAAc,CACpC,IAAIO,EAAWlG,KAAK8F,aACpB9F,KAAK8H,aAAL,2BACKvC,GADL,IAEE1F,GAAIqG,KAGNlG,KAAKoI,QAAQ,CACX7C,OAAQW,EACRV,OAAQA,EAAO3F,GACfqE,IAAK,6CACLH,MAAO,aACP+E,eAAe,QAEZ,CACL,IAAIxD,EAAOqD,EAAoB,GAC/B3I,KAAKiI,gBAAgB3C,EAAKC,OAAQA,GACjB,+CAAbD,EAAKpB,KAEPlE,KAAKsI,WAAWhD,EAAKC,OAAQD,EAAKE,OAAQ,CACxCtB,IAAK,6CACLH,MAAO,aACP+E,cAAexD,EAAKwD,mBAvP9B,gCAyQE,SACE5C,EACAC,EACA4C,EACAC,GAKA,IAAI5C,EAAapG,KAAKiG,iBAAiBC,EAAUC,GAEjD,GAA0B,IAAtBC,EAAWT,OAAf,CAsCA,GAAIS,EAAWT,OAAS,EACtB,MAAM,IAAIK,MACR,iFAIJ,kBAAqBI,EAAW,GAAhC,GAAK6C,EAAL,KAAYC,EAAZ,KACAlJ,KAAKsI,WAAWW,EAAM1D,OAAQ0D,EAAMzD,OAAQ,CAC1CtB,IAAK6E,EAAM7E,IACXH,MAAOgF,EAAMhF,MACb+E,eAAe,SAEH1I,IAAV8I,GAEFlJ,KAAKsI,WAAWY,EAAM3D,OAAQ2D,EAAM1D,OAAQ,CAC1CtB,IAAK8E,EAAM9E,IACXH,MAAOiF,EAAMjF,MACb+E,eAAe,SArDjB,GAAIC,EAAM7E,MAAQ8E,EAAM9E,IAEtBlE,KAAKoI,QAAQ,CACX7C,OAAQW,EACRV,OAAQW,EACRjC,IAAK6E,EAAM7E,IACXH,MAAOgF,EAAMhF,MACb+E,eAAe,QAEZ,CACL,IAAIK,EAASnJ,KAAK8F,aAClB9F,KAAK8H,aAAa,CAChBjI,GAAIsJ,EACJjF,IAAK,sCACLH,MAAO,qBACP+E,eAAe,EACf1E,SAAU,eAEZpE,KAAKoI,QAAQ,CACX7C,OAAQW,EACRV,OAAQ2D,EACRjF,IAAK6E,EAAM7E,IACXH,MAAOgF,EAAMhF,MACb+E,eAAe,IAEjB9I,KAAKoI,QAAQ,CACX7C,OAAQ4D,EACR3D,OAAQW,EACRjC,IAAK8E,EAAM9E,IACXH,MAAOiF,EAAMjF,MACb+E,eAAe,OApTzB,0BAmVE,SAAoB9E,GAClB,QAAmC5D,IAA/BJ,KAAKyE,aAAaT,EAAKnE,IACzB,MAAM,IAAImG,MAAM,iBAElBhG,KAAKyE,aAAaT,EAAKnE,IAAMG,KAAK4D,MAAM+B,OACxC3F,KAAK4D,MAAMpC,KAAKwC,GAChBhE,KAAK2E,SAASrC,IAAI0B,GAClBhE,KAAKuE,SAAW,EAChBvE,KAAKwE,OAAQ,IA3VjB,4BAiWE,SAAsBR,GACpB,QAAmC5D,IAA/BJ,KAAKyE,aAAaT,EAAKnE,IACzB,MAAM,IAAImG,MAAM,iBAElBhG,KAAKyE,aAAaT,EAAKnE,IAAMG,KAAK4D,MAAM+B,OACxC3F,KAAK4D,MAAMpC,KAAKwC,GAChBhE,KAAKuE,SAAW,EAChBvE,KAAKwE,OAAQ,IAxWjB,wBA2WE,SAAkBwC,GAChBhH,KAAK+G,YAAYC,GACjBhH,KAAK4D,MAAQ5D,KAAK4D,MAAMqB,QAAO,SAACwC,GAAD,YAAarH,IAANqH,KACtCzH,KAAKwH,aACLxH,KAAKuE,SAAW,EAChBvE,KAAKwE,OAAQ,EACbxE,KAAK2E,SAAW,IAAIhB,EAAS3D,KAAK4D,SAjXtC,6BAoXE,SAAuBoD,EAAgBoC,GACrC,IAAInC,EAAYjH,KAAKyE,aAAauC,GAC9BhD,EAAOhE,KAAK4D,MAAMqD,GAEtB,GAAsB,eAAlBjD,EAAKI,SACP,MAAM,IAAI4B,MAAJ,yDAC8ChC,EAAKI,WAG3D1C,OAAO2H,OAAOrF,EAAMoF,GACpBpJ,KAAKuE,SAAW,EAChBvE,KAAKwE,OAAQ,OACKpE,IAAdgJ,EAAMlF,MACRlE,KAAK2E,SAAW,IAAIhB,EAAS3D,KAAK4D,UAjYxC,+BAqYE,SAAyBoD,EAAgBoC,GACvC,IAAInC,EAAYjH,KAAKyE,aAAauC,GAC9BhD,EAAOhE,KAAK4D,MAAMqD,GAEtB,GAAsB,iBAAlBjD,EAAKI,SACP,MAAM,IAAI4B,MAAJ,2DACgDhC,EAAKI,WAG7D1C,OAAO2H,OAAOrF,EAAMoF,GACpBpJ,KAAKuE,SAAW,EAChBvE,KAAKwE,OAAQ,IAhZjB,4BAmZE,SAAsBwC,EAAgBoC,GACpC,IAAInC,EAAYjH,KAAKyE,aAAauC,GAC9BhD,EAAOhE,KAAK4D,MAAMqD,GAEtB,GAAsB,cAAlBjD,EAAKI,SACP,MAAM,IAAI4B,MAAJ,wDAC6ChC,EAAKI,WAG1D1C,OAAO2H,OAAOrF,EAAMoF,GACpBpJ,KAAKuE,SAAW,EAChBvE,KAAKwE,OAAQ,IA9ZjB,qBAiaE,SAAec,GACb,GAAItF,KAAK0F,QAAQJ,EAAKC,OAAQD,EAAKE,QACjC,MAAM,IAAIQ,MAAM,oDAGlBhG,KAAKsE,MAAM9C,KAAK8D,GAChBtF,KAAKuE,SAAW,EAChBvE,KAAKwE,OAAQ,IAxajB,wBA2aE,SAAkB0B,EAAkBC,GAClC,IAAImD,EAAOtJ,KAAK4D,MAAM+B,OACtB3F,KAAKmH,YAAYjB,EAAUC,GAC3BnG,KAAK4D,MAAQ5D,KAAK4D,MAAMqB,QAAO,SAACwC,GAAD,YAAarH,IAANqH,KAElCzH,KAAK4D,MAAM+B,SAAW2D,IACxBtJ,KAAKwH,aACLxH,KAAK2E,SAAW,IAAIhB,EAAS3D,KAAK4D,QAEpC5D,KAAKuE,SAAW,EAChBvE,KAAKwE,OAAQ,IArbjB,wBAwbE,SAAkBe,EAAgBC,EAAgB4D,GAChD,IAAK,IAAI9H,EAAI,EAAGA,EAAItB,KAAKsE,MAAMqB,OAAQrE,IAAK,CAC1C,IAAIgE,EAAOtF,KAAKsE,MAAMhD,GAClBgE,EAAKC,SAAWA,GAAUD,EAAKE,SAAWA,IAC5CxF,KAAKsE,MAAMhD,GAAX,2BAAqBtB,KAAKsE,MAAMhD,IAAO8H,IAG3CpJ,KAAKuE,SAAWvE,KAAKuE,SAAW,GAAK,EACrCvE,KAAKwE,OAAQ,MAhcjB,KCzFa+E,EAAb,WAUE,WACE1J,EACAC,EACAC,EACAwE,EACAiF,EACAC,GACC,yBAdH5J,QAcE,OAbFC,UAaE,OAZFC,iBAYE,OAXFwE,aAWE,OAVFiF,WAUE,OATFC,WASE,EACAzJ,KAAKH,GAAKA,EACVG,KAAKF,KAAOA,EACZE,KAAKD,YAAcA,EACnBC,KAAKuE,QAAUA,EACfvE,KAAKwJ,MAAQA,EACbxJ,KAAKyJ,MAAQA,EAvBjB,6CAgCE,WACEzJ,KAAKwJ,MAAM1E,WAjCf,qBAoCE,WACE,OAAO9E,SArCX,KAAauJ,EA0BJG,QAAU,SACfC,GAEA,YAA8CvJ,IAAtCuJ,EAA0BC,SAY/B,IAAMC,EAAb,kDAME,WACED,EACA9J,EACAC,EACAwE,EACAiF,EACAC,GACC,IAAD,8BACA,eAAO,EAAG3J,EAAMC,EAAawE,EAASiF,EAAOC,IAV/CG,aASE,EAEA,EAAKA,QAAUA,EAFf,EAbJ,qEAqBE,SACE/J,EACAC,EACA2J,GAEqB,IADrB1J,EACoB,uDADN,GAERyJ,EAAQ,IAAInF,EAChBxE,EACA4J,EAAMK,QAAQ7I,KAAI,SAAC8I,EAAQ5I,GAAT,MAAoB,CACpCtB,GAAG,OAAD,OAASsB,GACX4C,MAAOgG,EACPtD,YAAatF,EACbiD,SAAU,gBAEZ,IAGF,OADAoF,EAAMhF,OAAQ,EACP,IAAIqF,EAAmBhK,EAAIC,EAAMC,EAAa,EAAGyJ,EAAOC,EAAM5J,QAtCzE,GACU0J,GAyCGS,EAAb,kDAME,aAAe,IAAD,8BACZ,wBAASxK,EAAT,2BAAqCY,GAAW,EAAO,CACrD,IAAIqC,IAAe,YASvBwH,cAAgB,SAACR,GAEf,IADA,IAAInI,EAAI,IACK,CACX,IAAMzB,EAAE,gBAAYyB,EAAZ,YAAiBmI,EAAM5J,IAC/B,QAAgCO,IAA5B,EAAK8J,eAAerK,GACtB,OAAOA,EAETyB,MAlBU,EA6EPjB,YAAc,SAACC,GACpB,IAAMsD,EAAkBtD,EAAO6J,KAAKvG,MAAM3C,KAAI,SAAC+C,GAC7C,IAAMqB,EAAmBrB,EAAKqB,KAU9B,cATOrB,EAAKqB,KACZrB,EAAKI,SAAWiB,EACH,cAATA,GACFrB,EAAKyC,YAAczC,EAAKoG,oBACjBpG,EAAKoG,cACM,iBAAT/E,IACTrB,EAAKkD,YAAclD,EAAKqG,qBACjBrG,EAAKqG,eAEPrG,KAEHM,EAAkBhE,EAAO6J,KAAK7F,MAEhCkF,EAAQ,IAAInF,EAAQ/D,EAAOT,GAAGyK,WAAY1G,EAAOU,GACrD,OAAO,IAAIiF,EACTjJ,EAAOT,GACPS,EAAOR,KACPQ,EAAOP,YACPO,EAAOiE,QACPiF,EACAlJ,EAAOmJ,QApGG,EANhB,4CAYE,WACE,OAAOzJ,KAAKqC,QAAQ,KAbxB,qCA6BE,SAAwBoH,GACtB,IAD4C,EACtCc,EAAMvK,KAAKa,YAAY4I,EAAM5J,IAC7B2K,EAASxK,KAAKyK,iBAAiBhB,GAEjCiB,GAAO,EAJiC,cAK3BH,EAAII,OAAOH,IALgB,IAK5C,2BAAqC,CAAC,IAA3Bb,EAA0B,QAC7BiB,EAAI,WAAWC,KAAKlB,EAAG7J,MACnB,OAAN8K,IACAE,SAASF,EAAE,KAAOF,IACpBA,EAAMK,KAAKC,IAAIN,EAAKI,SAASF,EAAE,QATS,8BAY5C,MAAM,MAAN,OAAaF,EAAM,KAzCvB,8BA6CE,SAAiBjB,GAGf,IAFA,IAAMe,EAAS,GACXlJ,EAAI,IACK,CACX,IAAMzB,EAAE,gBAAYyB,EAAZ,YAAiBmI,EAAM5J,IACzBoL,EAAQjL,KAAKkK,eAAerK,GAClC,QAAcO,IAAV6K,EACF,MAEFT,EAAOhJ,KAAKyJ,GACZ3J,IAEF,OAAOkJ,IAzDX,yBA+DE,SAAmB1J,GAAmC,IAAD,OACnD,OAAO8B,MAAMC,KAAK7C,KAAKkB,WAAWC,MAAMC,IAAIN,IAAY,IAAIG,KAC1D,SAACpB,GAAD,OAAQ,EAAK4B,QAAQL,IAAIvB,QAjE/B,qBAwEE,SAAkBS,GAA8B,IAAD,gBACzBN,KAAKqC,SADoB,IAC7C,2BAAkC,SAC1B6I,OAAO5K,IAF8B,iCAxEjD,wBA+EE,SAAkBQ,GAChB,OAAOd,KAAKkB,WAAWC,MAAMgK,IAAIrK,KAhFrC,kCA8GE,SAA4BR,GAE1B,OADAA,EAAOiE,SAAW,EACX,CACLkF,MAAOnJ,EAAOmJ,MACd3J,KAAMQ,EAAOR,KACbC,YAAaO,EAAOP,YACpBwE,QAASjE,EAAOiE,QAChB4F,KAAM,CACJvG,MAAOtD,EAAOkJ,MAAM5F,MAAM3C,KAAI,SAAC+C,GAC7B,OAAQA,EAAKI,UACX,IAAK,aACH,MAAO,CACLvE,GAAImE,EAAKnE,GACTqE,IAAKF,EAAKE,IACV4E,cAAe9E,EAAK8E,cACpB/E,MAAOC,EAAKD,MACZsB,KAAMrB,EAAKI,UAEf,IAAK,YACH,MAAO,CACLvE,GAAImE,EAAKnE,GACTkE,MAAOC,EAAKD,MACZqG,aAAcpG,EAAKyC,YACnBpB,KAAMrB,EAAKI,UAEf,IAAK,eACH,MAAO,CACLvE,GAAImE,EAAKnE,GACTuF,MAAOpB,EAAKoB,MACZrB,MAAOC,EAAKD,MACZsG,cAAerG,EAAKkD,YACpB7B,KAAMrB,EAAKI,cAInBE,MAAOhE,EAAOkJ,MAAMlF,MAAMrD,KAAI,SAACqE,GAC7B,MAAO,CACLC,OAAQD,EAAKC,OACbC,OAAQF,EAAKE,OACbtB,IAAKoB,EAAKpB,IACV4E,cAAexD,EAAKwD,cACpB/E,MAAOuB,EAAKvB,cAvJxB,kCA8JE,SAA4BzD,GAC1B,OAAON,KAAKoL,qBAAqB9K,OA/JrC,GAAwCC,KC3F3B8K,EASX,WACExL,EACAqE,EACAH,EACAuH,EACAC,EACAxL,EACAqJ,GACC,yBAhBIvJ,QAgBL,OAfKqE,SAeL,OAdKH,WAcL,OAbKuH,mBAaL,OAZKC,aAYL,OAXKxL,iBAWL,OAVKyL,gBAUL,EACAxL,KAAKH,GAAKA,EACVG,KAAKkE,IAAMA,EACXlE,KAAK+D,MAAQA,EACb/D,KAAKsL,cAAgBA,EACrBtL,KAAKuL,QAAUA,EACfvL,KAAKD,YAAcA,EACnBC,KAAKwL,WAAapC,EAElBnJ,YAAeD,KAAM,CACnBH,GAAIK,IACJ6D,MAAO7D,IACPqL,QAASrL,IACTH,YAAaG,IACbsL,WAAYtL,OA/BLmL,EAuCJI,OAAS,SAACzJ,GACf,OAAQA,EAAS,IACf,IAAK,IACH,MAAM,iCAAN,OAAwCA,GAC1C,IAAK,IACH,MAAM,0CAAN,OAAiDA,GACnD,IAAK,IACH,MAAM,wCAAN,OAA+CA,GACjD,QACE,OAAOA,IAhDFqJ,EAoDJK,OAAS,SAACC,GACf,OAAIA,EAAUC,WAAW,2CAChBD,EAAUE,MAAM,0CAA0ClG,QAE/DgG,EAAUC,WAAW,yCAChBD,EAAUE,MAAM,wCAAwClG,QAE7DgG,EAAUC,WAAW,kCAChBD,EAAUE,MAAM,iCAAiClG,QAEnDgG,G,aC/DEG,EAAb,WAOE,aAAe,IAAD,gCALPC,uBAAsC,IAAIC,IAKnC,KAFPC,0BAAyC,IAAID,IAEtC,KAyBdE,yBAA2B,SAAC9C,GAC1B,EAAK2C,uBAAyB3C,GA1BlB,KA6Bd+C,4BAA8B,SAAC/C,GAC7B,EAAK6C,0BAA4B7C,GA9BrB,KAiCdgD,yBAA2B,SAACC,GAC1B,EAAKN,uBAAuBzJ,IAAI+J,IAlCpB,KAqCdC,4BAA8B,SAACD,GAC7B,EAAKJ,0BAA0B3J,IAAI+J,IAtCvB,KAyCdE,4BAA8B,SAACF,GAC7B,EAAKN,uBAAuBS,OAAOH,IA1CvB,KA6CdI,+BAAiC,SAACJ,GAChC,EAAKJ,0BAA0BO,OAAOH,IA7CtCrM,KAAKiM,0BAA0B3J,IAAI,OAEnCrC,YAAeD,KAAM,CACnB+L,uBAAwB7L,IACxB+L,0BAA2B/L,IAC3BwM,sBAAuBC,IACvBC,yBAA0BD,IAC1BT,yBAA0BvE,IAC1BwE,4BAA6BxE,IAC7ByE,yBAA0BzE,IAC1B2E,4BAA6B3E,IAC7B4E,4BAA6B5E,IAC7B8E,+BAAgC9E,MApBtC,uDAwBE,WACE,OAAO/E,MAAMC,KAAK7C,KAAK+L,0BAzB3B,oCA4BE,WACE,OAAOnJ,MAAMC,KAAK7C,KAAKiM,+BA7B3B,KCKaY,EAAb,kDAGE,aAAe,IAAD,8BACZ,wBAASrN,EAAT,sBAAgCY,GAAW,IAHtC0M,cAEO,IASPzM,YAAc,SAACC,GACpBA,EAAOgL,cAAgBhL,EAAOyM,sBACvBzM,EAAOyM,eACd,cAAoBrL,OAAOC,OAAOrB,EAAOkL,YAAzC,eAAsD,CAAjD,IAAiD,EAA3CwB,EAAK,KAAsC,cACnCA,GADmC,IACpD,2BAAiC,CAAC,IAAzBC,EAAwB,QAC/BA,EAAKC,gBAAkBD,EAAKE,wBACrBF,EAAKE,kBAHsC,+BAMtD,OAAO7M,GAhBP,EAAKwM,SAAW,IAAIhB,EAEpB7L,YAAe,eAAM,CACnB6M,SAAU5M,MALA,EAHhB,UAAiCqC,KCMpB6K,EAAb,kDACE,aAAe,IAAD,8BACZ,wBACK5N,EADL,mBAEE,CAAE8L,cAAe,mBACjB,EACA,CAAC,IAAI+B,IAAqB,UAQ9BC,iBAAmB,SAACpJ,GAClB,IAAMrE,EAAK,EAAK0N,SAASpM,MAAMC,IAAI8C,GACnC,YAAc9D,IAAPP,EAAmB,EAAKuB,IAAIvB,QAAOO,GAf9B,EADhB,0CAUE,WACE,OAAOJ,KAAKqC,QAAQ,OAXxB,GAAmCE,KCAtBiL,EAAb,kDACE,aAAe,IAAD,8BACZ,wBAAShO,EAAT,gBAA+B,CAAE8L,cAAe,mBAAoB,EAAO,CACzE,IAAI+B,IAAqB,UAQ7BI,cAAgB,SAACvJ,GACf,IAAMrE,EAAK,EAAK0N,SAASpM,MAAMC,IAAI8C,GACnC,YAAc9D,IAAPP,EAAmB,EAAKuB,IAAIvB,QAAOO,GAZ9B,EADhB,0CAOE,WACE,OAAOJ,KAAKqC,QAAQ,OARxB,GAAgCE,KCInBmL,EAAS,CACpBC,aAAc,IAAIxN,EAClByN,WAAY,IAAIpL,EAChBqL,cAAe,IAAIlN,EACnBmN,mBAAoB,IAAI9D,EACxB+D,YAAa,IAAIlB,EACjBmB,cAAe,IAAIZ,EACnBa,WAAY,IAAIT,GAEjBU,OAAeC,QAAUT,EAGnB,IAAMU,EAAeC,wBAAsBX,GAE3C,SAASY,IACd,OAAOC,IAAMC,WAAWJ,G,gECzBbK,EAAWC,aAAS,WAC/B,IAAQf,EAAiBW,IAAjBX,aAMR,OAJAgB,qBAAU,WACRhB,EAAaiB,MAAM,CAAEC,MAAO,IAAKC,OAAQ,MACxC,CAACnB,IAGF,cAAC,IAAMoB,SAAP,UACE,cAAC,IAAD,CAAKC,OAAQ,GAAb,SACE,eAAC,IAAD,CAAKC,UAAU,aAAaC,KAAM,GAAlC,UACE,cAAC,IAAWC,MAAZ,CAAkBC,MAAO,EAAzB,sBACA,cAAC,IAAD,CACE9F,KAAK,QACL+F,UAAU,EACVC,WAAW,aACXC,WAAY5B,EAAa6B,KACzBC,WAAY,SAACC,EAASpO,GAAV,OACV,cAAC,IAAKqO,KAAN,UACE,cAAC,IAAKA,KAAKC,KAAX,CACEC,OACE,cAAC,IAAD,CACEC,MAAM,SACNxG,KAAK,QACLyG,MAAO,CACLC,UAAW,EACXC,gBAAiB,CACf,UACA,UACA,UACA,WACAP,EAAQ5P,KAAKoQ,WAAW,GAAK,IAVnC,SAaGR,EAAQ5P,KAAK,GAAGqQ,gBAGrBC,MACE,cAAC,IAAD,CACEC,KAAMC,GAAOZ,QACba,QAAS,CAAE5N,UAAW+M,EAAQ7P,IAC9B2Q,UAAW,GAHb,SAKGd,EAAQ5P,OAGbC,YAAa2P,EAAQ3P,6B,8DC1B1B0Q,EAAcC,YAjBZ,CACbjH,MAAO,CACL,4BAA6B,CAC3BkH,OAAQ,iBACRC,aAAc,EACdC,WAAY,6BAEd,sBAAuB,CACrBC,YAAa,EACbC,aAAc,GAEhB,OAAQ,CACNC,WAAY,OAKSN,CACzBhC,aAAS,YAA6C,IAA1CuC,EAAyC,EAAzCA,QACJtO,EAAY2N,GAAOZ,QAAQwB,eAAgBvO,UAEjD,EAAqC2L,IAA7BX,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtBe,qBAAU,WACRhB,EAAawD,UAAUxO,KACtB,CAACgL,EAAchL,IAElB,IAAM+M,EAAU/B,EAAavM,IAAIuB,GACjC,QAAgBvC,IAAZsP,EACF,OAAO,cAAC,IAAD,IACF,GAAgB,OAAZA,EACT,OAAO,cAAC,IAAD,IAGT,IAAM5F,EAAU,CACd,CAAEsH,UAAW,KAAMhB,MAAO,MAC1B,CACEgB,UAAW,OACXhB,MAAO,OACPiB,WAAY,SAACC,EAAcC,GACzB,OACE,cAAC,IAAD,CACElB,KAAMC,GAAO7G,MACb8G,QAAS,CAAEzP,QAASyQ,EAAI1R,IACxB2Q,UAAW,CACTgB,MAAO5D,EAAW6D,iBAAiB,CAAE/B,QAAS/M,KAJlD,SAOG4O,EAAIzR,SAKb,CAAEsR,UAAW,cAAehB,MAAO,gBAGrC,OACE,eAAC,IAAMrB,SAAP,WACE,eAAC,IAAWI,MAAZ,CAAkBC,MAAO,EAAzB,sBACYsC,IAAEC,WAAWjC,EAAQ5P,SAEjC,cAAC,IAAD,CACEmP,UAAWgC,EAAQxH,MACnBmI,YAAY,QACZvC,UAAU,EACVwC,QAAO,uCAAE,WAAOC,EAAQC,EAAM9M,GAArB,eAAA+M,EAAA,sEACYpE,EAAWgB,MAAM,CAClCC,MAAOiD,EAAOG,SACdnD,QAASgD,EAAOI,QAAW,GAAKJ,EAAOG,SACvCE,WAAY,CAAEzC,QAAS/M,KAJlB,cACHyP,EADG,yBAMA,CACLjI,KAAMiI,EAAO3Q,QAAQR,IAAIoR,GACzBC,SAAS,EACTC,MAAOH,EAAOG,QATT,2CAAF,0DAYPC,QAAS,CACPC,QAAQ,GAEVC,YAAa,cAAC,IAAWvD,MAAZ,CAAkBC,MAAO,EAAzB,oBAEbqD,QAAQ,EACRE,WAAY,CACVV,SAAU,IACVW,gBAAiB,CAAC,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,SAE3DC,OAAO,KACP/I,QAASA,WAOnB,SAASuI,EAAUd,GACjB,MAAO,CACL1R,GAAI0R,EAAI1R,GACRC,KAAMyR,EAAIzR,KACVC,YAAawR,EAAIxR,a,8DC5Dd,SAAS+S,GAAoB/Q,GAClC,IAAMgR,EAAUC,mBAAQ,WAEtB,IADA,IAAMC,EAAmB,IAAIjH,IAC7B,MAA2BtK,OAAOwR,QAAQnR,EAAOyJ,YAAjD,eAA8D,CAAzD,0BAAO2H,EAAP,KAAYnG,EAAZ,KACHiG,EAAI3Q,IAAI6Q,GADoD,oBAEzCnG,GAFyC,IAE5D,2BACE,IADyB,IAAhBC,EAAe,QACxB,MAAkBvL,OAAO0R,KAAKnG,EAAKoG,YAAnC,eAAgD,CAA3C,IAAMC,EAAG,KACZL,EAAI3Q,IAAIgR,IAJgD,+BAQ9D,OAAO1Q,MAAMC,KAAKoQ,KACjB,CAAClR,EAAOlC,KAEHmO,EAAkBM,IAAlBN,cAMR,OAJAW,qBAAU,WACRX,EAAcuF,MAAMC,WAAWT,KAC9B,CAAChR,EAAOlC,KAEJ6B,OAAO+R,YACZV,EAAQ9R,KAAI,SAACpB,GACX,IAAMS,EAAS0N,EAAc5M,IAAIvB,GACjC,OAAIS,EACK,CAACT,EAAIS,GAEP,CAACT,EAAI,CAAEA,KAAI6T,aAAyB,OAAXpT,Q,yCCjEzBqT,GAAwB,SAAC,GASuC,IAR3E5R,EAQ0E,EAR1EA,OAQ0E,IAP1E6R,cAO0E,SAN1EC,EAM0E,EAN1EA,YACGC,EAKuE,mBAC1E,OAAIF,EACK,gDAAUE,GAAV,aAAsB/R,EAAOuJ,iBAIpC,cAAC,IAAD,yBACEyI,KAAM1I,EAAOI,OAAO1J,EAAOlC,IAC3BmU,eAAe,EACfH,YAAaA,GACTC,GAJN,aAMG/R,EAAOuJ,kB,mDCtBD2I,GAAuBvF,aAClC,YAYO,IAXL1M,EAWI,EAXJA,SACAkS,EAUI,EAVJA,OACAC,EASI,EATJA,cACAC,EAQI,EARJA,eAQI,IAPJC,oBAOI,SACItG,EAAgBO,IAAhBP,YAERY,qBAAU,WACRZ,EAAYwF,MAAMpC,UAAUnP,KAC3B,CAAC+L,EAAa/L,IAEjB,IAAMD,EAASgM,EAAY3M,IAAIY,GAE/B,YAAe5B,IAAX2B,EACEsS,OACoBjU,IAAlB+T,EACKA,IAEF,cAAC,IAAD,IAGF,+BAAOnS,IAGD,OAAXD,OACqB3B,IAAnBgU,EACKA,IAIP,cAAC,KAAD,CACEE,OAAO,MACPlE,MAAM,MACNmE,SAAQ,iBAAYvS,EAAZ,qBAKPkS,EAAOnS,EAAQgM,EAAYjB,a,kCC7CzB0H,GAA0B,SAAC,GAYjC,IAXLC,EAWI,EAXJA,SAWI,IAVJb,cAUI,aATJc,cASI,SARDZ,EAQC,mBACJ,QHiBqD1T,IGjB7BqU,EHiBYf,aGhBlC,OAAIe,EAASf,aAET,gDAAUI,GAAV,aACE,0CAAaW,EAAS5U,GAAtB,uBAGK+T,EACF,iDAAUE,GAAV,kBAAuBW,EAAS5U,GAAhC,QAKL,eAAC,IAAD,yBAAckU,KAAM,GAAIC,eAAe,GAAUF,GAAjD,kBACIW,EAAS5U,GADb,QAON,GAAI+T,EACF,OACE,iDAAUE,GAAV,cACGW,EAAS1Q,MADZ,KACqB0Q,EAAS5U,GAD9B,QAMJ,IAAMkE,EAAQ2Q,EAAM,UAAMD,EAAS1Q,MAAf,aAAyB0Q,EAAS5U,GAAlC,KAA0C4U,EAAS1Q,MAEvE,OACE,cAAC,IAAD,yBAAcgQ,KAAMU,EAASvQ,IAAK8P,eAAe,GAAUF,GAA3D,aACG/P,M,oBC7CM4Q,GAAuBjE,YALrB,CACbkE,KAAM,CACJC,QAAS,SAGuBnE,EAClC,SACEtH,GAIA,MAA8B0L,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAgB,WACpBD,GAAYD,IAERG,EAAMH,EACV,cAACI,GAAA,EAAD,CAAsBC,QAASH,IAE/B,cAACI,GAAA,EAAD,CAAaD,QAASH,IAGxB,OACE,gCACE,eAAC,KAAD,CAAO3L,KAAM,EAAb,UACGF,EAAMkM,SACNJ,KAEH,qBAAKjG,UAAW8F,EAAU,GAAK3L,EAAM6H,QAAQ2D,KAA7C,SACGxL,EAAMmM,oBCtBJC,GAAiB9E,YAFf,GAEeA,EAC5B,YAAkE,IAA/DtL,EAA8D,EAA9DA,MACD,MAAmB,aAAfA,EAAMC,KAEN,cAAC4O,GAAD,CACEjS,SAAUoD,EAAMA,MAChB8O,OAAQ,SAACnS,GACP,OAAO,cAAC,GAAD,CAAuBA,OAAQA,OAM3B,SAAfqD,EAAMC,KAEN,cAACsP,GAAD,CACEY,YACE,+BACE,+BACE,0CADF,IACoBnQ,EAAMA,MAAMqQ,YAEhC,+BACE,sCADF,IACgBrQ,EAAMA,MAAMsQ,OAD5B,MACuCtQ,EAAMA,MAAMuQ,SAEnD,+BACE,2CADF,IACqBvQ,EAAMA,MAAMwQ,aAEjC,+BACE,gDAAuB,IACvB,cAAC,IAAD,CACE7B,KAAM3O,EAAMA,MAAMyQ,cAClB7B,eAAe,EAFjB,SAIG5O,EAAMA,MAAMyQ,sBAlBvB,SAwBGzQ,EAAMA,MAAM0Q,OAKA,aAAf1Q,EAAMC,KAEN,cAACsP,GAAD,CACEY,YACE,+BACE,+BACE,uCADF,IACiBnQ,EAAMA,MAAM2Q,WAD7B,KAC2C,IACxC3Q,EAAMA,MAAM4Q,cAEf,+BACE,sCADF,IACgB5Q,EAAMA,MAAM6Q,WARlC,SAaG7Q,EAAMA,MAAM8Q,SAKA,oBAAf9Q,EAAMC,KAEN,iCACGD,EAAMA,MAAMkM,KADf,IACqB,kCAAKlM,EAAMA,MAAM+Q,eAKvB,oBAAf/Q,EAAMC,KAEN,cAACsP,GAAD,CACEY,YACE,+BACE,+BACE,2CADF,IACqBnQ,EAAMA,MAAMwQ,aAEjC,+BACE,uCAAc,IACd,cAAC,IAAD,CAAc7B,KAAM3O,EAAMA,MAAMgR,MAAOpC,eAAe,EAAtD,SACG5O,EAAMA,MAAMgR,cATvB,SAeE,eAAC,IAAD,CACErC,KAAI,wCAAmC3O,EAAMA,MAAMiR,SAA/C,YAA2DjR,EAAMA,MAAMkR,WAC3EtC,eAAe,EAFjB,UAIG5O,EAAMA,MAAMiR,SAJf,MAI4BjR,EAAMA,MAAMkR,UAJxC,UAWqB,kBAAhBlR,EAAMA,MACR,+BAAOmR,KAAKC,UAAUpR,EAAMA,SAG9B,+BAAOA,EAAMA,W,gCCtGXqR,GAAqB/F,YANnB,CACb2C,WAAY,CACVqD,WAAY,KAIkBhG,EAChC,YASuC,IAAD,EARpCzD,EAQoC,EARpCA,KACAgE,EAOoC,EAPpCA,QACA0F,EAMoC,EANpCA,QACG7C,EAKiC,mBAC9BT,EAAa,GADiB,cAElBpG,EAAKC,iBAFa,IAEpC,2BAAwC,CAAC,IAA9BoG,EAA6B,QAClCsD,OAAI,EAENA,EADkC,IAAhC3J,EAAKoG,WAAWC,GAAK3N,OAErB,cAAC,IAAWkR,KAAZ,CAAiBxR,KAAK,YAAYyR,QAAQ,EAA1C,sBAKK7J,EAAKoG,WAAWC,GAAKrS,KAAI,SAACmE,EAAO2R,GACtC,OACE,8BACE,cAACvB,GAAD,CAAgBpQ,MAAOA,KADf2R,MAOhB1D,EAAW7R,KACT,eAAC,IAAD,CAAKwN,OAAQ,EAAb,UACE,cAAC,IAAD,CAAKE,KAAM,EAAX,SACE,cAAC,GAAD,CAAyBuF,SAAUkC,EAAQrD,OAE7C,cAAC,IAAD,CAAKpE,KAAM,GAAX,SAAgB0H,MAJGtD,KArBW,8BA8BpC,OACE,gDAASQ,GAAT,cACE,8BACE,cAAC0B,GAAD,CAAgBpQ,MAAO6H,EAAK7H,UAE9B,qBAAK6J,UAAWgC,EAAQoC,WAAxB,SAAqCA,WCzChC2D,GAAoBtG,YATlB,CACbuG,YAAa,CACXC,OAAQ,EACRvG,OAAQ,OACRwG,MAAO,OACPlH,gBAAiB,SAIYS,CAC/BhC,aACE,YAWmC,IAVjC3M,EAUgC,EAVhCA,OACA4U,EASgC,EAThCA,QACAS,EAQgC,EARhCA,cAQgC,IAPhC1C,cAOgC,SANhCzD,EAMgC,EANhCA,QAO6B,IAAzBmG,EAAczR,SAChByR,EAAgB1V,OAAO0R,KAAKrR,EAAOyJ,aAGrC,IALgC,EAK1B6L,EAAa,GALa,cAMdD,GANc,IAMhC,2BAAiC,CAAC,IAAvBjE,EAAsB,QAE/B,QAA+B/S,IAA3B2B,EAAOyJ,WAAW2H,GAAtB,CAEA,IAAMnG,EAAQjL,EAAOyJ,WAAW2H,GAC5BkE,EAAW1R,OAAS,GACtB0R,EAAW7V,KACT,oBAA2ByN,UAAWgC,EAAQgG,aAA9C,kBAAoB9D,KAGxBkE,EAAW7V,KACT,eAAC,IAAD,CAAKwN,OAAQ,EAAb,UACE,cAAC,IAAD,CAAKE,KAAM,EAAX,SACE,cAAC,IAAW2H,KAAZ,CAAiBS,QAAQ,EAAzB,SACE,cAAC,GAAD,CACE7C,SAAUkC,EAAQxD,GAClBuB,OAAQA,QAId,cAAC,IAAD,CAAKxF,KAAM,GAAX,SACE,cAAC,KAAD,CAAOqI,UAAU,WAAWxH,MAAO,CAAEyH,MAAO,QAA5C,SACGxK,EAAM/L,KAAI,SAACgM,EAAMvC,GAChB,OACE,cAAC+L,GAAD,CAEExJ,KAAMA,EACN0J,QAASA,GAFJjM,YAdIyI,MAjBO,8BA2ChC,OACE,cAAC,KAAD,CAAOoE,UAAU,WAAWxH,MAAO,CAAEyH,MAAO,QAAUlO,KAAM,EAA5D,SACG+N,Q,oBC/DEI,GAA0B/G,YANxB,CACbgH,KAAM,CACJF,MAAO,MAI4B9G,CACrChC,aACE,YAiBmC,IAhBjC3M,EAgBgC,EAhBhCA,OACA4V,EAegC,EAfhCA,OACAC,EAcgC,EAdhCA,UACAjB,EAagC,EAbhCA,QACAS,EAYgC,EAZhCA,cACAS,EAWgC,EAXhCA,gBACAC,EAUgC,EAVhCA,mBACA7G,EASgC,EAThCA,QAUM7H,EAAQ4J,mBAAQ,WACpB,OAAOtR,OAAO0R,KAAKrR,EAAOyJ,YAAYvK,KAAI,SAACkS,GAAD,MAAU,CAClDpP,MAAM,GAAD,OAAK4S,EAAQxD,GAAKpP,MAAlB,aAA4BoP,EAA5B,KACL/N,MAAO+N,QAER,CAACwD,EAAS5U,EAAOlC,KAEpB,OACE,gCACE,cAAC,KAAD,CAAUkY,SAAU,kBAAMH,GAAWD,IAASK,QAASL,EAAvD,8BAGA,cAAC,KAAD,CACEM,KAAK,WACLC,YAAY,EACZ1F,QAASpJ,EACT+O,iBAAiB,QACjBlJ,UAAWgC,EAAQyG,KACnBtS,MAAOgS,EACPgB,SAAUP,EACVQ,WAAYP,WCjCXQ,GAAsB5H,YATpB,CACbgH,KAAM,CACJ,kBAAmB,CACjBa,OAAQ,GAEVC,SAAU,MAIqB9H,CACjChC,aACE,YAKO,IAJL3M,EAII,EAJJA,OACA+K,EAGI,EAHJA,SAIM6J,EAAU7D,GAAoB/Q,GACpC,EAA4B+S,oBAAkB,GAA9C,mBAAO6C,EAAP,KAAeC,EAAf,KAEA,OACE,gCACE,cAAC,KAAD,CAAO7H,MAAO,CAAE0I,MAAO,SAAvB,SACE,cAAChB,GAAD,CACEE,OAAQA,EACRC,UAAWA,EACX7V,OAAQA,EACR4U,QAASA,EACTS,cAAetK,EAASJ,sBACxBmL,gBAAiB/K,EAASV,yBAC1B0L,mBAAoBhL,EAASP,gCAGjC,+BACE,cAAC,IAAD,CAAcwH,KAAM1I,EAAOI,OAAO1J,EAAOlC,IAAKmU,eAAe,EAA7D,SACGjS,EAAOgC,MAAM2U,WAAW3W,EAAOgC,MAAM4U,QAF1C,OAKE,eAAC,IAAW9B,KAAZ,CACEC,QAAQ,EACRQ,QAAQ,EACRvH,MAAO,CAAE6I,SAAU,GAAI5H,WAAY,KACnC6H,SAAU,CAAEvH,KAAMvP,EAAOlC,IAJ3B,cAMIkC,EAAOlC,GANX,UASF,cAAC,IAAWgX,KAAZ,CAAiBxR,KAAK,YAAtB,SACGtD,EAAOwJ,QAAQuN,YAAY/W,EAAOwJ,QAAQoN,MAAMI,KAAK,SAExD,4BAAIhX,EAAOhC,YAAY2Y,WAAW3W,EAAOhC,YAAY4Y,QACrD,uBACA,cAAC3B,GAAD,CACEjV,OAAQA,EACR4U,QAASA,EACTjC,QAAQ,EACR0C,cAAeO,EAAS7K,EAASJ,sBAAwB,YAS9D,SAASsM,GACdC,EACAC,GAGA,IACIC,EAEFA,EAH+B,kBAATF,EAIpB,cAACX,GAAD,CAAqBvW,OAAQkX,EAAKlX,OAAQ+K,SAAUmM,EAAKnM,WAIzD,cAACmH,GAAD,CACEjS,SAAUiX,EACV/E,OAAQ,SAACnS,EAAQ+K,GAAT,OACN,cAACwL,GAAD,CAAqBvW,OAAQA,EAAQ+K,SAAUA,OAMvDsM,KAAMC,KAAK,CACTC,KAAM,KACNH,UACAI,UAAW,CAAEhB,QAAS,EAAGvI,WAAY,IACrCwJ,cAAe,CAAEzJ,MAAO,CAAE8E,QAAS,SACnC4E,cAAc,EACdC,MAAM,EACNR,OAAQA,EACR1B,MAAO,qBACPzH,MAAO,CAAE4J,IAAK,M,2DClFLC,GAAyBlJ,YAdvB,CACbgH,KAAM,CACJ,kBAAmB,CACjBa,OAAQ,GAEVC,SAAU,MASwB9H,EACpC,YAYiC,IAX/B3O,EAW8B,EAX9BA,OACAuT,EAU8B,EAV9BA,SACArE,EAS8B,EAT9BA,QACAiI,EAQ8B,EAR9BA,OACApM,EAO8B,EAP9BA,SACGgH,EAM2B,mBAExB6C,EAAU7D,GAAoB/Q,GAC9BoX,EACJ,gDAASrF,GAAT,IAAoB7E,UAAS,UAAKgC,EAAQyG,KAAb,YAAqB5D,EAAU7E,WAA5D,UACE,+BACE,cAAC,IAAD,CAAc8E,KAAM1I,EAAOI,OAAO1J,EAAOlC,IAAKmU,eAAe,EAA7D,SACGjS,EAAOgC,MAAM2U,WAAW3W,EAAOgC,MAAM4U,QAF1C,OAKE,eAAC,IAAW9B,KAAZ,CACEC,QAAQ,EACRQ,QAAQ,EACRvH,MAAO,CAAE6I,SAAU,GAAI5H,WAAY,KACnC6H,SAAU,CAAEvH,KAAMvP,EAAOlC,IAJ3B,cAMIkC,EAAOlC,GANX,OAQA,cAAC,KAAD,CACEkQ,MAAO,CAAE8J,cAAe,EAAGC,WAAY,EAAGC,OAAQ,WAClD3E,QAAS,WACP4D,GACE,CAAEjX,SAAQ+K,iBACC1M,IAAX8Y,EAAuBA,EAAS,OAAI9Y,SAK5C,cAAC,IAAWyW,KAAZ,CAAiBxR,KAAK,YAAtB,SACGtD,EAAOwJ,QAAQuN,YAAY/W,EAAOwJ,QAAQoN,MAAMI,KAAK,SAExD,4BAAIhX,EAAOhC,YAAY2Y,WAAW3W,EAAOhC,YAAY4Y,QACrD,uBACA,cAAC3B,GAAD,CACEL,QAASA,EACT5U,OAAQA,EACRqV,cAAetK,EAASF,+BAK9B,OACE,cAAC,KAAD,CAASuM,QAASA,EAASD,OAAQA,EAAnC,SACG5D,O,iDChFI0E,GAKT,SAAC,GAA6C,IAA3C5U,EAA0C,EAA1CA,MAAO6U,EAAmC,EAAnCA,eAAmBnG,EAAgB,mBAC/C,OACE,8CAAM1D,MAAOhL,EAAMkF,YAAgBwJ,GAAnC,aACG1O,EAAM8U,QAAQD,O,UCMRE,GAAezJ,YARb,CACb0J,aAAc,CACZC,QAAS,EACT1J,OAAQ,YACRC,aAAc,IAIUF,EAC1B,YAamC,IAZjC4I,EAYgC,EAZhCA,KACArI,EAWgC,EAXhCA,QACAqJ,EAUgC,EAVhCA,SACAvC,EASgC,EAThCA,SASgC,IARhCwC,qBAQgC,MARhBC,KAAK,GAQW,MAPhCC,uBAOgC,MAPdC,KAAK,GAOS,EAChC,EAA0C5F,oBAAS,GAAnD,mBAAO6F,EAAP,KAAsBC,EAAtB,KAQMC,OAA+Bza,IAAbka,EAAyBK,EAAgBL,EAEjE,OACE,cAAC,KAAD,CACEhB,KAAMA,EACNnC,MAAO0D,EAAkBN,EAAgBE,EACzCxL,UAAWgC,EAAQmJ,aACnBhF,QAdW,WACb,QAAiBhV,IAAbka,QAAuCla,IAAb2X,EAC5B,OAAOA,GAAUuC,GAEnBM,GAAkBD,SCpBlBG,GAAS,CACbC,uBAAwB,CACtB5D,MAAOqD,KAAK,IAEdQ,gBAAiB,CACf7D,MAAOuD,KAAK,GACZ,UAAW,CACTvD,MAAM,GAAD,OAAKuD,KAAK,GAAV,iBAGTO,uBAAwB,CACtB9D,MAAOuD,KAAK,GACZX,OAAQ,YAICmB,GAA+BxK,YAAWoK,GAAXpK,EAC1C,YASmC,IARjCpQ,EAQgC,EARhCA,OACAa,EAOgC,EAPhCA,MACA8P,EAMgC,EANhCA,QAMgC,IALhCkK,YAKgC,MALzB,EAKyB,EAChC,EAA4DrG,oBAAS,GAArE,mBAAOsG,EAAP,KAA+BC,EAA/B,KAEMzZ,EAAQtB,EAAOsB,MAAMT,IAAU,GAC/Bma,EAAe,GACrB,GAAI1Z,EAAM+D,OAAS,EAAG,CAAC,IAAD,gBACQ/D,EAAM,GAAGO,kBAAkB0J,MAAM,EAAGsP,IAD5C,yBACXH,EADW,QAEZ/L,EACJ+L,EAAgBhZ,WAAaJ,EAAM,GAAGI,SAClCiP,EAAQ8J,uBACR9J,EAAQ+J,gBAEdM,EAAa9Z,KACX,8BACE,eAAC,KAAD,CAAO8H,KAAM,EAAb,UACE,cAAC6Q,GAAD,CAAcb,KAAMiC,OACpB,cAACpB,GAAD,CAAcb,KAAMkC,OACpB,cAACvH,GAAD,CACEjS,SAAUgZ,EAAgBhZ,SAC1BkS,OAAQ,SAACnS,EAAQ+K,GAAT,OACN,cAAC8M,GAAD,CAAwB7X,OAAQA,EAAQ+K,SAAUA,EAAlD,SACE,cAAC,GAAD,CACE8G,QAAQ,EACR7R,OAAQA,EACRkN,UAAWA,SAKnB,uBAAMA,UAAWA,EAAjB,cAEE,cAAC,GAAD,CACE7J,MAAO4V,EAAgBS,YACvBxB,eAAgB,IAJpB,WAhBMe,EAAgBhZ,YAP9B,2BAAwE,IADpD,8BAuCpB,IAAM0I,EAAM9I,EAAM,GAAGO,kBAAkBuZ,WACrC,SAACC,GAAD,OAAeA,EAAU3Z,WAAaJ,EAAM,GAAGI,YAEjD,IAAa,IAAT0I,GAAcA,GAAOyQ,EAAM,CAC7B,IAAMH,EAAkBpZ,EAAM,GAAGO,kBAAkBuI,GACnD4Q,EAAa9Z,KACX,8BACE,eAAC,KAAD,CAAO8H,KAAM,EAAb,UACE,cAAC6Q,GAAD,CAAcb,KAAMiC,OACpB,cAACpB,GAAD,CAAcb,KAAMkC,OACpB,cAACvH,GAAD,CACEjS,SAAUgZ,EAAgBhZ,SAC1BkS,OAAQ,SAACnS,EAAQ+K,GAAT,OACN,uBAAMmC,UAAWgC,EAAQ8J,uBAAzB,cACIrQ,EADJ,QAEE,cAACkP,GAAD,CAAwB7X,OAAQA,EAAQ+K,SAAUA,EAAlD,SACE,cAAC,GAAD,CAAuB8G,QAAQ,EAAM7R,OAAQA,YAKrD,uBAAMkN,UAAWgC,EAAQ8J,uBAAzB,cAEE,cAAC,GAAD,CACE3V,MAAO4V,EAAgBS,YACvBxB,eAAgB,IAJpB,WAfMe,EAAgBhZ,WA4B1BJ,EAAM,GAAGO,kBAAkBwD,OAASwV,GACtCG,EAAa9Z,KACX,8BACE,cAAC,IAAWqV,KAAZ,CACE5H,UAAWgC,EAAQgK,uBACnB7F,QAAS,kBAAMiG,GAA2BD,IAF5C,uBADO,aAYf,IAAMtR,EAAe,CACnB,CACEsH,UAAW,KACXhB,MAAO,SACP8D,OAAQ,SAAClS,GACP,OACE,cAACiS,GAAD,CACEjS,SAAUA,EACVkS,OAAQ,SAACnS,EAAQ+K,GAAT,OACN,cAAC8M,GAAD,CAAwB7X,OAAQA,EAAQ+K,SAAUA,EAAlD,SACE,cAAC,GAAD,CAAuB8G,QAAQ,EAAM7R,OAAQA,WAOzD,CACEqP,UAAW,QACXhB,MAAO,QACP8D,OAAQ,SAAC0H,GACP,OAAO,cAAC,GAAD,CAAQxW,MAAOwW,EAAO3B,eAAgB,MAGjD,CACE7J,MAAO,SACP8D,OAAQ,WACN,OACE,cAAC,KAAD,CAAO5K,KAAM,EAAb,SACE,cAAC,KAAD,0BAOV,OACE,eAAC,IAAMyF,SAAP,WACGuM,EACD,cAAC,KAAD,CACElL,MAAM,qBACN2E,QAASqG,EACTrL,MAAO,CAAE4J,IAAK,IACdJ,UAAW,CAAEc,QAAS,GACtB7C,MAAO,MACPqE,KAAM,kBAAMR,GAA0B,IACtCS,SAAU,kBAAMT,GAA0B,IAP5C,SASE,cAAC,IAAD,CACEzJ,YAAY,QACZvC,UAAU,EACVoD,QAAQ,EACRE,WAAY,CACVV,SAAU,GACVW,gBAAiB,CAAC,KAAM,KAAM,MAAO,MAAO,MAAO,SAErDC,OAAO,KACP/I,QAASA,EACT+H,QAAO,uCAAE,WAAOC,EAAQC,EAAM9M,GAArB,SAAA+M,EAAA,+EACA+J,QAAQC,QAAQ,CACrBzJ,MAAO3Q,EAAM+D,OAAS,EAAI/D,EAAM,GAAGO,kBAAkBwD,OAAS,EAC9D2M,SAAS,EACTnI,KACmB,IAAjBvI,EAAM+D,OACF,GACA/D,EAAM,GAAGO,kBACN0J,OACEiG,EAAOI,QAAW,GAAKJ,EAAOG,SAC/BH,EAAOI,QAAWJ,EAAOG,UAE1BhR,KAAI,SAAC+Z,EAAiB7Z,GAAlB,MAA6B,CAChCtB,GAAImb,EAAgBhZ,SACpB4Z,MAAOZ,EAAgBS,mBAd5B,2CAAF,oECnLbX,GAAS,CACbhZ,KAAM,CACJma,eAAgB,YAChB,UAAW,CACTA,eAAgB,cAGpBC,aAAc,CACZ/E,MAAOuD,KAAK,GACZ,UAAW,CACTvD,MAAOuD,KAAK,MAKLyB,GAAgBzL,YAAWoK,GAAXpK,EAC3B,YAWmC,IAVjC0L,EAUgC,EAVhCA,KACA9b,EASgC,EAThCA,OACAa,EAQgC,EARhCA,MACA8P,EAOgC,EAPhCA,QAOgC,IANhCkK,YAMgC,MANzB,EAMyB,EAC1BvZ,EAAQtB,EAAOsB,MAAMT,IAAU,GACjCkW,EAAazV,EAAMya,SAAQ,SAACva,EAAMX,GACpC,IAAImb,EACQ,IAAVnb,EACIib,EAAKG,UAAU,EAAGza,EAAKf,OACvBqb,EAAKG,UAAU3a,EAAMT,EAAQ,GAAGqb,IAAK1a,EAAKf,OAC5C0b,EAAcL,EAAKG,UAAUza,EAAKf,MAAOe,EAAK0a,KAC9C3I,OAAczT,OACIA,IAAlB0B,EAAKE,WACP6R,EAAc,WACZmF,GAAwBlX,EAAKE,YAGjC,IAAM0a,EACJ,cAAC,IAAD,CAEE3I,KAAMjS,EAAK6a,IACX3I,eAAe,EACf4I,wBAAyB,CACvBC,OAA+B,KAAvBJ,EAAYK,OAAgB,UAAYL,GAElDxN,UACEgC,EAAQnP,WACW1B,IAAlB0B,EAAKE,SAAyB,IAAMiP,EAAQiL,aAAe,IAE9DnM,MAAyB,OAAlBjO,EAAKE,SAAoB,CAAEmV,MAAO,QAAW,GACpDtD,YAAaA,GAXR1S,GAeT,YAAsBf,IAAlB0B,EAAKE,SACA,CAACsa,EAAQI,GAuBX,CAACJ,EAlBN,cAACrI,GAAD,CAEEjS,SAAUF,EAAKE,SACfkS,OAAQ,SAACnS,EAAQ+K,GAAT,OACN,cAAC8M,GAAD,CACE7X,OAAQA,EACRmX,OAAQ,IACRpM,SAAUA,EAHZ,SAKG4P,KAGLtI,eAAgB,kBACd,sBAAMnF,UAAWgC,EAAQiL,aAAzB,SAAwCQ,MAZrCvb,OA0BX,OANqB,IAAjBS,EAAM+D,OACR0R,EAAW7V,KAAK4a,GAEhB/E,EAAW7V,KAAK4a,EAAKG,UAAU3a,EAAMA,EAAM+D,OAAS,GAAG6W,MAIvD,gCACGnF,EACD,cAAC6D,GAAD,CACE5a,OAAQA,EACRa,MAAOA,EACPga,KAAMA,UC3FHL,GAAS,CACpBrR,MCjByB,CACzB+N,MAAO,OACP,4BAA6B,CAC3B7G,OAAQ,iBACRC,aAAc,EACdC,WAAY,6BAEd,sBAAuB,CACrBC,YAAa,EACbC,aAAc,GAEhB,OAAQ,CACNC,WAAY,KAEd,oBAAqB,CACnB+L,cAAe,SDKNC,GAAiBtM,YAAWoK,GAAXpK,EAC5B,YAWmC,IAVjCjH,EAUgC,EAVhCA,MACA+H,EASgC,EAThCA,MACAP,EAQgC,EARhCA,QACAgM,EAOgC,EAPhCA,cAOgC,IANhCC,oBAMgC,SAC1BpT,EAAUL,EAAMK,QAAQ7I,KAAI,SAACkc,EAAK1W,GAAN,MAAuB,CACvD2K,UAAW,CAAC,MAAO3K,EAAa,SAChC2J,MAAO+M,EACPjJ,OAAS,SAAC9O,EAAe9E,GACvB,OACE,cAAC6b,GAAD,CAAeC,KAAMhX,EAAO9E,OAAQA,EAAQa,MAAOsF,SAgBzD,OAXIyW,GACFpT,EAAQvC,OAAO,EAAG,EAAG,CACnB6I,MACE,cAAC,IAAWyG,KAAZ,CAAiBxR,KAAK,YAAY+X,UAAU,EAA5C,eAIFhM,UAAW,UAKb,eAAC,IAAMrC,SAAP,WACE,cAAC,IAAD,CACEE,UAAWgC,EAAQxH,MACnBmI,YAAY,QACZvC,UAAU,EACVwC,QAAO,uCAAE,WAAOC,EAAQC,EAAM9M,GAArB,eAAA+M,EAAA,sEACaR,EAClBM,EAAOG,UACNH,EAAOI,QAAW,GAAKJ,EAAOG,UAH1B,cACHxQ,EADG,yBAKA,CACL0I,KAAM1I,EACN6Q,SAAS,EACTC,MAAO9I,EAAMH,OARR,2CAAF,0DAWPmJ,QAAQ,EACRE,WAAY,CACVV,SAAU,EACVW,gBAAiB,CACf,IACA,KACA,KACA,KACA,MACA,MACA,MACA,SAGJF,iBAC4BtS,IAA1BqJ,EAAM4T,QAAQC,QACZ,cAAC,IAAD,CAAcvJ,KAAMtK,EAAM4T,QAAQC,QAAStJ,eAAe,EAA1D,SACGvK,EAAM3J,OAGT2J,EAAM3J,KAGVmd,cAAeA,EACfpK,OAAO,QACP/I,QAASA,IAEX,cAAC,GAAD,CAAkBL,MAAOA,UAMpB8T,GAER,SAAC,GAAe,IAAb9T,EAAY,EAAZA,MACA4P,EAAoC,CACxC,CAAC,cAAe5P,EAAM1J,mBAGMK,IAA1BqJ,EAAM4T,QAAQC,QAChBjE,EAAK7X,KAAK,CACR,eACA,cAAC,IAAD,CAAcuS,KAAMtK,EAAM4T,QAAQC,QAAStJ,eAAe,EAA1D,SACGvK,EAAM4T,QAAQjN,UAInBiJ,EAAK7X,KAAK,CAAC,eAAgB,QAE7B6X,EAAK7X,KAAK,CACR,yBAC2BpB,IAA3BqJ,EAAM4T,QAAQrb,SACZ,cAACiS,GAAD,CACEjS,SAAUyH,EAAM4T,QAAQrb,SACxBkS,OAAQ,SAACnS,EAAQ+K,GAAT,OACN,cAAC8M,GAAD,CACE7X,OAAQA,EACRmX,OAAQ,IACRpM,SAAUA,EAHZ,SAKE,cAAC,GAAD,CACE/K,OAAQA,EACR8R,YAAa,WACXmF,GAAwB,CAAEjX,SAAQ+K,mBAK1CsH,eAAgB,kBACd,6CAAgB3K,EAAM4T,QAAQrb,SAA9B,yBAIJ,QAIJ,IAAImX,GAAW1P,EAAM4T,QAAQG,kBAAoB,IAAInB,SACnD,SAACoB,EAAWtc,GACV,OAAwB,IAApBsc,EAAUrO,OAAmD,IAApCqO,EAAUC,QAAQZ,OAAOnX,QAElD8X,EAAUpa,cAAcsa,MAAMnd,IACI,IAAlCid,EAAUha,aAAakC,OAEhB,GAGI,CACb,4BACE,8BACG,IAAIiY,OAAOH,EAAUrO,OADxB,IACiCqO,EAAUC,YAF7C,UAAWvc,EAAX,WAOCwJ,OAAOkT,GAAiB,GAAD,OAAI1c,EAAJ,WAAoBsc,EAAUpa,gBACrDsH,OAAOkT,GAAiB,GAAD,OAAI1c,EAAJ,UAAmBsc,EAAUha,kBAQ3D,OALA4V,EAAK7X,KAAK,CACR,oBACA2X,EAAQxT,OAAS,EAAI,8BAAMwT,IAAiB,QAI5C,cAAC,KAAD,CAAc/I,MAAM,aAAa9G,KAAK,QAAtC,SACG+P,EAAKpY,KAAI,mCAAE8C,EAAF,KAASqB,EAAT,YACR,cAAC,KAAauK,KAAd,CAA+B5L,MAAOA,EAAtC,SACGqB,GADqBrB,SAQ1B8Z,GAAmB,SAACC,EAAaC,GACrC,IADqE,EAC/DC,EAAoB,CAAC,IAD0C,cAElDD,GAFkD,IAErE,2BAA0B,CAAC,IAAhBE,EAAe,QACpBzd,EAAYyd,GACdD,EAAMxc,KAAK,IAEXwc,EAAMA,EAAMrY,OAAS,GAAGnE,KAAKyc,EAAK7Y,QAN+B,8BASrE,OAAO4Y,EACJ/Y,QAAO,SAACiZ,GAAD,OAASA,EAAIvY,OAAS,KAC7B1E,KAAI,SAACid,EAAK5c,GAAN,OAAY,4BAAwB4c,GAAxB,UAAWJ,EAAX,YAAkBxc,QEtM1B6c,GAAb,iDACUC,MAAgB,EAD1B,wCAGE,SAAeC,GAA+C,IAAD,OAC3Dre,KAAKoe,OAAS,EACd,IAAIE,EAAWte,KAAKoe,MAEpB,OAAOC,IAAKnf,MAAK,SAACkT,GAChB,KAAIkM,EAAW,EAAKF,OAIpB,OAAOhM,SAZb,KCMM0I,GAAS,CACbyD,UAAW,CACT/G,MAAO,SAWEgH,GAAyB9N,YAAWoK,GAAXpK,CACpChC,aAAS,SAACtF,GACR,OAAOqV,GAAmB,gBAAiBrV,OAIlCsV,GAA0BhO,YAAWoK,GAAXpK,CACrChC,aAAS,SAACtF,GACR,OAAOqV,GAAmB,aAAcrV,OAI/BuV,GAAwBjO,YAAWoK,GAAXpK,CACnChC,aAAS,SAACtF,GACR,OAAOqV,GAAmB,cAAerV,OAI7C,SAASqV,GACPG,EACAxV,GAEA,IAAMyV,EAAQvQ,IAAYsQ,GACpBE,EAAa,IAAIX,GAGvBxP,qBAAU,gBACYvO,IAAhBgJ,EAAMhE,QAINxC,MAAMmc,QAAQ3V,EAAMhE,OAEjByZ,EAAMG,QAGTH,EAAMrL,WAAWpK,EAAMhE,MAAMH,QAAO,SAACpF,GAAD,OAASgf,EAAMpd,QAAQ0J,IAAItL,OAF/Dgf,EAAMrL,WAAWpK,EAAMhE,YAIWhF,IAA3Bye,EAAMzd,IAAIgI,EAAMhE,QACzByZ,EAAM1N,UAAU/H,EAAMhE,UAEvB,CAACgE,EAAMhE,QAIV,IAAMoN,EAAUQ,mBAAQ,WACtB,IAD4B,EACtBR,EAAU,GADY,cAEZqM,EAAMI,QAFM,IAE5B,2BAA8B,CAAC,IAApBC,EAAmB,QAC5B1M,EAAQhR,KAAK,CACX4D,MAAO8Z,EAAErf,GACTkE,MAAOmb,EAAE5T,iBALe,8BAQ5B,OAAOkH,IACN,CAACqM,EAAMpd,QAAQ6H,OAUlB,OACE,cAAC,KAAD,CACE2O,KAAM7O,EAAM6O,KACZC,YAAY,EACZ1F,QAASA,EACT2F,iBAAiB,QACjBlJ,UAAW7F,EAAM6H,QAAQsN,UACzBY,YAAY,EACZC,SAfa,SAAC5N,GACF,KAAVA,GACJsN,EAAWjU,MAAK,WACd,OAAOgU,EAAM1N,UAAUK,GAAOtS,MAAK,kBAAM,SAazCkG,MAAOgE,EAAMhE,MACbgT,SAAUhP,EAAMgP,SAChBC,WAAYjP,EAAMiP,aCxFxB,IAEagH,GAAyB3O,YAFvB,GAEuBA,CACpChC,aAAS,YAAiD,EAA9CuC,QAA+C,IACjDlD,EAAgBO,IAAhBP,YAER,OACE,eAAC,KAAD,CAAcqC,MAAM,kBAAkB9G,KAAK,QAAQS,OAAQ,EAA3D,UACE,cAAC,KAAa4F,KAAd,CAAmB5L,MAAM,yBAAzB,SACE,cAACya,GAAD,CACEvG,KAAK,WACL7S,MAAO2I,EAAYjB,SAASJ,sBAC5B0L,SAAUrK,EAAYjB,SAASV,yBAC/BiM,WAAYtK,EAAYjB,SAASP,gCAGrC,cAAC,KAAaoD,KAAd,CAAmB5L,MAAM,4BAAzB,SACE,cAACya,GAAD,CACEvG,KAAK,WACL7S,MAAO2I,EAAYjB,SAASF,yBAC5BwL,SAAUrK,EAAYjB,SAASR,4BAC/B+L,WACEtK,EAAYjB,SAASL,0C,6IClB5B,SAAS6S,GACdC,EACAC,EACAC,EAHK,GAgBM,IAXTC,EAWQ,EAXRA,QACAC,EAUQ,EAVRA,QACAC,EASQ,EATRA,IACAC,EAQQ,EARRA,OAgCF,OAvBAH,OAAsBtf,IAAZsf,EAAwB,EAAIA,EACtCC,OAAsBvf,IAAZuf,EAAwB,EAAIA,OAEvBvf,IAAXyf,GACFJ,EAAMxe,KAAI,YAAqB,IAAlBqQ,EAAiB,EAAjBA,KAAM/N,EAAW,EAAXA,EAAGuc,EAAQ,EAARA,EACpBP,EAAOQ,SAAS,OAAQ,CACtBC,MAAM,yBACJ1O,OACA/N,EAAGA,EAAImc,EACPI,EAAGA,EAAIH,EACPM,WAAYT,EAASS,YAClBL,GALA,IAOHM,KAAML,EAAO1I,MACb0I,OAAQA,EAAO1I,MACfgJ,UAAWN,EAAOrI,QAEpB1X,KAAM,UACNsgB,WAAW,OAKVX,EAAMxe,KAAI,YAAqB,IAAlBqQ,EAAiB,EAAjBA,KAAM/N,EAAW,EAAXA,EAAGuc,EAAQ,EAARA,EAC3B,OAAOP,EAAOQ,SAAS,OAAQ,CAC7BC,MAAM,aACJ1O,OACA4O,KAAM,QACN3c,EAAGA,EAAImc,EACPI,EAAGA,EAAIH,EACPM,WAAYT,EAASS,YAClBL,GAEL9f,KAAM,OACNsgB,WAAW,OCtCV,SAASC,GAAmBb,GACjC,IAAMc,EAAed,EAASe,oBAAoB,GA+DlD,OAVAC,KAAGC,aACD,cACA,CACEC,KAAM,SAACd,EAAmBL,GACxB,OAvDO,SAACK,EAAmBL,GACfK,EAAI7P,MAAMsK,QADgC,IAAD,IAGnDsG,GAAc,UAAAf,EAAIgB,gBAAJ,eAAc9R,SAAU,EAuB5C,EAAyB0Q,EAASqB,SAChCjB,EAAI7b,MACJuc,EACA,UAHMb,EAAR,EAAQA,MAAOjI,EAAf,EAAeA,MAMT1H,EAAQyP,EAAOQ,SAAS,SAAU,CACtCC,MAAM,aAGJd,EALkB,IAMfU,EAAI7P,OAETjQ,KAAM,WASR,OANAwf,GAASC,EAAOC,EAAUC,EAAO,CAC/BC,SAAUlI,EAAQ,EAClBmI,QAboB,GAaKgB,EACzBf,IAAG,OAAEA,QAAF,IAAEA,GAAF,UAAEA,EAAKgB,gBAAP,aAAE,EAAe7Q,MACpB8P,OAAQ,CAAE1I,MAAO,QAASK,MAAO,KAE5B1H,EAOI4Q,CAAKd,EAAsBL,KAGtC,eAGKC,E,8CCtFHsB,GAAU,SACdzC,EACA0C,GAEA,OAAQ,WAAmB,IAAD,uBAAd9H,EAAc,yBAAdA,EAAc,gBACxB,IAAM6E,EAAM7E,EAAKF,KAAK,KAItB,YAHmB3Y,IAAf2gB,EAAMjD,KACRiD,EAAMjD,GAAOO,EAAE,WAAF,EAAMpF,IAEd8H,EAAMjD,KAcJkD,GAUX,WAAYC,GAAuB,IAAD,gCATxBA,eASwB,OARxBC,0BAQwB,OAPxBC,iBAA8C,GAOtB,KANxBC,kBAA+C,GAMvB,KALxBC,uBAAoD,GAK5B,KAJxBC,0BAEN,GAE8B,KAqBlCC,SAAW,WACT,OAAO,EAAKC,kBAAkB,EAAG,EAAKP,UAAUtb,OAAS,EAAG,IAtB5B,KAqClC6b,kBAAoBV,IAClB,SACE/f,EACAyb,EACAiF,GAEA,IAAMC,EAAiB,EAAKC,sBAC1B5gB,EACAyb,EACAiF,GAEF,QAAuBrhB,IAAnBshB,GAAgCA,GAAkB,EAEpD,MAAO,CACLE,YAAa,GACbC,SAAU,EAAKC,oBAAoB/gB,EAAOyb,EAAKiF,IAWnD,IAPA,IAAMM,EAAe,CACnBC,OAAQ,EACRH,SAAUI,IACVL,YAAa,IAINI,EAAQxF,EAAM,EAAGwF,EAAQjhB,EAAOihB,IACvC,GAAmC,QAA/B,EAAKf,UAAUe,GAAO3c,KAA1B,CAEA,IAAM6c,EAA2B,EAAKV,kBACpCzgB,EACAihB,EACAP,GAEIU,EAA2B,EAAKX,kBACpCQ,EAAQ,EACRxF,EACAiF,GACGS,EAAyBN,YAAYjc,OAAS,EAC3Cuc,EAAyBN,YAAYjc,OAAS,EAC9C,IAINuc,EAAyBL,SACvBM,EAAyBN,SAC3BE,EAAaF,WAEbE,EAAaC,MAAQA,EACrBD,EAAaF,SACXK,EAAyBL,SACzBM,EAAyBN,SAC3BE,EAAaH,YACXM,EAAyBN,YAAY/V,QACvCkW,EAAaH,YAAYpgB,KAAKwgB,GAC9BD,EAAaH,YAAcG,EAAaH,YAAYjX,OAClDwX,EAAyBP,cAK/B,MAAO,CACLA,YAAaG,EAAaH,YAC1BC,SAAUE,EAAaF,YAG3B7hB,KAAKshB,2BAvG2B,KAkHlCc,kBAAoBtB,IAAQ,SAAC/f,EAAeyb,GAE1C,IADA,IAAI6F,EAAM,EACD/gB,EAAIP,EAAOO,EAAIkb,EAAKlb,IACI,YAA3B,EAAK2f,UAAU3f,GAAG+D,OAEtBgd,GAAO,EAAKpB,UAAU3f,GAAGkW,OAQ3B,MAJiC,YAA7B,EAAKyJ,UAAUzE,GAAKnX,OAEtBgd,GAAO,EAAKpB,UAAUzE,GAAKhF,OAEtB6K,IACNriB,KAAKmhB,kBAhI0B,KAuIlCmB,mBAAqB,SAACvhB,EAAeyb,GAInC,IAHA,IAAI+F,EAAiB,EACjBC,EAAgB,EAEXlhB,EAAIP,EAAOO,GAAKkb,EAAKlb,IAAK,CACjC,IAAMb,EAAO,EAAKwgB,UAAU3f,GACV,SAAdb,EAAK4E,OACPkd,GAAkB9hB,EAAKgiB,QACvBD,GAAiB/hB,EAAKiiB,QAI1B,MAAO,CAAEH,iBAAgBC,kBAnJO,KA8JlCb,sBAAwB,SAAC5gB,EAAeyb,EAAamG,GACnD,IAAMN,EAAM,EAAKD,kBAAkBrhB,EAAOyb,GACpCoG,EAAgB,EAAK1B,qBAAqByB,GAEhD,GAAIN,IAAQO,EACV,OAAO,EAGT,IAAMC,EAAU,EAAKP,mBAAmBvhB,EAAOyb,GAC/C,GAAI6F,EAAMO,EAAe,CACvB,GAAIC,EAAQN,eAAiB,EAC3B,OAGF,OAA+B,IAA3BM,EAAQN,gBACFK,EAAgBP,GAAO,IAEzBO,EAAgBP,GAAOQ,EAAQN,eAEzC,OAAIM,EAAQL,eAAiB,OAA7B,GAGQI,EAAgBP,GAAOQ,EAAQL,eApLP,KAuLlCM,mBAAqB,SAAC/hB,EAAeyb,EAAamG,GAChD,IAAMzD,EAAI,EAAKyC,sBAAsB5gB,EAAOyb,EAAKmG,GACjD,YAAUviB,IAAN8e,GAAmBA,GAAK,GAClB+C,IAGH,KAAP,IAAO/C,EAAK,IA7LoB,KAgMlC4C,oBAAsBhB,IACpB,SAAC/f,EAAeyb,EAAamG,GAC3B,IAAMI,EAAe,EAAK9B,UAAUzE,GAC9BwG,EACkB,YAAtBD,EAAa1d,KAAqB0d,EAAaE,KAAO,EAClDC,EAAc,EAAKJ,mBAAmB/hB,EAAOyb,EAAKmG,GAGxD,OAAIK,GAAe,EACV,SAAC,EAAIE,EAAcF,EAAgB,GAHlB,EAIfA,KAAiBf,IACnB,SAAC,EAAIiB,EAAgB,GALJ,EAOjB,SAAC,EAAIA,EAAgB,GAArB,SAAyBF,EAAe,GAPvB,IAU5BhjB,KAAKohB,mBAhN2B,KAmNlC+B,yBAA2B,SACzBpiB,EACAyb,EACAoF,EACAH,GAIA,IAFA,IAAIO,EAAQjhB,EACR8gB,EAAW,EACNvgB,EAAI,EAAGA,EAAIsgB,EAAYjc,OAAQrE,IACtCugB,GAAY,EAAKC,oBACfE,EACAJ,EAAYtgB,GACZmgB,EAAiBngB,GAEnB0gB,EAAQJ,EAAYtgB,GAAK,EAQ3B,OANAugB,GAAY,EAAKC,oBACfE,EACAxF,EACAiF,GAAkBG,EAAYjc,OAAS,EAAIic,EAAYjc,OAAS,EAAI,KArOtE3F,KAAKihB,UAAYA,EAAUxB,MAAMxe,KAAI,SAACR,GAOpC,OANAA,EAAOiB,OAAO2H,OAAO,GAAI5I,IACpB+W,MAAQ/W,EAAK+W,MAAQ,GACR,SAAd/W,EAAK4E,OACP5E,EAAKgiB,QAAUhiB,EAAKgiB,QAAU,GAC9BhiB,EAAKiiB,OAASjiB,EAAKiiB,OAAS,IAEvBjiB,KAETT,KAAKkhB,qBAAuB,SAAC5f,GAAD,OAAe2f,EAAUmC,cAAc9hB,GAAK,KCoC/D+hB,GAAb,WAME,WAAY5D,EAAwB6D,GAAiC,IAAD,gCALpDC,gBAKoD,OAJpD9D,WAIoD,OAHpD6D,iBAGoD,OAFpDF,mBAEoD,OAwHpEI,YAAc,SAACC,GACb,IAAM1F,EAAQ,GACVhd,EAAQ,GAEZ0iB,EAAaA,EAAW5X,SACbrK,KAAK,EAAKie,MAAM9Z,OAAS,GALmB,oBAOrC8d,GAPqC,IAOvD,2BAA8B,CAAC,IAAD,EAAnBjH,EAAmB,QACtBiD,EAAQ,EAAKA,MAAM5T,MAAM9K,EAAOyb,GAChCyB,EAAO,GAFe,cAKTwB,GALS,IAK5B,2BAA0B,CAAC,IAAhBxJ,EAAe,QACN,YAAdA,EAAK5Q,OAKO,QAAd4Q,EAAK5Q,MACL4Y,EAAKtY,OAAS,GACiB,QAA/BsY,EAAKA,EAAKtY,OAAS,GAAGN,MAGtB4Y,EAAKA,EAAKtY,OAAS,GAAG2L,MAAQ2E,EAAK3E,KACnC2M,EAAKA,EAAKtY,OAAS,GAAG6R,OAASvB,EAAKuB,OAItCyG,EAAKzc,KAAKE,OAAO2H,OAAO,GAAI4M,MArBF,8BAyBD,YAAzB,EAAKwJ,MAAMjD,GAAKnX,MAChB,EAAKoa,MAAMjD,GAAKlL,KAAK3L,OAAS,GAE9BsY,EAAKzc,KAAK,EAAKie,MAAMjD,IAGvBzb,EAAQyb,EAAM,EACduB,EAAMvc,KAAKyc,IAvC0C,8BA0CvD,OAAOF,GAlK2D,KAsKpE2F,OAAS,SACP3F,EADO,GAUwD,IAP7D4F,EAO4D,EAP5DA,WACAC,EAM4D,EAN5DA,cACAhL,EAK4D,EAL5DA,SACAiL,EAI4D,EAJ5DA,MAEAC,GAE4D,EAH5D/G,cAG4D,EAF5D+G,YAGIC,EAAiB,GACjBT,EAAcvF,EAAM9c,KAAI,SAACgd,GAAD,OAC5BA,EAAK+F,QAAO,SAAChS,EAAGzO,GAAJ,OAAUyO,EAAIzO,EAAEiU,QAAO,MAE/ByM,EAAclG,EAAM9c,KAAI,SAACgd,EAAM3c,GAAP,OAAa,EAAK8hB,cAAc9hB,MAE9D,GAAIwiB,EAEF,IADA,IAAMI,EAASnZ,KAAKC,IAAL,MAAAD,KAAI,aAAQuY,IAClBhiB,EAAI,EAAGA,EAAI2iB,EAAYte,OAAQrE,IAClC2iB,EAAY3iB,GAAK4iB,IACnBD,EAAY3iB,GAAK4iB,GAKvB,IAAK,IAAI5iB,EAAI,EAAGA,EAAIyc,EAAMpY,OAAQrE,IAAK,CACrC,IAAM2c,EAAOF,EAAMzc,GAGb+gB,EAAMiB,EAAYhiB,GAClB6iB,EAAaF,EAAY3iB,GACzB8iB,EAASnG,EAAKhZ,QAAO,SAAC1B,GAAD,MAAkB,SAAXA,EAAE8B,QAAiBM,OAC/C0e,EACJhC,EAAM8B,GAAwB,YAAVN,EAChB,EAAKN,WACLxY,KAAKuZ,IAAIH,EAAa9B,GAAO+B,EAAS,EAAKb,WAG3CzD,GAAKxe,EAAI,GAAKqiB,EAAc/K,GAAYgL,EAAgB,GAAM,EAChErgB,EAAI,EAQR,GANc,WAAVsgB,EACFtgB,IAAM4gB,EAAa9B,GAAO,EACP,UAAVwB,IACTtgB,GAAK4gB,EAAa9B,GAGhBgC,IAAc,EAAKd,WAAY,CACjC,IAAMgB,EAAgB7iB,OAAO2H,OAC3B,CACE9F,IACAuc,IACA0E,cAAenC,EACfM,WAAYrhB,GAEd2c,EAAK,IAEPsG,EAAcjT,KAAO2M,EAAKhd,KAAI,SAACsC,GAAD,OAAOA,EAAE+N,QAAMyH,KAAK,IAClDgL,EAAeviB,KAAK+iB,OACf,CAAC,IAAD,gBACctG,GADd,IACL,2BAAyB,CAAC,IAAfhI,EAAc,QACjBuO,EAA8B,SAAdvO,EAAK5Q,KAAkBgf,EAAYpO,EAAKuB,MACxDiN,EAAe/iB,OAAO2H,OAC1B,CACE9F,IACAuc,IACA0E,gBACA7B,WAAYrhB,GAEd2U,GAGF1S,GAAKihB,EACLT,EAAeviB,KAAKijB,IAdjB,gCAmBT,MAAO,CAAEhF,MAAOsE,EAAgBT,gBApPhCtjB,KAAKyf,MAAQA,EACbzf,KAAKsjB,YAAcA,EAEf1gB,MAAMmc,QAAQuE,GAChBtjB,KAAKojB,cAAgB,SAAC9hB,GAAD,OACnBA,EAAIgiB,EAAY3d,OACZ2d,EAAYhiB,GACZgiB,EAAYA,EAAY3d,OAAS,IAEvC3F,KAAKojB,cAAgB,SAAC9hB,GAAD,OAAegiB,GAGtCtjB,KAAKujB,WAAa,EAbgD,oBAc/C9D,GAd+C,IAclE,2BAA0B,CAAC,IAAhBxJ,EAAe,QACxB,GAAkB,SAAdA,EAAK5Q,KAAiB,CACxBrF,KAAKujB,WAAatN,EAAKuB,MACvB,QAjB8D,+BANtE,yDAsCE,SACElG,EACAoT,EACAC,EACAC,GAEkB,IADlBC,EACiB,uDADK,IAEhBpF,EAAyB,GAE3BqF,EAASxT,EAAKyT,MAAM,SAAS9f,QAAO,SAAC+f,GAAD,OAAOA,EAAErf,OAAS,KAC1D,QAAkBvF,IAAdwkB,GAA2BA,EAAUjf,OAAS,EAAG,CACnD,IAAMsf,EAAK,IAAIC,OAAJ,cAAkBN,EAAU7L,KAAK,IAAjC,QAA4C,KACvD+L,EAASA,EAAOzI,SAAQ,SAAC2I,GAAD,OAAOA,EAAEG,MAAMF,MAKzC,IAAM1B,EAAamB,EAAU,KACvBU,EAAcV,EAAU,KACxBW,EAAU,SAACC,GAAD,MAAkB,KAAKC,KAAKD,EAAKE,OAAO,KAGlD/C,EAAUc,EAAa,EACvBb,EAASa,EAAa,EAwD5B,OAtDAuB,EAAOjjB,SAAQ,SAACmjB,GACd,GAAIK,EAAQL,GAAZ,CACE,IAAMS,EAAU,CACdpgB,KAAM,OACNmS,MAAO+L,EACPb,SACAD,UACAnR,KAAM0T,GAERvF,EAAMje,KAAKikB,QAeb,GAVIhG,EAAM9Z,OAAS,GAAsC,QAAjC8Z,EAAMA,EAAM9Z,OAAS,GAAGN,MAC9Coa,EAAMje,KAAK,CACT6D,KAAM,UACNmS,MAAO,EACPyL,KAAM,EACNyC,SAAS,EACTpU,KAAM,KAINqT,EAAa,CACf,IAAMG,EAASH,EAAYK,GAC3BF,EAAOjjB,SAAQ,SAAC8jB,EAAGrkB,GACjB,IAAMskB,EAAS,CAAEvgB,KAAM,MAAOmS,MAAOkN,EAAUiB,GAAIrU,KAAMqU,GAEzD,GADAlG,EAAMje,KAAKokB,GACPtkB,EAAIwjB,EAAOnf,OAAS,EAAG,CACzB,IAAMkgB,EAAkB,CACtBxgB,KAAM,UACNiM,KAAM,IACNkG,MAAO4N,EACPnC,KAAM4B,EACNa,SAAS,GAEXjG,EAAMje,KAAKqkB,WAGV,CACL,IAAMD,EAAS,CAAEvgB,KAAM,MAAOmS,MAAOkN,EAAUM,GAAI1T,KAAM0T,GACzDvF,EAAMje,KAAKokB,OAIfnG,EAAMje,KAAK,CACT6D,KAAM,OACNmS,MAAO,EACPiL,QAAS,IACTC,OAAQ,EACRpR,KAAM,KAGDmO,MArHX,KCtEaqG,GAuBX,WACEC,EACAC,GACC,IAAD,gCAzBQC,gBAyBR,OAxBQC,kBAwBR,OAvBQC,YAuBR,OArBcC,UAqBd,OApBcnG,gBAoBd,OAnBcrH,cAmBd,OAlBcgL,cAAwB,MAkBtC,KAhBcD,gBAgBd,OAfcJ,gBAed,OAdcqB,UAAsB,CACpC,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAMA,KA0BF/D,SAAW,SACTvP,EACA+U,GAMI,IALJxC,EAKG,uDAL8C,UAM3C5C,EAAY,IAAIoC,GACpBA,GAAUiD,iBACRhV,EACA,EAAKiV,YACL,EAAKC,UACL,EAAK5B,WAEPyB,GAUIzE,EAAc,IAAIZ,GAAmBC,GAAWM,WACnDK,YACH,EAA+BX,EAAUyC,OACvCzC,EAAUuC,YAAY5B,GACtB,CACEiC,QACAD,cAAe,EAAKA,cACpBhL,SAAU,EAAKA,SACf+K,WAAY,EAAKA,WACjB5G,cAAe,SACf+G,YAAY,IARRrE,EAAR,EAAQA,MAAO6D,EAAf,EAAeA,YAYT9L,EAAQzM,KAAKC,IAAL,MAAAD,KAAI,aAAQuY,IACpBpM,GAAU0K,EAAYjc,OAAS,GAAK,EAAKge,WAE/C,MAAO,CAAElE,MAAOA,EAAOjI,QAAON,WArE9B,KAyEFuP,eAAiB,SACfnV,GAMI,IAAD,EALHoV,EAKG,uDALiB,KACpBC,EAIG,uDAJuB,GAKtBC,EACF,EAAKV,aAAaW,WAChB,EAAKN,YAAYjV,GACjBoV,EACAC,GACE,GACAT,EAAe,EAAKA,aAAaY,UAAUF,GAExCtD,EAGL4C,EAHFnI,MAIF,EAAyB,EAAK8C,SAC5BvP,EACAgS,EAAYzX,MAAM,EAAG,GACrB,UAHM4T,EAAR,EAAQA,MAAOjI,EAAf,EAAeA,MAKT9W,EAASqK,KAAKC,IAAL,MAAAD,KAAI,aAAQ0U,EAAMxe,KAAI,SAACR,GAAD,OAAUA,EAAKkiB,gBAAe,EAI7DoE,IADNH,EAASpP,EAAQ,GAEXwP,IACFtmB,EAAS,IAAM,GAAKA,EAAS,GAAK,EAAIA,EAAS,GAAK,EAAKijB,WAC3D,EAAKA,WAAa,EAzBjB,cA2BoBlE,GA3BpB,IA2BH,2BAA8B,CAAC,IAAtBnQ,EAAqB,QAC5BA,EAAW/L,GAAKwjB,EAChBzX,EAAWwQ,GAAKkH,GA7Bf,8BAgCH,MAAO,CACLvH,MAAOA,EACPmH,WAlHF,KAuHFJ,UAAY,SAAClB,GACX,OAAOA,EAAK3f,OAAS,EAAI,EAAKwgB,OAAOK,UAAUlB,GAAQ,CAACA,IAxHxD,KA4HF/E,oBAAsB,SAAC0G,GACrB,OAAOA,EAAS,EAAKV,YAAY,WA7HjC,KAgJFA,YAAc,SAACjV,GACb,OAAO,EAAK2U,WAAWM,YAAYjV,GAAMkG,OAhJzC,IAAM0P,EAASC,SAASC,cAAc,UACtCpnB,KAAKimB,WAAaiB,EAAOG,WAAW,MACpCrnB,KAAKujB,WAAavjB,KAAKumB,YAAY,KAEnCvmB,KAAKomB,KAAOL,EAAQK,MAAR,UAAmBL,EAAQnN,SAA3B,cAAyCmN,EAAQ9F,YAC7DjgB,KAAKigB,WAAa8F,EAAQ9F,WAC1BjgB,KAAK4Y,SAAWmN,EAAQnN,SACxB5Y,KAAKimB,WAAWG,KAAOpmB,KAAKomB,KAE5BpmB,KAAKmmB,OAAS,IAAImB,KAAOC,WAEPnnB,IAAd4lB,SAC2B5lB,IAAzB4lB,EAAUrC,aACZ3jB,KAAK4jB,cAAgBoC,EAAUrC,iBAELvjB,IAAxB4lB,EAAUpB,YACZ5kB,KAAK4kB,UAAYoB,EAAUpB,YAI/B5kB,KAAK2jB,WAAa3jB,KAAK4Y,SAAW5Y,KAAK4jB,cACvC5jB,KAAKkmB,aAAe,IAAIsB,GAAaxnB,OAhD5B8lB,GA6JJ2B,WAAa,SAACC,GACnB,IAAM3X,EAAQ4X,iBAAiBD,GACvBE,EAA6D7X,EAA7D6X,UAAWC,EAAkD9X,EAAlD8X,YAAa7W,EAAqCjB,EAArCiB,WAAY4H,EAAyB7I,EAAzB6I,SAAUqH,EAAelQ,EAAfkQ,WACtD,MAAO,CACLmG,KAAK,GAAD,OAAKwB,EAAL,YAAmBC,EAAnB,YAAmC7W,EAAnC,YAAkD4H,EAAlD,YAA+DqH,GACnErH,SAAUkP,WAAWlP,GACrBqH,eAYC,IAAMuH,GAYX,WAAYO,GAAsB,IAAD,gCAXvBA,eAWuB,OAVvBpE,gBAUuB,OATvBqE,mBASuB,OAMjCnB,WAAa,SACXoB,GAOA,IAJY,IAFZvB,EAEW,uDAFS,KACpBC,EACW,uDADe,GAGrB5lB,EAAe,EAARyb,EAAWkK,EACnBwB,OAAa9nB,EACRkB,EAAI,EAAGA,EAAIolB,EAAWplB,IAAK,CAClC,GAAIkb,EAAMzb,IAAU,EAAG,CACrBmnB,EAAa1L,EACb,MAGF,IAAMoK,EAAS7b,KAAKod,MAAMpnB,EAAQyb,GAAO,GACnC4L,EAAI,EAAKtB,UAAUF,GAAQyB,YAEjC,GAAID,EAAIH,EACNlnB,EAAQ6lB,MADV,CAKA,KAAIwB,EAAIH,EAAatB,GAArB,CAIAuB,EAAatB,EACb,MAJEpK,EAAMoK,GAOV,QAAmBxmB,IAAf8nB,EACF,MAAM,IAAIliB,MAAJ,sBACWiiB,EADX,2EACwFvB,EADxF,cAEF,EAAKI,UAAUJ,GAAW2B,cAOhC,OAAOH,GA9CwB,KAkDjCpB,UAAY,SAACF,GACX,QAAmCxmB,IAA/B,EAAK4nB,cAAcpB,GAAuB,CAK5C,IAJA,IAAMnf,EAAI,EAAK6gB,yBAAyB1B,GAElC7I,EAAQ,GACRwK,EAAS,GACNjnB,EAAImG,EAAGnG,EAAI,EAAGA,IACrByc,EAAMvc,KAAK,EAAK4gB,kBAAkB9gB,EAAGslB,IACrC2B,EAAO/mB,KAAKolB,EAAS,EAAKjD,YAAcriB,EAAI,KAE9Cyc,EAAMvc,KAAK,EAAKgnB,yBAAyB5B,IACzC2B,EAAO/mB,KAAKolB,EAAS,EAAKjD,WAAa,GACvC,IAAK,IAAIriB,EAAImG,EAAI,EAAGnG,GAAK,EAAGA,IAC1Byc,EAAMvc,KAAKuc,EAAMzc,IACjBinB,EAAO/mB,KAAKolB,EAAS,EAAKjD,YAAcriB,EAAI,KAG9C,EAAK0mB,cAAcpB,GAAU,CAC3B7I,QACAwK,SACAE,YAAa1K,EAAMtW,GACnB4gB,YAAatK,EAAMiG,QAAO,SAAChS,EAAG4T,GAAJ,OAAU5T,EAAI4T,MAI5C,OAAO,EAAKoC,cAAcpB,IA3EK,KA+EjC0B,yBAA2B,SAAC1B,GAC1B,OAAO7b,KAAK2d,OAAO9B,EAAS,EAAKjD,WAAa,GAAK,EAAKA,aAhFzB,KAoFjCvB,kBAAoB,SAACjhB,EAAeylB,GAClC,OAAiE,EAA1D7b,KAAK4d,KAAK,SAAA/B,EAAU,GAAV,SAAe,EAAKjD,WAAaxiB,EAAU,KArF7B,KAwFjCqnB,yBAA2B,SAAC5B,GAC1B,OAA6D,EAAtD7b,KAAK4d,KAAK,SAAA/B,EAAU,GAAV,SAAe,EAAKjD,WAAa,EAAM,KAxFxD3jB,KAAK+nB,UAAYA,EACjB/nB,KAAK2jB,WAAaoE,EAAUpE,WAC5B3jB,KAAKgoB,cAAgB,IC1JZY,GAAb,WAQE,WAAYlB,EAA2Bte,GAAsB,IAAD,gCAPpD7E,aAOoD,OANpDmjB,eAMoD,OALrDle,WAKqD,OAJpDW,UAIoD,OAHrDf,WAGqD,OAFpDoW,cAEoD,OA8G5DqJ,aAAe,SAACzf,GACd,QAAKsI,IAAEoX,QAAQ,EAAK1f,MAAMsa,OAAQta,EAAMsa,UAIpC,EAAKta,MAAM2f,0BAA4B3f,EAAM2f,0BAIjD,EAAK3f,MAAQA,GACN,KAxHmD,KA2H5D4f,QAAU,WACR,EAAKxf,MAAMwf,WA5H+C,KA2M5DC,UAAY,WACV,EAAKzf,MAAMyf,aA5M+C,KAgN5DC,iBAAmB,SAAC/e,EAAiBgf,GAC/B,EAAK5kB,QAAU,GACjB,EAAKiF,MAAM4f,QAEb,EAAKjf,KAAOA,EACZ,EAAKX,MAAMW,KAAK,CAAEvG,MAAOuG,EAAKvG,MAAOU,MAAO6F,EAAK7F,QACjD,EAAKkF,MAAM0K,SACX,EAAK3P,SAAW,OAECnE,IAAb+oB,GACFA,KA1NwD,KA+N5DE,aAAe,SAACrD,GACd,EAAKxc,MAAM6f,aAAarD,GACxB,EAAKxc,MAAMka,UAjO+C,KA2O5D4F,oBAAsB,YASN,IARdC,EAQa,EARbA,OACArS,EAOa,EAPbA,OASIqI,EAAQ,EAAK/V,MAAMpI,IAAI,SAC3Bme,EAAMiK,cACN,IAAIC,EAAOlK,EAAMmK,gBACjB,GAAqB,IAAfD,EAAKjS,OAA+B,IAAhBiS,EAAKvS,OAAe,CAE5C,IAEIyS,EAFAC,EAAa,EAAKlC,UAAUmC,YAGhC,OAAQ3S,EAAO7R,MACb,IAAK,YACHskB,EAAcF,EAAKvS,OAASA,EAAO4S,YACnC,MACF,IAAK,uBACH,IAAIC,EAAiB,EAAKrC,UAAUsC,wBAAwBrQ,IACxDsQ,EAAkB/b,OAAOgc,QAE7BP,EADqBxC,SAASgD,gBAAgBC,cAG3CL,EAAiBE,GAClB/S,EAAOmT,aACT,MACF,IAAK,aACHV,EAAc,EAAKvgB,MAAMkhB,WAE7B,EAAK9gB,MAAM+gB,WAAWX,EAAYD,IACnB,IAAXJ,EACF,EAAK/f,MAAMghB,OACTZ,EAAa,EAAIH,EAAKjS,MAAQ,EAC9BmS,EAAc,EAAIF,EAAKvS,OAAS,GAGlC,EAAK1N,MAAMghB,OACT,EAAKphB,MAAMqhB,YAAc,EACzB,EAAKrhB,MAAMshB,WAAa,GAI9B,OAAOjB,GA3RmD,KAgT5DkB,kBAAoB,SAClBC,EACAC,EACAxM,EACApF,EACAkQ,EACA2B,EACAC,GAEA,GAAIH,GAAY,EAMd,OAJAvM,EAAE,WAAF,eAAMpF,cACW7Y,IAAb+oB,GACFA,KAKJ,IACMM,EADQ,EAAKjgB,MAAMpI,IAAI,SACVsoB,gBAInB,GAFAoB,EAAoBA,GAAqB,QAExB1qB,IAAb2qB,EAAwB,CAC1B,GACEhgB,KAAKuZ,IAAIyG,EAASvT,MAAQiS,EAAKjS,OAASsT,GACxC/f,KAAKuZ,IAAIyG,EAAS7T,OAASuS,EAAKvS,QAAU4T,EA8B1C,YAzBAE,YAAW,WACT,IACMC,EADQ,EAAKzhB,MAAMpI,IAAI,SACNsoB,gBAGrB3e,KAAKuZ,IAAImF,EAAKjS,MAAQyT,EAASzT,QAAUsT,GACzC/f,KAAKuZ,IAAImF,EAAKvS,OAAS+T,EAAS/T,SAAW4T,EAG3C,EAAKH,kBACHC,EAAW,EACXC,EACAxM,EACApF,EACAkQ,EACA2B,EACAG,IAGF5M,EAAE,WAAF,eAAMpF,SACW7Y,IAAb+oB,GACFA,OAGH0B,GAGHG,YAAW,WACT,EAAKL,kBACHC,EAAW,EACXC,EACAxM,EACApF,EACAkQ,EACA2B,EACArB,KAEDoB,QAGLG,YAAW,WACT,EAAKL,kBACHC,EACAC,EACAxM,EACApF,EACAkQ,EACA2B,EACArB,KAEDoB,IAhYL7qB,KAAKuE,QAAU,EACfvE,KAAKoJ,MAAQA,EACbpJ,KAAK0nB,UAAYA,EACjB1nB,KAAKmK,KAAO,CACVvG,MAAO,GACPU,MAAO,IAQTtE,KAAKwf,SAAW,IAAIsG,GALR,CACV7F,WACE,wLACFrH,SAAU,KLeT,SAA0B4G,GAC/B,IAAMc,EAAed,EAASe,oBAAoB,GAE5CG,EAAO,SAACd,EAAiBL,GAA2B,IAAD,EACjD2L,EAAKtL,EAAI7P,MAAMob,cAAgB,EAC/BC,EAAKxL,EAAI7P,MAAMsb,eAAiB,EACtC,EAAiC7L,EAASqB,SACxCjB,EAAI7b,MACJ6b,EAAItW,MAAQgX,EACZ,UAHMb,EAAR,EAAQA,MAAOjI,EAAf,EAAeA,MAAON,EAAtB,EAAsBA,OAOhBpH,EAAQyP,EAAOQ,SAAS,OAAQ,CACpCC,MAAM,aAGJxI,MAAOA,EAAa,EAAL0T,EACfhU,OAAQA,EAAc,EAALkU,GACdxL,EAAI7P,OAETjQ,KAAM,SASR,OALAwf,GAASC,EAAOC,EAAUC,EAAO,CAC/BC,QAASwL,EACTvL,QAASyL,EACTxL,IAAG,UAAEA,EAAIgB,gBAAN,aAAE,EAAc7Q,QAEdD,GAGT0Q,KAAGC,aACD,YACA,CACEC,KAAM,SAACd,EAAmBL,GACxB,OAAOmB,EAAKd,EAAoBL,IAKlC+L,SAPF,SAOWxrB,EAAMsF,EAAOpB,GAOpB,IAP2B,IAAD,EACpB4b,EAAM5b,EAAMunB,KACZC,EAAQ5L,EAAI4L,MACZC,EAAS7L,EAAI6L,OACf3Q,EAAc,GACd4Q,EAAW,yBAAQF,EAAM5K,gBAAd,aAAQ,EAAgB7Q,OAEvC,MAA2BrO,OAAOwR,QAAQsY,EAAMzb,OAAhD,eAAyD,CAApD,0BAAOjQ,EAAP,KAAauM,EAAb,KACiB,kBAATA,IAGXyO,EAAOhb,GAAQuM,GAXS,oBAaNof,GAbM,IAa1B,2BACE,IAD2B,IAAlBE,EAAiB,QAC1B,MAA2BjqB,OAAOwR,QAChC0M,EAAI9E,OAAQ6Q,IADd,eAEG,CAFE,0BAAO7rB,EAAP,KAAauM,EAAb,KAGU,UAATvM,EACF4B,OAAO2H,OAAOqiB,EAAarf,GAE3ByO,EAAOhb,GAAQuM,GApBK,8BAyB1B,IAAMkT,EAAQK,EAAIL,MAClBA,EAAM6J,QACN1I,EACE,CACE3c,MAAOynB,EAAMznB,MACbuF,KAAMkiB,EAAMliB,KACZyG,MAAO+K,EACP8F,SAAU,CAAE7Q,MAAO2b,IAErBnM,KAIN,eK5FAqM,CAAiB5rB,KAAKwf,UACtBa,GAAmBrgB,KAAKwf,UAExB,IAAMqM,EAAe,CAAC,cAAe,aAEjCziB,EAAM2f,yBACR8C,EAAMrqB,KAAK,CACT6D,KAAM,qBACNymB,eAAe,IAInB9rB,KAAKwJ,MAAQ,IAAIgX,KAAGuL,MAAM,CACxBrE,UAAWA,EACXlQ,MAAOkQ,EAAUsE,YACjB9U,OAAQ9N,EAAMkhB,WACd5G,OAAQta,EAAMsa,QAAU,CACtBre,KAAM,QACN4mB,gBAAgB,EAChBC,aAAc,GACdC,YAAa,IAEfC,YAAa,CACX/mB,KAAM,YACN0K,MAAO,CACL8P,OAAQ,QACRwM,SAAU,CACRnM,KAAM,QACN7P,KAAMmQ,KAAG8L,MAAMC,SAAS,EAAG,KAG/B3L,SAAU,CACR7Q,MAAO,CACLmQ,KAAM,QACNsM,WAAY,CACVtM,KAAM,UACNL,OAAQ,UACRxF,QAAS,CAAC,EAAG,EAAG,EAAG,GACnBuM,OAAQ,MAKhBiF,MAAO,CACLY,QAASZ,EACTa,KAAM,CAAC,iBAITC,gBAAiB,CACfC,OAAQ,CACNC,QAAS,EAGT9oB,MAAO,CACL8oB,QAAS,IAGbC,SAAU,CACRD,QAAS,GAGT9oB,MAAO,CACL8oB,QAAS,MAIfE,gBAAiB,CACfH,OAAQ,CACN/M,OAAQ,QACRgN,QAAS,GAEXC,SAAU,CACRD,QAAS,GACTvb,KAAM,CACJub,QAAS,aAMSzsB,IAAtBgJ,EAAM4jB,aACRhtB,KAAKwJ,MAAMyjB,GAAG,cAAc,SAACC,GAC3B,EAAK9jB,MAAM4jB,YAAaE,EAAMzsB,KAAK8qB,KAAKC,MAAM3rB,YAIxBO,IAAtBgJ,EAAM+jB,aACRntB,KAAKwJ,MAAMyjB,GAAG,cAAc,SAACC,GAC3B,EAAK9jB,MAAM+jB,YAAaD,EAAMzsB,KAAK8qB,KAAKC,UAhHhD,sDAwIE,SAAqB5nB,EAAoBU,GAMvC,IAAI8oB,EAAWxpB,EAAM3C,KAAI,SAACosB,EAAG/rB,GAC3B,IAAI+D,EAGAA,EAFAgoB,EAAEtpB,MAAM+Y,OAAOnX,OAAS,IACV,SAAZ0nB,EAAEvd,OAAgC,WAAZud,EAAEvd,OACnBud,EAAEvd,MAAQ,QAKZud,EAAEvd,MAGX,IAAM9L,EAAmB,CACvBnE,GAAIwtB,EAAExtB,GACNkE,MAAOspB,EAAEtpB,MACTsB,KAAMA,EACN0K,MAAM,2BACDsd,EAAEtd,OADF,IAEH6W,OAAQ,EACRyE,cAAe,EACfF,aAAc,IAEhBvK,SAAU,CACR7Q,MAAOsd,EAAEC,aAMb,MAHgB,SAAZD,EAAEvd,QACJ9L,EAAK+L,MAAO6W,OAAS,GAEhB5iB,KAIL0N,IAAE6b,KAAKjpB,EAAMrD,KAAI,SAACosB,GAAD,OAAOA,EAAExtB,OAAK8F,SAAWrB,EAAMqB,QAClD6nB,QAAQC,MACN,+CACAnpB,EAAMrD,KAAI,SAACosB,GAAD,OAAOA,EAAExtB,OAIvB,IA9CsE,EA8ClE6tB,EAAWppB,EAAMrD,KAAI,SAACwE,GAAD,MAAQ,CAC/B5F,GAAI4F,EAAE5F,GACN0F,OAAQE,EAAEF,OACVC,OAAQC,EAAED,OACVzB,MAAO0B,EAAE1B,UAIL4pB,EAAK,IAAI3hB,IACX4hB,GAAmB,EAvD+C,cAwDnDtpB,GAxDmD,IAwDtE,2BAA0B,CAAC,IAAhBgB,EAAe,QAClBuoB,EAAI,UAAMvoB,EAAKC,OAAX,YAAqBD,EAAKE,QACpC,GAAImoB,EAAGxiB,IAAI0iB,GAAO,CAChBD,GAAmB,EACnB,MAEFD,EAAGrrB,IAAIurB,IA9D6D,8BAoEtE,OAJID,GACFpN,KAAGsN,KAAKC,qBAAqBL,GAGxB,CAAE9pB,MAAOwpB,EAAU9oB,MAAOopB,OA5MrC,KC7BM5S,GAAS,CACblG,KAAM,CACJC,QAAS,QAEXrL,MAAO,CACLwkB,SAAU,WACVxW,MAAO,QAITyW,QAAS,CACPD,SAAU,WACVrU,IAAK,EACLuU,KAAM,EACN,gBAAiB,CACftd,aAAc,EACdE,YAAa,EACbC,aAAc,GAEhB,gBAAiB,CACfH,aAAc,EACdyJ,QAAS,EACT,QAAS,CACPzB,SAAU,MAIhBvJ,SAAU,CACRsB,OAAQ,iBACRC,aAAc,GAEhB8W,UAAW,CAETlQ,MAAO,OACP,WAAY,CACV3C,QAAS,WAKTsZ,GAAc,CAClBC,MAAO,CACL/oB,KAAM,QACN4mB,gBAAgB,EAChBC,aAAc,GACdC,YAAa,IAEfkC,MAAO,CACLhpB,KAAM,QACNipB,QAAS,KACTC,QAAS,GACTC,QAAS,KASAC,GAAiB/d,YAAWoK,GAAXpK,CAC5Bge,sBACE,WA4BEC,GACI,IA3BF9uB,EA2BC,EA3BDA,GACA0E,EA0BC,EA1BDA,QACAX,EAyBC,EAzBDA,MACAU,EAwBC,EAxBDA,MACA2M,EAuBC,EAvBDA,QACA7H,EAsBC,EAtBDA,MACA6F,EAqBC,EArBDA,UAqBC,IApBD2f,+BAoBC,MApByB,CAAEvpB,KAAM,YAAaykB,YAAa,GAoB3D,MAnBDmE,eAmBC,aAlBD5e,gBAkBC,aAjBDwf,eAiBC,MAjBSV,GAiBT,EACGzG,EAAYoH,iBAAO,MACnBtlB,EAAQslB,sBAA4B1uB,GAE1C2uB,8BACEJ,GACA,iBAA2B,CACzBnlB,MAAO,kBAAMA,EAAM0I,SACnB8c,SAAU,WACR,YAAsB5uB,IAAlBoJ,EAAM0I,UACV1I,EAAM0I,QAAQoX,oBAAoB,CAChCC,QAAQ,EACRrS,OAAQ0X,KAEH,QAKbjgB,qBAAU,WACR,GAA0B,OAAtB+Y,EAAUxV,QAAd,MACsB9R,IAAlBoJ,EAAM0I,UACR1I,EAAM0I,QAAU,IAAI0W,GAClBlB,EAAUxV,QACV9I,GAAS,CACPkhB,WAAY,OAKlB,IAAI7E,EAAIjc,EAAM0I,QACd,QAAc9R,IAAVgJ,EACcqc,EAAEoD,aAAazf,KAE7Bqc,EAAEuD,UACFxf,EAAM0I,QAAU,IAAI0W,GAClBlB,EAAUxV,QACV9I,GAAS,CACPkhB,WAAY,MAGhB7E,EAAIjc,EAAM0I,SAGduT,EAAEyD,iBAAiBN,GAAQqG,cAAcrrB,EAAOU,IAAQ,WACrD4J,OAAeuX,EAAIA,EAEpBA,EAAEkF,kBACA,GACA,GACAlF,EAAE6D,oBACF,CAAC,CAAEC,QAAQ,EAAMrS,OAAQ0X,KACzB,qBAGH,CAAC/uB,EAAI0E,EAASX,EAAOU,EAAO8E,EAAOwlB,IAEtC,IAAMM,GACQ,IAAZjB,EAAoB,KAClB,cAACkB,GAAD,CACEC,SAAsB,cAAZnB,EACVzkB,MAAOA,EACPqlB,QAASA,IAIf,OACE,sBAAK5f,UAAWA,EAAhB,UACE,qBAAKA,UAAWgC,EAAQ2D,KAAxB,SAA+BrQ,IAC/B,sBAAK0K,UAAWgC,EAAQzH,MAAxB,UACG0lB,EACD,qBACEP,IAAKjH,EACLzY,UACEgC,EAAQyW,WAAarY,EAAW,IAAM4B,EAAQ5B,SAAW,gBAU5D8f,GAAeze,YAAWoK,GAAXpK,EAC1B,YASmC,IAAD,IARhC0e,gBAQgC,SAPhC5lB,EAOgC,EAPhCA,MACAyH,EAMgC,EANhCA,QACA4d,EAKgC,EALhCA,QAMA,EAA8B/Z,oBAAS,GAAvC,mBAAOua,EAAP,KAAgBC,EAAhB,KACA,EAA4Bxa,mBAAS,SAArC,mBAAO4O,EAAP,KAAe6L,EAAf,KAEMC,EAAe,WACfJ,GAAUE,GAAW,IAErBG,EAAe,WACfL,GAAUE,GAAW,IAG3B,GAAIF,IAAaC,EACf,OACE,qBACEpgB,UAAWgC,EAAQgd,QACnBuB,aAAcA,EACdC,aAAcA,EAHhB,SAKE,cAAC,KAAD,CAAQxgB,UAAU,OAAlB,SACE,cAAC,KAAD,QAMR,IAAMygB,EAAc,WAAO,IAAD,EACxB,UAAAlmB,EAAM0I,eAAN,SAAe1I,MAAMyf,aAGjB0G,EAAe,SAAC7vB,GAAoC,IAAD,IACvDyvB,EAAUzvB,GACV,UAAA0J,EAAM0I,eAAN,SAAemX,aAAawF,EAAQ/uB,IACpC,UAAA0J,EAAM0I,eAAN,SAAeyY,kBAAkB,GAAI,GAAI+E,EAAa,IAAI,gBAY5D,OACE,qBACEzgB,UAAWgC,EAAQgd,QACnBuB,aAAcA,EACdC,aAAcA,EAHhB,SAKE,eAAC,KAAD,CAAOnmB,KAAM,EAAGua,MAAM,QAAtB,UACE,cAAC,KAAD,CAASzT,MAAM,mBAAf,SACE,cAAC,KAAD,CAAQnB,UAAU,OAAOmG,QAASsa,EAAlC,SACE,cAAC,KAAD,QAGJ,cAAC,KAAD,CAAStf,MAAM,6BAAf,SACE,cAAC,KAAD,CAAQnB,UAAU,OAAlB,SACE,cAAC2gB,GAAA,EAAD,QAGJ,cAAC,KAAD,CAASxf,MAAM,sBAAf,SACE,cAAC,KAAD,CACEyf,QACE,cAAC,KAAD,CAAMza,QAxBS,SAAC3P,GAC1BkqB,EAAalqB,EAAEqY,MAuBL,SACGpc,OAAO0R,KAAK+a,IAAaltB,KAAI,SAACyiB,GAAD,OAC5B,cAAC,KAAK/T,KAAN,UAAyB+T,GAATA,QAJxB,SASE,eAAC,KAAD,CACEzU,UAAU,OACVqK,KAAM,cAACwW,GAAA,EAAD,IACN1a,QAvCQ,WACH,UAAXsO,GAAoBiM,EAAa,SACtB,UAAXjM,GAAoBiM,EAAa,UAkC7B,UAKGjM,EALH,IAKW,cAACqM,GAAA,EAAD,mB,mBC9QnBjV,GAAS,CACbyD,UAAW,CACT/G,MAAO,QAETwY,WAAY,CACV/f,gBAAiBggB,KAAM,GACvB,UAAW,CACThgB,gBAAiBggB,KAAM,GACvB9Y,MAAO,UAGX+Y,aAAc,CACZjgB,gBAAiBkgB,KAAO,GACxB,UAAW,CACTlgB,gBAAiBkgB,KAAO,GACxBhZ,MAAO,UAGXiZ,UAAW,CACTngB,gBAAiBogB,KAAK,GACtB,UAAW,CACTpgB,gBAAiBogB,KAAK,GACtBlZ,MAAO,WAOAmZ,GAAsB5f,YAAWoK,GAAXpK,CACjChC,aACE,YAWmC,IAVjC/E,EAUgC,EAVhCA,GACAvE,EASgC,EAThCA,MACAiT,EAQgC,EARhCA,WACAD,EAOgC,EAPhCA,SACAnH,EAMgC,EANhCA,QAOQhD,EAAeK,IAAfL,WACF6Q,EAAa,IAAIX,GAIjB3L,EAAUQ,mBAAQ,WACtB,IAD4B,EACtBR,EAGe,GAJO,cAKZvE,EAAWgR,QALC,IAK5B,2BAAmC,CAAC,IAAzBC,EAAwB,QACjC1M,EAAQhR,KAAK,CACX6D,KAAM,QACNxF,GAAIqf,EAAErf,GACNuF,MAAM,SAAD,OAAW8Z,EAAErf,IAClBkE,MAAO4F,EAAGH,MAAM7E,SAASV,UAAUib,EAAEhb,IAAKgb,EAAE5T,kBAVpB,kDAcZ3B,EAAGH,MAAM5F,OAdG,IAc5B,2BAAgC,CAAC,IAAtBypB,EAAqB,QAC9B7a,EAAQhR,KAAK,CACX6D,KAAMgoB,EAAEjpB,SACRvE,GAAIwtB,EAAExtB,GACNuF,MAAM,GAAD,OAAKioB,EAAEjpB,SAAP,YAAmBipB,EAAExtB,IAC1BkE,MAAO4F,EAAGH,MAAM7E,SAASZ,MAAMspB,GAC/Bpe,UAAWgC,EAAQoc,EAAEjpB,aApBG,8BAuB5B,OAAOoO,IACN,CAACvE,EAAWxM,QAAQ6H,OAUvB,OACE,cAAC,KAAD,CACE4O,YAAY,EACZ1F,QAASA,EACT2F,iBAAiB,QACjBlJ,UAAWgC,EAAQsN,UACnBY,YAAY,EACZC,SAda,SAAC5N,GACF,KAAVA,GACJsN,EAAWjU,MAAK,WACd,OAAOoD,EAAWkD,UAAUK,GAAOtS,MAAK,kBAAM,SAY9CkG,WAAiBhF,IAAVgF,OAAsBhF,EAAtB,UAAqCgF,EAAMC,KAA3C,YAAmDD,EAAMvF,IAChEuY,SAAU,SAAChT,EAAOmrB,GAChBnY,EAAS,CAAE/S,KAAMkrB,EAAOlrB,KAAMxF,GAAI0wB,EAAO1wB,MAE3CwY,WAAY,SAACjT,EAAOmrB,GAClBlY,EAAW,CAAEhT,KAAMkrB,EAAOlrB,KAAMxF,GAAI0wB,EAAO1wB,YChGjDib,GAAS,CACbrR,MAAO,CACL+N,MAAO,OACPgZ,UAAW,OACXC,cAAe,EACf7f,aAAc,cAEd,OAAQ,CACNmM,cAAe,UAEjB,WAAY,CACV1C,QAAS,UAGbkE,UAAW,CACT/G,MAAO,SAkDEkZ,IA9CyBhgB,YAAWoK,GAAXpK,CACpChC,aACE,YAWmC,IAVjC/E,EAUgC,EAVhCA,GACAsH,EASgC,EAThCA,QACA7L,EAQgC,EARhCA,MACAgT,EAOgC,EAPhCA,SACAC,EAMgC,EANhCA,WASM7F,EAAUQ,mBAAQ,WACtB,OAAOrJ,EAAGH,MAAM5F,MAAM3C,KAAI,SAAC+C,GACzB,MAAO,CACLoB,MAAOpB,EAAKnE,GACZkE,MAAOC,EAAKD,YAGf,CAAC4F,IAEJ,OACE,cAAC,KAAD,CACEwV,YAAY,EACZjH,YAAY,EACZ1F,QAASA,EACT2F,iBAAiB,QACjBlJ,UAAWgC,EAAQsN,UACnBnZ,MAAOA,EACPgT,SAAUA,EACVC,WAAYA,QAYE3H,YAAWoK,GAAXpK,CACtBhC,aACE,YAAuE,IAAD,IAAnE/E,EAAmE,EAAnEA,GAAIrE,EAA+D,EAA/DA,KACL,GADoE,EAAzD2L,QAC2B3C,KAA9BL,EAAR,EAAQA,WAAYD,EAApB,EAAoBA,cACpB,EAA4B8G,wBACjB1U,IAATkF,EACI,CAAED,KAAMsE,EAAGH,MAAMxF,KAAKsB,EAAKC,QAAQnB,SAAUvE,GAAIyF,EAAKC,aACtDnF,GAHN,mBAAOmF,EAAP,KAAeorB,EAAf,KAKA,EAA4B7b,wBACjB1U,IAATkF,EACI,CAAED,KAAMsE,EAAGH,MAAMxF,KAAKsB,EAAKE,QAAQpB,SAAUvE,GAAIyF,EAAKE,aACtDpF,GAHN,mBAAOoF,EAAP,KAAeorB,EAAf,KAKA,EAAsB9b,mBAAQ,OAAqBxP,QAArB,IAAqBA,OAArB,EAAqBA,EAAMpB,KAAzD,mBAAOA,EAAP,KAAY2sB,EAAZ,KACA,EAA0C/b,oBAAS,GAAnD,mBAAOhM,EAAP,KAAsBgoB,EAAtB,KAKMC,EAAU/d,mBAAQ,WACtB,YAAe5S,IAAXmF,GAAwC,UAAhBA,EAAOF,YACpBjF,IAAXoF,GAAwC,UAAhBA,EAAOH,OAEjCsE,EAAGH,MAAM9D,QAAQH,EAAO1F,GAAI2F,EAAO3F,WACzBO,IAATkF,GACCC,EAAO1F,KAAOyF,EAAKC,QACnBC,EAAO3F,KAAOyF,EAAKE,YAEtB,CAACmE,EAAGH,MAAMjF,QAAV,OAAmBgB,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAQ1F,GAA3B,OAA+B2F,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAQ3F,KAE1C8O,qBAAU,gBACKvO,IAATkF,QAC6ClF,IAA7C4N,EAAcV,iBAAiBhI,EAAKpB,MAExC8J,EAAcgjB,SAAS,CAAE7e,WAAY,CAAEjO,IAAKoB,EAAKpB,SAChD,CAAC8J,EAAe1I,EAAMpB,IA2EzB,OACE,eAAC,KAAD,CACE+sB,SAAU,CAAE/hB,KAAM,GAClBgiB,WAAY,CAAEhiB,KAAM,IACpBiiB,WAAW,EACXzN,OAAO,aAJT,UAME,cAAC,KAAK/T,KAAN,CACE5L,MACE,cAAC,IAAW8S,KAAZ,CACEgC,cACazY,IAAXmF,EAAuB,CAAE+L,KAAM/L,EAAO1F,SAAOO,EAFjD,oBAQFgxB,eAAgBL,EAAU,aAAU3wB,EACpCixB,KACEN,EACI,wDACA3wB,EAdR,SAiBE,cAACkwB,GAAD,CACE3mB,GAAIA,EACJvE,MAAOG,EACP6S,SAAUuY,EACVtY,WAAY,kBAAMsY,OAAUvwB,QAGhC,cAAC,KAAKuP,KAAN,CACE5L,MACE,cAAC,IAAW8S,KAAZ,CACEgC,cACazY,IAAXoF,EAAuB,CAAE8L,KAAM9L,EAAO3F,SAAOO,EAFjD,oBAFJ,SAWE,cAACkwB,GAAD,CACE3mB,GAAIA,EACJvE,MAAOI,EACP4S,SAAUwY,EACVvY,WAAY,kBAAMuY,OAAUxwB,QAGhC,cAAC,KAAKuP,KAAN,CACE5L,MACE,cAAC,IAAW8S,KAAZ,CACEgC,cACUzY,IAAR8D,EACI,CAAEoN,KAAI,UAAEtD,EAAcV,iBAAiBpJ,UAAjC,aAAE,EAAqCrE,SAC7CO,EAJR,uBAFJ,SAaE,cAACoe,GAAD,CACEpZ,WACUhF,IAAR8D,EAAA,UACI8J,EAAcV,iBAAiBpJ,UADnC,aACI,EAAqCrE,QACrCO,EAENgY,SAAU,SAACvY,GAAD,aAAQgxB,EAAM,UAAC7iB,EAAc5M,IAAIvB,UAAnB,aAAC,EAAuBqE,MAChDmU,WAAY,SAACjT,GAAD,OAAWyrB,OAAOzwB,QAGlC,cAAC,KAAKuP,KAAN,CAAW5L,MAAM,gBAAjB,SACE,cAAC,KAAD,CACEiU,QAASlP,EACTiP,SAAU,SAACuZ,GAAD,OAASR,EAAiBQ,QAGxC,cAAC,KAAK3hB,KAAN,CAAW5L,MAAM,SAAjB,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CACEsB,KAAK,UACL+P,QA3JK,WACb,QAAYhV,IAAR8D,QAAgC9D,IAAXmF,QAAmCnF,IAAXoF,IAE7CurB,EAAJ,CAEA,IACI7qB,EAAUC,EADRkG,EAAO2B,EAAcV,iBAAiBpJ,GAG5C,GAAoB,UAAhBqB,EAAOF,KAAkB,CAC3B,IAAMksB,EAAMtjB,EAAW7M,IAAImE,EAAO1F,IAClCqG,EAAWyD,EAAGH,MAAM1D,aACpB6D,EAAGH,MAAM1B,aAAa,CACpBjI,GAAIqG,EACJhC,IAAKqtB,EAAIrtB,IACTH,MAAOwtB,EAAIjmB,cACXxC,eAAe,EACf1E,SAAU,oBAGZ8B,EAAWX,EAAO1F,GAGpB,GAAoB,UAAhB2F,EAAOH,KAAkB,CAC3B,IAAMksB,EAAMtjB,EAAW7M,IAAIoE,EAAO3F,IAClCsG,EAAWwD,EAAGH,MAAM1D,aACpB6D,EAAGH,MAAM1B,aAAa,CACpBjI,GAAIsG,EACJjC,IAAKqtB,EAAIrtB,IACTH,MAAOwtB,EAAIjmB,cACXxC,eAAe,EACf1E,SAAU,oBAGZ+B,EAAWX,EAAO3F,GAGpB,IAAM2xB,EAAU,CACdjsB,OAAQW,EACRV,OAAQW,EACRjC,IAAKmI,EAAKnI,IACV4E,gBACA/E,MAAOsI,EAAKf,oBAEDlL,IAATkF,EACEA,EAAKC,SAAWW,GAAYZ,EAAKE,SAAWW,EAC9CwD,EAAGH,MAAMlB,WAAWhD,EAAKC,OAAQD,EAAKE,OAAQgsB,IAE9C7nB,EAAGH,MAAMnB,WAAW/C,EAAKC,OAAQD,EAAKE,QACtCmE,EAAGH,MAAMpB,QAAQopB,IAGnB7nB,EAAGH,MAAMpB,QAAQopB,GAGnBpY,KAAMqY,eAsGErU,cACahd,IAAXmF,QACWnF,IAAXoF,QACQpF,IAAR8D,UA9FC9D,IAATkF,IACM,OAANC,QAAM,IAANA,OAAA,EAAAA,EAAQ1F,MAAOyF,EAAKC,SACd,OAANC,QAAM,IAANA,OAAA,EAAAA,EAAQ3F,MAAOyF,EAAKE,QACpBtB,IAAQoB,EAAKpB,KACb4E,IAAkBxD,EAAKwD,gBA4FfioB,EARJ,uBAaU3wB,IAATkF,EACC,cAAC,KAAD,CAAQD,KAAK,UAAUqsB,QAAQ,EAAMtc,QA9G9B,gBACFhV,IAATkF,IACJqE,EAAGH,MAAMnB,WAAW/C,EAAKC,OAAQD,EAAKE,QACtC4T,KAAMqY,eA2GE,oBAGE,kB,UC3PLE,GAAmBjjB,aAC9B,SAACtF,GAAwE,IAAD,UAC9D6E,EAAeK,IAAfL,WACR,EAAsB6G,mBAAQ,UAAqB1L,EAAMpF,YAA3B,aAAqB,EAAYE,KAA/D,mBAAOA,EAAP,KAAY2sB,EAAZ,KACA,EAA0C/b,oBACxC,UAAA1L,EAAMpF,YAAN,eAAY8E,iBAAiB,GAD/B,mBAAOA,EAAP,KAAsBgoB,EAAtB,KAKAniB,qBAAU,gBACWvO,IAAfgJ,EAAMpF,WACuC5D,IAA7C6N,EAAWR,cAAcrE,EAAMpF,KAAKE,MAExC+J,EAAW+iB,SAAS,CAAE7e,WAAY,CAAEjO,IAAKkF,EAAMpF,KAAKE,SACnD,WAACkF,EAAMpF,YAAP,aAAC,EAAYE,MAuChB,OACE,eAAC,IAAM6K,SAAP,WACE,cAAC,KAAKY,KAAN,CACE5L,MACE,cAAC,IAAW8S,KAAZ,CACEgC,cACUzY,IAAR8D,EACI,CACEoN,KAAI,UAAErD,EAAWR,cAAcvJ,UAA3B,aAAE,EAA+BrE,SAEvCO,EANR,mBAFJ,SAeE,cAACse,GAAD,CACEtZ,WACUhF,IAAR8D,EAAA,UAAoB+J,EAAWR,cAAcvJ,UAA7C,aAAoB,EAA+BrE,QAAKO,EAE1DgY,SAAU,SAACvY,GAAD,aAAQgxB,EAAM,UAAC5iB,EAAW7M,IAAIvB,UAAhB,aAAC,EAAoBqE,MAC7CmU,WAAY,kBAAMwY,OAAOzwB,QAG7B,cAAC,KAAKuP,KAAN,CAAW5L,MAAM,gBAAjB,SACE,cAAC,KAAD,CACEiU,QAASlP,EACTiP,SAAU,SAACuZ,GAAD,OAASR,EAAiBQ,QAGxC,cAAC,KAAK3hB,KAAN,CAAW5L,MAAM,SAAjB,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CACEsB,KAAK,UACL+P,QAxEK,gBACDhV,IAAR8D,SAEe9D,IAAfgJ,EAAMpF,KAERoF,EAAMO,GAAGH,MAAM1B,aAAa,CAC1BjI,GAAIuJ,EAAMO,GAAGH,MAAM1D,aACnB5B,IAAKA,EACLH,MAAOkK,EAAWR,cAAcvJ,GAAMoH,cACtClH,SAAU,aACV0E,cAAeA,IAIjBM,EAAMO,GAAGH,MAAMvB,gBAAgBmB,EAAMpF,KAAKnE,GAAI,CAC5CqE,IAAKA,EACLH,MAAOkK,EAAWR,cAAcvJ,GAAMoH,cACtCxC,cAAeA,IAInBM,EAAMwoB,WAoDExU,cAAkBhd,IAAR8D,UA1CD9D,IAAfgJ,EAAMpF,MACNoF,EAAMpF,KAAKE,MAAQA,GACnBkF,EAAMpF,KAAK8E,gBAAkBA,GAqCzB,uBAOgB1I,IAAfgJ,EAAMpF,KACL,cAAC,KAAD,CAAQqB,KAAK,UAAUqsB,QAAQ,EAAMtc,QAtD9B,WACfhM,EAAMO,GAAGH,MAAMxB,WAAWoB,EAAMpF,KAAMnE,IACtCuJ,EAAMwoB,UAoDE,oBAGE,gBAQHC,GAAqBnjB,aAChC,SAACtF,GAA0E,IAAD,IAChE2E,EAAgBO,IAAhBP,YACR,EAAoB+G,mBACU,eAA5B,UAAA1L,EAAMpF,YAAN,mBAAYoB,aAAZ,eAAmBC,MAAuB+D,EAAMpF,KAAKoB,MAAMvF,QAAKO,GADlE,mBAAOP,EAAP,KAAWiyB,EAAX,KAGA,EAAsChd,wBACrB1U,IAAfgJ,EAAMpF,MAA8C,iBAAxBoF,EAAMpF,KAAKI,UACnCgF,EAAMpF,KAAKkD,aAFjB,mBAAOA,EAAP,KAAoB6qB,EAApB,KAMMC,EAAehf,mBACnB,6BACS5S,IAAPP,SACiBO,IAAfgJ,EAAMpF,WACgC5D,IAAtCgJ,EAAMO,GAAGH,MAAMrE,eAAetF,SACdO,IAAfgJ,EAAMpF,OACL,UAAAoF,EAAMO,GAAGH,MAAMrE,eAAetF,UAA9B,eAAmCA,MAAOuJ,EAAMpF,KAAKnE,MAC3D,CAACuJ,EAAMO,GAAGH,MAAMjF,QAAS1E,IAG3B,QAAmBO,IAAfgJ,EAAMpF,MAAgD,WAA1BoF,EAAMpF,KAAKoB,MAAMC,KAC/C,OAAO,sDAoDT,OACE,eAAC,IAAM0J,SAAP,WACE,cAAC,KAAKY,KAAN,CACE5L,MACE,cAAC,IAAW8S,KAAZ,CACEgC,cAAiBzY,IAAPP,EAAmB,CAAEyR,KAAMzR,QAAOO,EAD9C,oBAMFgxB,eAAgBY,EAAe,aAAU5xB,EACzCixB,KAAMW,EAAe,qCAAkC5xB,EATzD,SAWE,cAACue,GAAD,CACEvZ,MAAOvF,EACPuY,SAAU0Z,EACVzZ,WAAY,kBAAMyZ,OAAM1xB,QAG5B,cAAC,KAAKuP,KAAN,CAAW5L,MAAM,iBAAjB,SACE,cAAC,KAAD,CACEiU,QAAS9Q,EACT6Q,SAAU,SAACuZ,GAAD,OAASS,EAAeT,QAGtC,cAAC,KAAK3hB,KAAN,CAAW5L,MAAM,SAAjB,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CACEsB,KAAK,UACL+P,QA9EK,WACb,QAAWhV,IAAPP,IACAmyB,EAAJ,CAEA,IAAMC,EAAMlkB,EAAY3M,IAAIvB,QAETO,IAAfgJ,EAAMpF,KAERoF,EAAMO,GAAGH,MAAMzB,eAAe,CAC5BlI,GAAIuJ,EAAMO,GAAGH,MAAM1D,aACnBV,MAAO,CACLC,KAAM,YACNxF,GAAIA,EACJqE,IAAK+tB,EAAI/tB,KAEXH,MAAOkuB,EAAI3mB,cACXlH,SAAU,eACV8C,YAAaA,IAIfkC,EAAMO,GAAGH,MAAMrB,kBAAkBiB,EAAMpF,KAAKnE,GAAI,CAC9CuF,MAAO,CACLC,KAAM,YACNxF,GAAIA,EACJqE,IAAK+tB,EAAI/tB,KAEXH,MAAOkuB,EAAI3mB,cACXlH,SAAU,eACV8C,YAAaA,IAIjBkC,EAAMwoB,WA8CExU,cAAiBhd,IAAPP,GAAoBmyB,UApCrB5xB,IAAfgJ,EAAMpF,MACNoF,EAAMpF,KAAKkD,cAAgBA,GACA,cAA1BkC,EAAMpF,KAAKoB,MAAMC,MAAwB+D,EAAMpF,KAAKoB,MAAMvF,KAAOA,GA+B9D,uBAOgBO,IAAfgJ,EAAMpF,KACL,cAAC,KAAD,CAAQqB,KAAK,UAAUqsB,QAAQ,EAAMtc,QAhD9B,WACfhM,EAAMO,GAAGH,MAAMxB,WAAWoB,EAAMpF,KAAMnE,IACtCuJ,EAAMwoB,UA8CE,oBAGE,gBAQHM,GAAWxhB,YA/OT,GA+OSA,CACtBhC,aACE,YAAuE,IAApE/E,EAAmE,EAAnEA,GAAI3F,EAA+D,EAA/DA,KACL,GADoE,EAAzDiN,QACqB6D,oBAC1B,OAAJ9Q,QAAI,IAAJA,OAAA,EAAAA,EAAMI,WAAY,eADpB,mBAAOA,EAAP,KAAiB+tB,EAAjB,KAGMP,EAAS,kBAAMxY,KAAMqY,cAE3B,OACE,eAAC,KAAD,CACER,SAAU,CAAE/hB,KAAM,GAClBgiB,WAAY,CAAEhiB,KAAM,IACpBiiB,WAAW,EACXzN,OAAO,aAJT,eAMYtjB,IAAT4D,EACC,cAAC,KAAK2L,KAAN,CAAW5L,MAAM,YAAjB,SACE,eAAC,KAAMquB,MAAP,CACEhtB,MAAOhB,EACP2T,SAAU,SAACmV,GAAD,OAAWiF,EAAYjF,EAAM1nB,OAAOJ,QAC9CitB,YAAY,QAHd,UAKE,cAAC,KAAMC,OAAP,CAAcltB,MAAM,aAApB,wBACA,cAAC,KAAMktB,OAAP,CAAcltB,MAAM,eAApB,+BAGF,KACU,eAAbhB,EACC,cAACutB,GAAD,CACEhoB,GAAIA,EACJ3F,KAAyB,gBAAf,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMI,UAA4BJ,OAAO5D,EAC/CwxB,OAAQA,IAGV,cAACC,GAAD,CACEloB,GAAIA,EACJ3F,KAAyB,kBAAf,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMI,UAA8BJ,OAAO5D,EACjDwxB,OAAQA,WCzRf,SAASW,GACdtZ,EACAC,GAEA,IAAI9I,EACA+I,EACJ,OAAQF,EAAK5T,MACX,IAAK,OACH8T,EAAU,cAACuX,GAAD,eAAczX,IACxB7I,OAAsBhQ,IAAd6Y,EAAK3T,KAAqB,WAAa,cAC/C,MACF,IAAK,OACH6T,EAAU,cAAC+Y,GAAD,eAAcjZ,IACxB7I,OAAsBhQ,IAAd6Y,EAAKjV,KAAqB,WAAa,cAInDoV,KAAMC,KAAK,CACTjJ,MACE,sBAAML,MAAO,CAAE8J,aAAc,GAAIhF,QAAS,gBAA1C,SAA6DzE,IAE/D+I,UACAI,UAAW,CAAEhB,QAAS,GACtBiB,cAAe,CAAEzJ,MAAO,CAAE8E,QAAS,SACnC4E,cAAc,EACdC,MAAM,EACNR,OAAQA,EACR1B,MAAO,qBACPzH,MAAO,CAAE4J,IAAK,MClBlB,IAAMmB,GAAS,CACblG,KAAM,CACJC,QAAS,QAEX2d,eAAgB,CACdxiB,UAAW,GAEb/E,MAAO,CACL0F,OAAO,cAAD,OAAgB8hB,KAAO,GAAvB,eACN,UAAW,CACTtb,MAAM,GAAD,OAAKkZ,KAAK,GAAV,iBAGTqC,cAAe,CACbziB,gBAAgB,GAAD,OAAKogB,KAAK,GAAV,iBAINsC,GAAyBjiB,YAAWoK,GAAXpK,CACpChC,aACE,YAAuE,IAApEuC,EAAmE,EAAnEA,QAASxH,EAA0D,EAA1DA,MACJmpB,EAAW9D,sBAAuC1uB,GACxD,EAAwC0U,mBAAS,GAAjD,mBAAO+d,EAAP,KAAqBC,EAArB,KACQhlB,EAAuBQ,IAAvBR,mBACFvD,EAAMuD,EAAmBjN,YAAY4I,EAAM5J,IAC3C2K,EAASsD,EAAmBrD,iBAAiBhB,GACnD,GAAIopB,GAAgBtoB,EAAI5E,OAAS6E,EAAO7E,OAAQ,CAE9C,IAAM9F,EAAKiO,EAAmB7D,cAAcR,GACtCwB,EAAQpB,EAAmBkpB,6BAC/BlzB,EADY,aAEN0K,EAAI5E,QACV8D,GAEFqE,EAAmBklB,eAAe/nB,GAClCT,EAAOhJ,KAAKyJ,GAGd,IAAMtB,EACJkpB,EAAetoB,EAAI5E,OACf4E,EAAIsoB,GACJroB,EAAOqoB,EAAetoB,EAAI5E,QAEhC,EAAuBqN,mBAAQ,WA4C7B,MAAO,CA3COrJ,EAAGH,MAAM5F,MAAM3C,KAAI,SAAC+C,GAChC,IAAI8L,EAA2BC,EAC/B,OAAQ/L,EAAKI,UACX,IAAK,aACH0L,EAAQ,SACRC,EAAQ,CAAEmQ,KAAM+P,KAAM,GAAIpQ,OAAQoQ,KAAM,IACxC,MACF,IAAK,YACHngB,EAAQ,OACRC,EAAQ,CAAEmQ,KAAMmQ,KAAK,GAAIxQ,OAAQwQ,KAAK,IACtC,MACF,IAAK,eAEDvgB,EADsB,cAApB9L,EAAKoB,MAAMC,KACL,SAEA,OAGR0K,EADE/L,EAAKkD,YACC,CAAEgZ,KAAM,UAAWL,OAAQ,WAE3B,CAAEK,KAAMiQ,KAAO,GAAItQ,OAAQ,WAErC,MACF,QACE,MAAM,IAAI7Z,MAAJ,gBAGV,MAAO,CACLnG,GAAImE,EAAKnE,GACTkE,MAAOkvB,GAAatpB,EAAI3F,GACxB+L,QACAD,YAGUnG,EAAGH,MAAMlF,MAAMrD,KAAI,SAACqE,GAChC,MAAO,CACLzF,GAAG,GAAD,OAAKyF,EAAKC,OAAV,YAAoBD,EAAKE,OAAzB,YAAmCF,EAAKpB,KAC1CqB,OAAQD,EAAKC,OACbC,OAAQF,EAAKE,OACbzB,MAAOuB,EAAKvB,aAMf,CACDwF,EAAcG,QAAQC,GAAMA,EAAGC,QAAU,KACzCD,EAAG9J,GACH8J,EAAGH,MAAMjF,UAjDX,mBAAOX,EAAP,KAAcU,EAAd,KAqDM4uB,EAAY,gBACS9yB,IAArBwyB,EAAS1gB,SAGb0gB,EAAS1gB,QAAQ8c,YAEnBmE,aAAW,IAAKD,EAAW,CAACvpB,EAAG9J,QAAiBO,IAAbwyB,IAwBnC,IArBA,IAoBMQ,EAAU,GAzGoD,WA0G3D1oB,GACP,IAAMjK,EAAOiK,EAAMH,EAAI5E,OAAS4E,EAAIG,GAAOF,EAAOE,EAAMH,EAAI5E,QACtD0tB,EAAa3oB,IAAQmoB,EAC3BO,EAAQ5xB,KACN,cAAC,KAAD,CACE8H,KAAK,QAELjE,KAAMguB,EAAa,UAAY,UAC/Bje,QAAS,kBAAM0d,EAAgBpoB,IAC/BuE,UACExO,EAAK+I,MAAMhF,OAAS+E,EAAcG,QAAQjJ,GACtCwQ,EAAQhG,OACPooB,EAAU,WAAOpiB,EAAQyhB,eAAkB,IAC5C,GATR,SAYGjyB,EAAKX,MAVDW,EAAKZ,MANP6K,EAAM,EAAGA,EAAMH,EAAI5E,OAAS6E,EAAO7E,OAAQ+E,IAAQ,EAAnDA,GAuBT,IAAI4oB,EAkEJ,OAjEAA,EACE,eAAC,KAAD,CAAOvjB,MAAO,CAAE0I,MAAO,SAAvB,UACsB,IAAnB2a,EAAQztB,QAAgB6E,EAAO7E,OAAS,GAAK4E,EAAI,GAAGf,MAAMhF,MACzD,eAAC,IAAMuK,SAAP,WACE,oDACCqkB,EACD,cAAC,KAAD,CAAS/tB,KAAK,gBAEd,KAOHkF,EAAI5E,OAAS6E,EAAO7E,OAAS,EAC5B,cAAC,KAAD,CACEyK,MAAM,qCACNmjB,UAAW,WACLhqB,EAAcG,QAAQC,GACxBmE,EAAmB0lB,kBAAkB7pB,EAAGC,SAExCkE,EAAmBtB,OAAO7C,EAAG9J,IAE/BizB,EAAgB,IAElBW,OAAO,MACPC,WAAW,KAXb,SAaE,cAAC,KAAD,CAAQpqB,KAAK,QAAQooB,QAAQ,EAA7B,4BAIA,KACHnoB,EAAcG,QAAQC,IAAOA,EAAGH,MAAMhF,MACrC,cAAC,KAAD,CACE8E,KAAK,QACL8L,QAAS,kBACP7L,EAAcG,QAAQC,GAClBmE,EAAmB6lB,OAAOhqB,GAC1BmE,EAAmB8lB,OAAOjqB,IALlC,wBAUE,KAEJ,cAAC,KAAD,CAAQL,KAAK,QAAQ8L,QA5FH,WACpB,IAAMvV,EAAKiO,EAAmB7D,cAAcR,GACtCoqB,EAAOtpB,EAAI5E,OAAS6E,EAAO7E,OAC3BsF,EAAQpB,EAAmBkpB,6BAC/BlzB,EACAiO,EAAmBgmB,wBAAwBrqB,GAC3CA,GAEFwB,EAAMzB,MAAQG,EAAGH,MAAM5E,QACvBqG,EAAMzB,MAAM3J,GAAKA,EACjBiO,EAAmBklB,eAAe/nB,GAClC6nB,EAAgBe,IAiFd,uBAIA,cAAC,KAAD,CAAQvqB,KAAK,QAAQjE,KAAK,UAAU+X,UAAU,EAA9C,oBAGA,cAAC,KAAD,CACE9T,KAAK,QACLjE,KAAK,UACL0K,MAAO,CAAEyc,WAAYyD,KAAM,GAAI8D,YAAa9D,KAAM,IAClD7a,QAzFW,WACf9E,GAAO0jB,YACJ3jB,KAAK,CAAEvP,QAAS2I,EAAM5J,KACtBo0B,iCAA4B7zB,GAAW,IAkFxC,uBAYF,gCACGkzB,EACD,eAAC,KAAD,WACE,cAAC,KAAD,CAAQhqB,KAAK,QAAQ8L,QAAS8d,EAA9B,8BAGA,cAAC,KAAD,CAAQ5pB,KAAK,QAAQ8L,QAAS,kBAAMmd,GAAS,CAAEltB,KAAM,OAAQsE,QAA7D,sBAGA,cAAC,KAAD,CAAQL,KAAK,QAAQ8L,QAAS,kBAAMmd,GAAS,CAAEltB,KAAM,OAAQsE,QAA7D,yBAIF,cAAC8kB,GAAD,CACEE,IAAKiE,EACL3jB,UAAWgC,EAAQuhB,eACnB3yB,GAAI8J,EAAG9J,GACP0E,QAASoF,EAAGH,MAAMjF,QAClBX,MAAOA,EACPU,MAAOA,EACP2pB,SAAS,EACTW,wBAAyB,CAAEvpB,KAAM,YAAaykB,YAAa,IAC3D1gB,MAAO,CACLkhB,WAAY,IACZ5G,OAAQ,CACNre,KAAM,QACNipB,QAAS,KACTC,QAAS,GACTC,QAAS,IAEXxB,YAAa,SAAChmB,GACZurB,GAAS,CACPltB,KAAM,OACNsE,KACA3F,KAAM2F,EAAGH,MAAMxF,KAAKgD,MAGxBmmB,YAAa,SAAC7nB,GACZitB,GAAS,CACPltB,KAAM,OACNsE,KACArE,KAAMqE,EAAGH,MAAMlE,KAAKA,EAAKC,OAAQD,EAAKE,qBAWlDytB,GAAe,SAACtpB,EAAmB3F,GACvC,OAAQA,EAAKI,UACX,IAAK,YAEL,IAAK,eACH,OAAOJ,EAAKD,MACd,IAAK,aACH,OAAO4F,EAAGH,MAAM7E,SAASZ,MAAMC,KCtQxBkwB,GAAYxjB,YAfV,CACbjH,MAAO,CACLuG,UAAW,EACX,4BAA6B,CAC3BW,OAAQ,iBACRC,aAAc,EACdC,WAAY,8BAGhB6W,UAAW,CACThR,WAAY,GACZyd,YAAa,KAIQzjB,CACvBhC,aAAS,YAA6C,IAA1CuC,EAAyC,EAAzCA,QAEV,EACE3C,IADMX,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAAYC,EAAlC,EAAkCA,cAAeC,EAAjD,EAAiDA,mBAI3ChN,EAAUwP,GAAO7G,MAAMyH,eAAgBpQ,QAC7C,EA6HJ,SAA4B0B,EAA4B1B,GACtD,IAAMszB,EAAiB,GACjBC,EAAc/jB,GAAO7G,MAAM6qB,iBAC3BC,EAA2B,OAAhBF,EAAuB,GAAKA,EAAY7iB,MACnDgjB,EAAuBxhB,mBAC3B,iBAAoB,KAAbuhB,EAAkB/xB,EAAWiyB,iBAAiBF,GAAY,KACjE,CAAC/xB,EAAY+xB,IAKf,EAA0Bzf,mBAAS,CACjChU,SAAU,EACVI,YAAa,EACbsQ,MAAO,GACP/P,QAAS,GACTgpB,WAAY,EACZlY,MAAO,EACPmiB,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,UAAU,EACVtwB,QAAS,IAXX,mBAAOonB,EAAP,KAAcL,EAAd,KAcA3c,qBAAU,WACR,IAAM0P,EAAE,uCAAG,4CAAArM,EAAA,yDAGHtH,EAAMgH,IAAEojB,YAAYnJ,EAAMlqB,QAASX,KAC1B6qB,EAAMna,QAAU+iB,GAAY5I,EAAMlqB,QAAQiJ,KAAS5J,GAJzD,iCAQkBib,QAAQgZ,IAAI,CACnCvyB,EAAWgP,MAAM,CACf3C,MAAOulB,EACPtlB,OAAQ,EACRkmB,OAAQ,CAAC,MACT7iB,WAAW,2BACNqiB,GADK,IAER30B,GAAI,CAAEo1B,GAAI,MAAO7vB,MAAOtE,OAG5B0B,EAAWgP,MAAM,CACf3C,MAAOulB,EACPtlB,OAAQ,EACRkmB,OAAQ,CAAC,MACT7iB,WAAW,2BACNqiB,GADK,IAER30B,GAAI,CAAEo1B,GAAI,KAAM7vB,MAAOtE,SAxBtB,mCAQAo0B,EARA,KAQKC,EARL,KA6BD1zB,EAAU0zB,EAAI1zB,QACjBR,KAAI,SAACsQ,GAAD,OAASA,EAAI1R,MACjB8K,OAAOuqB,EAAIzzB,QAAQR,KAAI,SAACsQ,GAAD,OAASA,EAAI1R,OACvCu1B,EAAW,CACTl0B,WAAYi0B,EAAI1zB,QAAQkE,OACxBlE,UACA8Q,MAAO4iB,EAAI5iB,MAAQ2iB,EAAI3iB,MACvBkY,WAAY0K,EAAI5iB,MAAQ4iB,EAAI1zB,QAAQkE,OACpCivB,QAASO,EAAI5iB,OAAS6hB,EACtBS,SAAUK,EAAI3iB,OAAS6hB,EACvBM,QAASS,EAAI1zB,QAAQkE,OAAS,EAC9BgvB,QAASO,EAAIzzB,QAAQkE,OAAS,GAxCzB,2BA4CK,IAAR+E,GAAcihB,EAAMiJ,QA5CjB,kCA6CapyB,EAAWgP,MAAM,CACjC3C,MAAOulB,EACPtlB,OAAQ,EACRkmB,OAAQ,CAAC,MACT7iB,WAAW,2BACNqiB,GADK,IAER30B,GAAI,CAAEo1B,GAAI,KAAM7vB,MAAOtE,OAnDtB,QA6CCq0B,EA7CD,OAsDLC,EAAW,CACTl0B,WAAYi0B,EAAI1zB,QAAQkE,OACxB8kB,WAAY0K,EAAI5iB,MAAQ4iB,EAAI1zB,QAAQkE,OACpClE,QAAS0zB,EAAI1zB,QAAQR,KAAI,SAACsQ,GAAD,OAASA,EAAI1R,MAAI8K,OAAOghB,EAAMlqB,SACvDmzB,QAASO,EAAI5iB,OAAS6hB,EACtBM,QAASS,EAAI1zB,QAAQkE,OAAS,GA3D3B,2BA6DI+E,IAAQihB,EAAMlqB,QAAQkE,OAAS,GAAMgmB,EAAMkJ,SA7D/C,kCA8DaryB,EAAWgP,MAAM,CACjC3C,MAAOulB,EACPtlB,OAAQ,EACRkmB,OAAQ,CAAC,MACT7iB,WAAW,2BACNqiB,GADK,IAER30B,GAAI,CAAEo1B,GAAI,KAAM7vB,MAAOtE,OApEtB,QA8DCo0B,EA9DD,OAuELE,EAAW,CACTl0B,WAAYwJ,EACZjJ,QAASkqB,EAAMlqB,QAAQkJ,OAAOuqB,EAAIzzB,QAAQR,KAAI,SAACsQ,GAAD,OAASA,EAAI1R,OAC3Dg1B,SAAUK,EAAI3iB,OAAS6hB,EACvBO,QAASO,EAAIzzB,QAAQkE,OAAS,GA3E3B,wBA8ELyvB,EAAW,CACTl0B,WAAYwJ,EACZiqB,QAASjqB,EAAMihB,EAAMlqB,QAAQkE,OAAS,EACtC+uB,QAAShqB,EAAM,GAjFZ,QAqFT4gB,EAAS,uCACJK,GACAyJ,GAFG,IAGN7wB,QAASonB,EAAMpnB,QAAU,EACzBiN,MAAO+iB,EACPzzB,aA1FO,4CAAH,qDA6FRud,MAEC,CAACvd,EAASyzB,IAGb,IAAMc,EAAO,SAACvmB,GACZ,GAAIhO,IAAY6qB,EAAM7qB,QAAtB,CAKA,IAAMw0B,EAAc3J,EAAMlqB,QAAQkqB,EAAMzqB,WAAa4N,QACjC1O,IAAhBk1B,GACFhlB,GAAO7G,MAAM4G,KAAK,CAAEvP,QAASw0B,GAAe,CAAE9jB,MAAO+iB,IAAYgB,SAIrE,MAAO,CAELC,gBAAiB,WACfH,GAAM,IAERI,YAAa,WACXJ,EAAK,IAEPK,SAAU/J,GA7QyCgK,CACjD/nB,EACA9M,GAFM40B,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,YAAaD,EAA/B,EAA+BA,gBAK/B7mB,qBAAU,WAERf,EAAWuD,UAAUrQ,GAAS5B,MAAK,SAACuK,QACpBrJ,IAAVqJ,GACFkE,EAAawD,UAAU1H,EAAMiG,YAK5B5B,EAAmB8nB,WAAW90B,IACjCgN,EAAmBc,MAAM,CACvBC,MAAO,IACPC,OAAQ,EACRqD,WAAY,CACV1I,MAAO3I,OAIZ,CAAC8M,EAAYD,EAAcG,EAAoBhN,IAElDqyB,aAAW,IAAKqC,EAAiB,CAACE,EAASnxB,UAC3C4uB,aAAW,IAAKsC,EAAa,CAACC,EAASnxB,UAEvC,IAAMkF,EAAQmE,EAAWxM,IAAIN,GACvB+0B,EAAmC7iB,mBAAQ,WAAO,IAAD,MAC/CvJ,EAAQmE,EAAWxM,IAAIN,GAC7B,QAAcV,IAAVqJ,GAAiC,OAAVA,EAI3B,MAAO,CACL3J,KAAM2J,EAAM3J,KACZC,YAAa0J,EAAM1J,YACnB+J,QAASL,EAAMK,QACfR,KAAMG,EAAMH,KACZ+T,QAAS,CACPC,QAAO,UAAE7T,EAAM1G,mBAAR,aAAE,EAAmB4Z,IAC5BvM,MAAK,UAAE3G,EAAM1G,mBAAR,aAAE,EAAmBqN,MAC1BpO,SAAQ,UAAEyH,EAAM1G,mBAAR,aAAE,EAAmBf,SAC7Bwb,iBAAkB/T,EAAMrG,gBAI3B,CAACtC,OAAmBV,IAAVqJ,IAEb,GAAc,OAAVA,EACF,OAAO,cAAC,IAAD,IACF,QAAcrJ,IAAVqJ,EACT,OAAO,cAAC,IAAD,IAGT,IAAIqsB,EAAe,KAIjBA,EAHGhoB,EAAmB8nB,WAAW90B,GAGlB,cAAC6xB,GAAD,CAAsClpB,MAAOA,GAAhB3I,GAF7B,cAAC,IAAD,CAAauO,UAAU,IAKxC,IAAM0mB,EAAQ,uCAAG,WAAOlnB,EAAeC,GAAtB,eAAAkD,EAAA,sEACInE,EAAce,MAAM,CACrCC,QACAC,SACAqD,WAAY,CAAE1I,MAAOA,EAAM5J,MAJd,cACXuS,EADW,yBAMRA,EAAO3Q,QAAQR,KAAI,SAAC+0B,GAAD,MAAU,CAClC70B,MAAO60B,EAAI70B,MACX60B,IAAKA,EAAIA,IAAI/0B,KAAI,SAACg1B,GAAD,MAAQ,CAAE7wB,MAAO6wB,MAClCr0B,MAAOo0B,EAAIp0B,WATE,2CAAH,wDAad,OACE,eAAC,IAAMmN,SAAP,WACE,cAAC,GAAD,CACEW,QAAS/B,EAAavM,IAAIqI,EAAMiG,SAChCjG,MAAOA,EACPysB,KAAM,CACJ,cAAC,KAAD,CAEE9gB,QAASogB,EACTpY,UAAWsY,EAAShB,QAHtB,+BACM,QAMN,cAAC,KAAD,CAEEtf,QAASqgB,EACTrY,UAAWsY,EAASf,QAHtB,2BACM,SAORwB,cACE,uBAAMlnB,UAAU,OAAhB,sBACY,IACV,8BACG,IACAymB,EAASjL,WAAaiL,EAASx0B,WAAa,EAF/C,IAEmDw0B,EAASnjB,cAKlE,qBAAKtD,UAAWgC,EAAQyW,UAAxB,SACE,eAAC,KAAD,CAAOnQ,UAAU,WAAWjO,KAAM,EAAlC,UACGwsB,EACD,cAAC9Y,GAAD,CAEEC,eAAe,EACfxT,MAAOosB,EACPrkB,MAAOukB,EACP7Y,cAAc,GAJTpc,GAMP,cAACue,GAAD,gBA4JZ,IAAM+W,GAAc,SAAChtB,GAMnB,IAAIsG,EAAUtG,EAAMsG,SAAW,IAAI9P,EAAQ,EAAG,GAAI,IAClD,OACE,cAAC,KAAD,CACEy2B,OAAQ,kBACNC,IAAQ90B,KACN8O,GAAOZ,QAAQ6mB,OAAO,CACpB5zB,UAAWyG,EAAMK,MAAMiG,YAI7BU,MACE,eAAC,KAAD,WACE,sBAAML,MAAO,CAAEiB,WAAY,KAA3B,oBACA,sBAAMjB,MAAO,CAAEoH,MAAO,UAAW8E,eAAgB,aAAjD,SACG7S,EAAMK,MAAM3J,UAInByU,SACE,eAAC,KAAD,WACE,6CACW,4BAAI7E,EAAQ5P,OADvB,OAGCsJ,EAAM+sB,iBAGXK,MAAOptB,EAAM8sB,QC5VJ,OAA0B,iC,8BCkD5B5lB,GAAS,CACpBZ,QAAS,IAAI+mB,IAAmB,CAC9BC,UAAWjmB,EACXkmB,UAAW,CAAEh0B,UAAW,UACxBi0B,QAAS,yBAEXntB,MAAO,IAAIotB,IAAQ,CACjBH,UAAWxC,GACXyC,UAAW,CAAE71B,QAAS,UACtBg2B,YAAa,CAAEtlB,MAAO,UACtBolB,QAAS,qBAEX5C,YAAa,IAAIyC,IAAmB,CAClCC,UAlBS,kBAAM,gEAmBfC,UAAW,CAAE71B,QAAS,UACtB81B,QAAS,+CAEX9pB,SAAU,IAAIiqB,IAAc,CAC1BL,UClEuB,WACzB,OACE,cAAC,IAAD,CAAK1nB,OAAQ,GAAb,SACE,cAAC,IAAD,CAAKC,UAAU,aAAaC,KAAM,QDgEpC0nB,QAAS,YACTI,OAAO,IAETC,OAAQ,IAAIF,IAAc,CACxBL,UAAWjoB,EACXmoB,QAAS,UACTI,OAAO,IAETE,SAAU,IAAIH,IAAc,CAC1BL,UAAWjoB,EACXmoB,QAAS,YACTI,OAAO,IAETG,KAAM,IAAIJ,IAAc,CAAEL,UAAWjoB,EAAUmoB,QAAS,IAAKI,OAAO,KAErE9oB,OAAekpB,QAAU9mB,GAG1B+mB,YAAY/mB,IAjEU,SACpBomB,GAEA,OAAO,SAACttB,GACN,IAAMkuB,EAAU/oB,IAAM6Y,cAAcsP,EAAWttB,GAC/C,OACE,eAAC,KAAD,CAAOmO,UAAU,WAAWxH,MAAO,CAAEyH,MAAO,QAA5C,UACE,cAAC,IAAD,CACE+f,MAAO,CACLJ,KAAM,qBAAKK,IAAKC,GAAMC,IAAI,SAC1BR,SAAU,CAAE5d,KAAM,cAACqe,GAAA,EAAD,IAAqBriB,SAAU,YACjD2hB,OAAQ,CAAE3d,KAAM,cAACse,GAAA,EAAD,IAAyBtiB,SAAU,UACnDxI,SAAU,CAAEwM,KAAM,cAACue,GAAA,EAAD,IAAqBviB,SAAU,aAEnDhF,OAAQA,GACRwnB,iBAAiB,IAEnB,qBAAK7oB,UAAU,iBAAf,SAAiCqoB,UAgDb,CAAC,UEhF7BS,IAAS7jB,OACP,cAAC9F,EAAa4pB,SAAd,CAAuB5yB,MAAOsI,EAA9B,SACE,cAAC,IAAD,CAAKuqB,YAAY,EAAM3nB,OAAQA,OAEjC6W,SAAS+Q,eAAe,SAM1Bn5B,M","file":"static/js/main.800ad317.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const THEME: \"dark\" | \"light\" = \"light\";\n\nexport const PLATFORM: \"native\" | \"web\" =\n  process.env.REACT_APP_PLATFORM === \"native\" ? \"native\" : \"web\";\n\n// url of the API server\nexport const SERVER: string =\n  process.env.REACT_APP_PLATFORM === \"native\"\n    ? (process.env.REACT_APP_API_SERVER as string)\n    : \"\";\n\n// path to the static directory for serving either local or remote css/js/assets\nexport const PUBLIC_URL: string = process.env.PUBLIC_URL;\n","import { makeObservable, observable } from \"mobx\";\nimport { SERVER } from \"../env\";\nimport {\n  Record,\n  DraftUpdateRecord,\n  DraftCreateRecord,\n  CRUDStore,\n} from \"rma-baseapp\";\n\nexport class Project implements Record<number> {\n  id: number;\n  // name of the project\n  name: string;\n  // project's description\n  description: string;\n\n  public constructor(id: number, name: string, description: string) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n\n    makeObservable(this, {\n      id: observable,\n      name: observable,\n      description: observable,\n    });\n  }\n}\n\nexport class DraftUpdateProject\n  extends Project\n  implements DraftUpdateRecord<number, Project>\n{\n  static fromProject(project: Project) {\n    return new DraftUpdateProject(\n      project.id,\n      project.name,\n      project.description\n    );\n  }\n\n  markSaved() {}\n\n  toModel(): Project | undefined {\n    return new Project(this.id, this.name, this.description);\n  }\n}\n\nexport class DraftCreateProject extends Project implements DraftCreateRecord {\n  public draftID: string;\n\n  constructor(draftID: string) {\n    super(0, \"\", \"\");\n    this.draftID = draftID;\n  }\n}\n\nexport class ProjectStore extends CRUDStore<\n  number,\n  DraftCreateProject,\n  DraftUpdateProject,\n  Project\n> {\n  constructor() {\n    super(`${SERVER}/api/project`, undefined, false);\n  }\n\n  public deserialize = (record: any): Project => {\n    return new Project(record.id, record.name, record.description);\n  };\n\n  public serializeUpdateDraft(record: DraftUpdateProject): object {\n    return {\n      id: record.name,\n      name: record.name,\n      description: record.description,\n    };\n  }\n\n  public serializeCreateDraft(record: DraftCreateProject): object {\n    return { name: record.name, description: record.description };\n  }\n}\n","import { HTMLProps } from \"react\";\n\nexport interface ContentHierarchy {\n  level: number; // level of the heading\n  heading: string; // title of the level (header)\n  contentBefore: (Text | LineBreak)[];\n  contentAfter: (Text | LineBreak)[];\n}\n\nexport interface Text {\n  value: string;\n  tags: string[];\n  id2attrs: { [id: string]: HTMLProps<HTMLAnchorElement> };\n}\n\nexport interface LineBreak {\n  nLines: number;\n}\n\nexport function isLineBreak(item: Text | LineBreak): item is LineBreak {\n  return (item as LineBreak).nLines !== undefined;\n}\n","import { SERVER } from \"../../env\";\nimport { PairKeysUniqueIndex, RStore } from \"rma-baseapp\";\nimport { TableRow } from \"./Table\";\n\nexport class TableRowStore extends RStore<number, TableRow> {\n  constructor() {\n    super(`${SERVER}/api/tablerow`, undefined, false, [\n      new PairKeysUniqueIndex(\"table\", \"index\"),\n    ]);\n  }\n\n  get tableIndex() {\n    return this.indices[0] as PairKeysUniqueIndex<\n      number,\n      number,\n      number,\n      TableRow\n    >;\n  }\n\n  /**\n   * Find rows of the table\n   *\n   * @param tableId\n   * @param start the start row\n   * @param no number of rows to return\n   * @returns\n   */\n  findByTable = (tableId: number, start: number, no: number): TableRow[] => {\n    const map = this.tableIndex.index.get(tableId);\n    if (map === undefined) return [];\n\n    const output = [];\n    for (let i = 0; i < no; i++) {\n      const rowId = map.get(i + start);\n      if (rowId === undefined) {\n        break;\n      }\n      output.push(this.records.get(rowId)!);\n    }\n    return output;\n  };\n\n  protected index(record: TableRow) {\n    this.tableIndex.add(record);\n  }\n\n  public deserialize = (record: any): TableRow => {\n    Object.values(record.links).forEach((links: any) => {\n      links.forEach((link: any) => {\n        if (link.entity !== null) {\n          link.entityId = link.entity;\n        }\n        link.candidate_entities.forEach((ce: any) => {\n          ce.entityId = ce.entity;\n          delete ce.entity;\n        });\n        link.candidateEntities = link.candidate_entities;\n        delete link.entity_id;\n        delete link.candidate_entities;\n      });\n    });\n    return record;\n  };\n}\n","import { SERVER } from \"../../env\";\nimport { SingleKeyIndex, RStore } from \"rma-baseapp\";\nimport { Table } from \"./Table\";\n\nexport class TableStore extends RStore<number, Table> {\n  constructor() {\n    super(`${SERVER}/api/table`, undefined, false, [\n      new SingleKeyIndex(\"project\"),\n    ]);\n  }\n\n  get projectIndex() {\n    return this.indices[0] as SingleKeyIndex<number, number, Table>;\n  }\n\n  /**\n   * Find tables in a project\n   *\n   * @param projectId\n   * @param start\n   * @param no number of tables to return\n   */\n  findByProject = (projectId: number, start?: number, no?: number): Table[] => {\n    return Array.from(this.projectIndex.index.get(projectId) || []).map(\n      (id) => this.records.get(id)!\n    );\n  };\n\n  public deserialize = (record: any): Table => {\n    record.contextPage = record.context_page;\n    if (\n      record.contextPage !== null &&\n      record.contextPage !== undefined &&\n      record.contextPage.entity !== null\n    ) {\n      record.contextPage.entityId = record.contextPage.entity;\n      delete record.contextPage.entity;\n    }\n    record.contextValues = record.context_values;\n    if (record.context_tree !== undefined) {\n      record.contextTree = record.context_tree.map((item: any) => {\n        item.contentBefore = item.content_before.map((x: any) => {\n          if (x.n_lines !== undefined) {\n            x.nLines = x.n_lines;\n            delete x.n_lines;\n          }\n          return x;\n        });\n        item.contentAfter = item.content_after.map((x: any) => {\n          if (x.n_lines !== undefined) {\n            x.nLines = x.n_lines;\n            delete x.n_lines;\n          }\n          return x;\n        });\n        delete item.content_before;\n        delete item.content_after;\n        return item;\n      });\n      delete record.context_tree;\n    }\n    delete record.context_tree;\n    delete record.context_values;\n    delete record.context_page;\n    return record;\n  };\n\n  protected index(record: Table) {\n    this.projectIndex.add(record);\n  }\n}\n","import { observable, toJS, action, makeObservable } from \"mobx\";\nimport { Resource } from \"../entity\";\n\nexport interface ClassNode {\n  id: string;\n  uri: string;\n  // for class node only, telling if the class is an approximation\n  approximation: boolean;\n  // readable label in form of `{label} ({qnode id})`; not obtaining from URICount.\n  label: string;\n  readonly nodetype: \"class_node\";\n}\n\nexport interface DataNode {\n  id: string;\n  // column name\n  label: string;\n  columnIndex: number;\n  readonly nodetype: \"data_node\";\n}\n\nexport type LiteralDataType = \"entity-id\" | \"string\";\n\nexport interface LiteralNode {\n  id: string;\n  /**\n   * value of this literal node, depends on the type\n   */\n  value:\n    | {\n        type: \"string\";\n        value: string;\n      }\n    | {\n        type: \"entity-id\";\n        id: string;\n        uri: string;\n      };\n  // readable name for this node\n  label: string;\n  // whether this is a node in the context, apply for literal node only\n  readonly isInContext: boolean;\n  readonly nodetype: \"literal_node\";\n}\n\nexport type SMNode = ClassNode | DataNode | LiteralNode;\nexport type SMNodeType = \"class_node\" | \"data_node\" | \"literal_node\";\n\nexport interface SMEdge {\n  source: string;\n  target: string;\n  uri: string;\n  approximation: boolean;\n  label: string;\n}\n\nexport class URICount {\n  // a map from uri of nodes to the next available number\n  private counter: { [uri: string]: number } = {};\n  private id2num: { [id: string]: number } = {};\n\n  constructor(nodes?: SMNode[]) {\n    for (let node of nodes || []) {\n      if (node.nodetype !== \"class_node\") continue;\n\n      if (this.counter[node.uri] === undefined) {\n        this.counter[node.uri] = 1;\n      }\n      this.id2num[node.id] = this.counter[node.uri];\n      this.counter[node.uri] += 1;\n    }\n  }\n\n  label = (node: SMNode) => {\n    if (this.id2num[node.id] === undefined || this.id2num[node.id] === 1) {\n      return node.label;\n    }\n    return `${node.label} ${this.id2num[node.id]}`;\n  };\n\n  nextLabel = (uri: string, label: string) => {\n    if (this.counter[uri] === undefined) {\n      return label;\n    }\n    return `${label} ${this.counter[uri]}`;\n  };\n\n  add = (node: ClassNode) => {\n    if (this.counter[node.uri] === undefined) {\n      this.counter[node.uri] = 1;\n    }\n    this.id2num[node.id] = this.counter[node.uri];\n    this.counter[node.uri] += 1;\n  };\n\n  getNum = (node: ClassNode) => {\n    return this.id2num[node.id];\n  };\n}\n\nexport class SMGraph {\n  public id: string;\n  public version: number;\n  public nodes: SMNode[];\n  public edges: SMEdge[];\n  public stale: boolean; // if it is stale\n  public nodeId2Index: { [id: string]: number } = {};\n  public column2nodeIndex: { [columnIndex: number]: number } = {};\n  public uriCount: URICount;\n\n  constructor(id: string, nodes: SMNode[], edges: SMEdge[]) {\n    this.id = id;\n    this.version = 0;\n    this.nodes = nodes;\n    this.edges = edges;\n    this.stale = false;\n\n    this.buildIndex();\n    this.uriCount = new URICount(this.nodes);\n\n    makeObservable(this, {\n      version: observable,\n      nodes: observable,\n      edges: observable,\n      stale: observable,\n      nodeId2Index: observable,\n      column2nodeIndex: observable,\n      uriCount: observable,\n      addColumnRelationship: action,\n      upsertColumnType: action,\n      upsertRelationship: action,\n      addClassNode: action,\n      addLiteralNode: action,\n      removeNode: action,\n      updateClassNode: action,\n      updateDataNode: action,\n      updateLiteralNode: action,\n      addEdge: action,\n      removeEdge: action,\n      updateEdge: action,\n    });\n  }\n\n  clone = () => {\n    const record = this.toJS();\n    return new SMGraph(this.id, record.nodes, record.edges);\n  };\n\n  onSave = () => {\n    this.stale = false;\n  };\n\n  node = (id: string) => this.nodes[this.nodeId2Index[id]];\n  hasNode = (id: string) => this.nodeId2Index[id] !== undefined;\n  nodesByURI = (uri: string) =>\n    this.nodes.filter(\n      (node) => node.nodetype === \"class_node\" && node.uri === uri\n    );\n  nodeByColumnIndex = (id: number) => this.nodes[this.column2nodeIndex[id]];\n  nodeByEntityId = (id: string) =>\n    this.nodes.filter(\n      (node) =>\n        node.nodetype === \"literal_node\" &&\n        node.value.type === \"entity-id\" &&\n        node.value.id === id\n    )[0];\n\n  edge = (source: string, target: string) =>\n    this.edges.filter((e) => e.source === source && e.target === target)[0];\n  hasEdge = (source: string, target: string) =>\n    this.edges.filter((e) => e.source === source && e.target === target)\n      .length > 0;\n  incomingEdges = (target: string) =>\n    this.edges.filter((e) => e.target === target);\n  outgoingEdges = (source: string) =>\n    this.edges.filter((e) => e.source === source);\n\n  nextNodeId = () => {\n    for (let i = 0; i < this.nodes.length * 100; i++) {\n      let nid = `c-${i}`;\n      if (this.nodeId2Index[nid] === undefined) {\n        return nid;\n      }\n    }\n    throw new Error(\"Cannot find new id for a node\");\n  };\n\n  public toJS() {\n    return {\n      nodes: toJS(this.nodes),\n      edges: toJS(this.edges),\n      nodeId2Index: toJS(this.nodeId2Index),\n    };\n  }\n\n  /** Find all paths (max 2 hops) that connect two nodes */\n  findPathMax2hops = (\n    sourceId: string,\n    targetId: string\n  ): [SMEdge, SMEdge?][] => {\n    let matchPaths: [SMEdge, SMEdge?][] = [];\n    let outedges = this.outgoingEdges(sourceId);\n    for (let outedge of outedges) {\n      if (outedge.target === targetId) {\n        matchPaths.push([outedge, undefined]);\n        continue;\n      }\n\n      for (let outedge2 of this.outgoingEdges(outedge.target)) {\n        if (outedge2.target === targetId) {\n          matchPaths.push([outedge, outedge2]);\n        }\n      }\n    }\n\n    return matchPaths;\n  };\n\n  /**\n   * Get the class node of an entity column. Undefined if the column is not an entity node\n   * @param columnIndex\n   * @returns\n   */\n  getClassIdOfColumnIndex = (columnIndex: number): string | undefined => {\n    let inedges = this.incomingEdges(this.nodeByColumnIndex(columnIndex).id);\n    for (let inedge of inedges) {\n      if (inedge.uri === \"http://www.w3.org/2000/01/rdf-schema#label\") {\n        if (inedges.length > 1) {\n          throw new Error(\n            \"Invalid semantic model. An entity column has two incoming edges\"\n          );\n        }\n        return inedge.source;\n      }\n    }\n    return undefined;\n  };\n\n  getOutgoingProperties = (id: string): [SMEdge, SMEdge?][] => {\n    let outprops: [SMEdge, SMEdge?][] = [];\n    for (let outedge of this.outgoingEdges(id)) {\n      let target = this.node(outedge.target);\n      if (\n        target.nodetype === \"class_node\" &&\n        target.uri === \"http://wikiba.se/ontology#Statement\"\n      ) {\n        for (let coutedge of this.outgoingEdges(outedge.target)) {\n          outprops.push([outedge, coutedge]);\n        }\n      } else {\n        outprops.push([outedge, undefined]);\n      }\n    }\n    return outprops;\n  };\n\n  /******************************************************************\n   * Below is a list of operators that modify the graph. The index is rebuilt/modify\n   * inside @action function\n   ******************************************************************\n   */\n\n  /**\n   * Add a link between two columns\n   *\n   * @deprecated\n   * @param sourceColumnIndex\n   * @param targetColumnIndex\n   * @param edgeData\n   */\n  public addColumnRelationship(\n    sourceColumnIndex: number,\n    targetColumnIndex: number,\n    edgeData: Omit<SMEdge, \"source\" | \"target\">\n  ) {\n    let source = this.nodeByColumnIndex(sourceColumnIndex);\n    let target = this.nodeByColumnIndex(targetColumnIndex);\n\n    let sourceIncomingEdges = this.incomingEdges(source.id);\n    if (sourceIncomingEdges.length === 0) {\n      throw new Error(\"Cannot add link from a data node to another node\");\n    }\n    if (sourceIncomingEdges.length !== 1) {\n      throw new Error(\n        \"The source column connects to multiple class nodes! Don't know the exact class node to choose\"\n      );\n    }\n\n    let targetIncomingEdges = this.incomingEdges(target.id);\n    if (targetIncomingEdges.length > 1) {\n      throw new Error(\n        \"The target column connects to multiple class nodes! Don't know the exact class node to choose\"\n      );\n    }\n\n    let realSource = sourceIncomingEdges[0].source;\n    let realTarget =\n      targetIncomingEdges.length === 0\n        ? target.id\n        : targetIncomingEdges[0].source;\n\n    this.addEdge({\n      ...edgeData,\n      source: realSource,\n      target: realTarget,\n    });\n  }\n\n  /**\n   * Upsert the type of the column: replace the type if exist otherwise, create the type including the\n   * new class node.\n   *\n   * @param columnIndex\n   * @param source\n   */\n  public upsertColumnType(columnIndex: number, source: Omit<ClassNode, \"id\">) {\n    let target = this.nodeByColumnIndex(columnIndex);\n    let targetIncomingEdges = this.incomingEdges(target.id);\n\n    if (targetIncomingEdges.length > 1) {\n      throw new Error(\n        \"The column connects to multiple class nodes! Don't know the exact class node to choose\"\n      );\n    }\n\n    if (targetIncomingEdges.length === 0) {\n      let sourceId = this.nextNodeId();\n      this.addClassNode({\n        ...source,\n        id: sourceId,\n      });\n\n      this.addEdge({\n        source: sourceId,\n        target: target.id,\n        uri: \"http://www.w3.org/2000/01/rdf-schema#label\",\n        label: \"rdfs:label\",\n        approximation: false,\n      });\n    } else {\n      let edge = targetIncomingEdges[0];\n      this.updateClassNode(edge.source, source);\n      if (edge.uri !== \"http://www.w3.org/2000/01/rdf-schema#label\") {\n        // need to update the edge as well\n        this.updateEdge(edge.source, edge.target, {\n          uri: \"http://www.w3.org/2000/01/rdf-schema#label\",\n          label: \"rdfs:label\",\n          approximation: edge.approximation,\n        });\n      }\n    }\n  }\n\n  /**\n   * Upsert the relationship between two nodes: replace the type if exist otherwise create id.\n   *\n   * This is a special function as it tight the system to Wikidata with special node of\n   * wikibase:Statement & property/qualifier. Assuming that the source node and target node\n   * always exist.\n   *\n   * @param sourceId\n   * @param targetId\n   * @param pred1\n   * @param pred2\n   */\n  public upsertRelationship(\n    sourceId: string,\n    targetId: string,\n    pred1: Resource,\n    pred2: Resource\n  ) {\n    // let source = this.node(sourceId);\n    // let target = this.node(targetId);\n\n    let matchPaths = this.findPathMax2hops(sourceId, targetId);\n\n    if (matchPaths.length === 0) {\n      // no new node, so we need to create it\n      if (pred1.uri === pred2.uri) {\n        // we just need to create one link\n        this.addEdge({\n          source: sourceId,\n          target: targetId,\n          uri: pred1.uri,\n          label: pred1.label,\n          approximation: false,\n        });\n      } else {\n        let tempid = this.nextNodeId();\n        this.addClassNode({\n          id: tempid,\n          uri: \"http://wikiba.se/ontology#Statement\",\n          label: \"wikibase:Statement\",\n          approximation: false,\n          nodetype: \"class_node\",\n        });\n        this.addEdge({\n          source: sourceId,\n          target: tempid,\n          uri: pred1.uri,\n          label: pred1.label,\n          approximation: false,\n        });\n        this.addEdge({\n          source: tempid,\n          target: targetId,\n          uri: pred2.uri,\n          label: pred2.label,\n          approximation: false,\n        });\n      }\n      return;\n    }\n\n    if (matchPaths.length > 1) {\n      throw new Error(\n        \"There are more one path between two nodes. Don't know which path to update it\"\n      );\n    }\n\n    let [edge1, edge2] = matchPaths[0];\n    this.updateEdge(edge1.source, edge1.target, {\n      uri: pred1.uri,\n      label: pred1.label,\n      approximation: false,\n    });\n    if (edge2 !== undefined) {\n      // non direct property, we need to update it as well\n      this.updateEdge(edge2.source, edge2.target, {\n        uri: pred2.uri,\n        label: pred2.label,\n        approximation: false,\n      });\n    }\n  }\n\n  /**\n   * Add a class node to the model.\n   */\n  public addClassNode(node: ClassNode) {\n    if (this.nodeId2Index[node.id] !== undefined) {\n      throw new Error(\"Duplicated id\");\n    }\n    this.nodeId2Index[node.id] = this.nodes.length;\n    this.nodes.push(node);\n    this.uriCount.add(node);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  /**\n   * Add a literal node to the model\n   */\n  public addLiteralNode(node: LiteralNode) {\n    if (this.nodeId2Index[node.id] !== undefined) {\n      throw new Error(\"Duplicated id\");\n    }\n    this.nodeId2Index[node.id] = this.nodes.length;\n    this.nodes.push(node);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public removeNode(nodeId: string) {\n    this._removeNode(nodeId);\n    this.nodes = this.nodes.filter((n) => n !== undefined);\n    this.buildIndex();\n    this.version += 1;\n    this.stale = true;\n    this.uriCount = new URICount(this.nodes);\n  }\n\n  public updateClassNode(nodeId: string, props: Partial<ClassNode>) {\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (node.nodetype !== \"class_node\") {\n      throw new Error(\n        `Invalid node type. Expected class node but get ${node.nodetype}`\n      );\n    }\n    Object.assign(node, props);\n    this.version += 1;\n    this.stale = true;\n    if (props.uri !== undefined) {\n      this.uriCount = new URICount(this.nodes);\n    }\n  }\n\n  public updateLiteralNode(nodeId: string, props: Partial<LiteralNode>) {\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (node.nodetype !== \"literal_node\") {\n      throw new Error(\n        `Invalid node type. Expected literal node but get ${node.nodetype}`\n      );\n    }\n    Object.assign(node, props);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public updateDataNode(nodeId: string, props: Partial<DataNode>) {\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (node.nodetype !== \"data_node\") {\n      throw new Error(\n        `Invalid node type. Expected data node but get ${node.nodetype}`\n      );\n    }\n    Object.assign(node, props);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public addEdge(edge: SMEdge) {\n    if (this.hasEdge(edge.source, edge.target)) {\n      throw new Error(\"Cannot have more than one edge between two nodes\");\n    }\n\n    this.edges.push(edge);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public removeEdge(sourceId: string, targetId: string) {\n    let size = this.nodes.length;\n    this._removeEdge(sourceId, targetId);\n    this.nodes = this.nodes.filter((n) => n !== undefined);\n\n    if (this.nodes.length !== size) {\n      this.buildIndex();\n      this.uriCount = new URICount(this.nodes);\n    }\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public updateEdge(source: string, target: string, props: Partial<SMEdge>) {\n    for (let i = 0; i < this.edges.length; i++) {\n      let edge = this.edges[i];\n      if (edge.source === source && edge.target === target) {\n        this.edges[i] = { ...this.edges[i], ...props };\n      }\n    }\n    this.version = (this.version || 0) + 1;\n    this.stale = true;\n  }\n\n  /**\n   * Cascading remove nodes in the graph. To avoid rebuilding the index\n   * everytime we delete a node, we replace the deleted node by undefined.\n   * A post process step is needed to filter out all undefined items in the list\n   */\n  private _removeNode = (nodeId: string) => {\n    if (\n      this.nodeId2Index[nodeId] === undefined ||\n      this.nodes[this.nodeId2Index[nodeId]] === undefined\n    ) {\n      return;\n    }\n\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (\n      node.nodetype === \"data_node\" ||\n      (node.nodetype === \"literal_node\" && node.isInContext)\n    ) {\n      // don't remove data nodes && context node;\n      return;\n    }\n\n    // remove node by mark it undefined\n    (this.nodes[nodeIndex] as any) = undefined;\n\n    // we need to remove other edges connected to this node\n    let edges = this.edges.filter(\n      (edge) => edge.source === nodeId || edge.target === nodeId\n    );\n    for (let edge of edges) {\n      this._removeEdge(edge.source, edge.target);\n    }\n  };\n\n  /**\n   * Cascading remove edges in the graph\n   */\n  private _removeEdge = (sourceId: string, targetId: string) => {\n    let edgeIndex = undefined;\n    let sourceDegree = 0;\n    let targetDegree = 0;\n\n    for (let i = 0; i < this.edges.length; i++) {\n      let edge = this.edges[i];\n      if (edge.source === sourceId && edge.target === targetId) {\n        edgeIndex = i;\n      }\n      if (edge.source === sourceId || edge.target === sourceId) {\n        sourceDegree += 1;\n      }\n      if (edge.source === targetId || edge.target === targetId) {\n        targetDegree += 1;\n      }\n    }\n\n    if (edgeIndex === undefined) {\n      return;\n    }\n\n    // remove edge\n    this.edges.splice(edgeIndex, 1);\n\n    // if a node only has one connection, so we delete it because now it is lonely, except if it is\n    // a data node\n    if (sourceDegree === 1) {\n      this._removeNode(sourceId);\n    }\n    if (targetDegree === 1) {\n      this._removeNode(targetId);\n    }\n  };\n\n  private buildIndex = () => {\n    this.nodeId2Index = {};\n    this.column2nodeIndex = {};\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      let n = this.nodes[i];\n      this.nodeId2Index[n.id] = i;\n      if (n.nodetype === \"data_node\" && n.columnIndex !== null) {\n        this.column2nodeIndex[n.columnIndex] = i;\n      }\n    }\n  };\n}\n","import {\n  CRUDStore,\n  DraftCreateRecord,\n  DraftUpdateRecord,\n  Record,\n  SingleKeyIndex,\n} from \"rma-baseapp\";\nimport { SERVER } from \"../../env\";\nimport { Table } from \"../table\";\nimport { SMEdge, SMGraph, SMNode, SMNodeType } from \"./SMGraph\";\n\nexport class SemanticModel\n  implements Record<number>, DraftUpdateRecord<number, SemanticModel>\n{\n  id: number;\n  name: string;\n  description: string;\n  version: number;\n  graph: SMGraph;\n  table: number;\n\n  constructor(\n    id: number,\n    name: string,\n    description: string,\n    version: number,\n    graph: SMGraph,\n    table: number\n  ) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n    this.version = version;\n    this.graph = graph;\n    this.table = table;\n  }\n\n  static isDraft = (\n    sm: SemanticModel | DraftSemanticModel\n  ): sm is DraftSemanticModel => {\n    return (sm as DraftSemanticModel).draftID !== undefined;\n  };\n\n  markSaved(): void {\n    this.graph.onSave();\n  }\n\n  toModel(): SemanticModel | undefined {\n    return this;\n  }\n}\n\nexport class DraftSemanticModel\n  extends SemanticModel\n  implements DraftCreateRecord\n{\n  draftID: string;\n\n  constructor(\n    draftID: string,\n    name: string,\n    description: string,\n    version: number,\n    graph: SMGraph,\n    table: number\n  ) {\n    super(-1, name, description, version, graph, table);\n    this.draftID = draftID;\n  }\n\n  /**\n   * Get a default draft model for a table\n   */\n  static getDefaultDraftSemanticModel(\n    id: string,\n    name: string,\n    table: Table,\n    description = \"\"\n  ): DraftSemanticModel {\n    const graph = new SMGraph(\n      id,\n      table.columns.map((column, index) => ({\n        id: `col-${index}`,\n        label: column,\n        columnIndex: index,\n        nodetype: \"data_node\",\n      })),\n      []\n    );\n    graph.stale = true;\n    return new DraftSemanticModel(id, name, description, 0, graph, table.id);\n  }\n}\n\nexport class SemanticModelStore extends CRUDStore<\n  number,\n  DraftSemanticModel,\n  SemanticModel,\n  SemanticModel\n> {\n  constructor() {\n    super(`${SERVER}/api/semanticmodel`, undefined, false, [\n      new SingleKeyIndex(\"table\"),\n    ]);\n  }\n\n  get tableIndex() {\n    return this.indices[0] as SingleKeyIndex<number, number, SemanticModel>;\n  }\n\n  /** Generate new draft id */\n  getNewDraftId = (table: Table): string => {\n    let i = 0;\n    while (true) {\n      const id = `draft-${i}:${table.id}`;\n      if (this.getCreateDraft(id) === undefined) {\n        return id;\n      }\n      i++;\n    }\n  };\n\n  /** Generate new semantic model name */\n  getNewSemanticModelName(table: Table): string {\n    const sms = this.findByTable(table.id);\n    const drafts = this.getDraftsByTable(table);\n\n    let idx = -1;\n    for (const sm of sms.concat(drafts)) {\n      const m = /sm-(\\d+)/.exec(sm.name);\n      if (m === null) continue;\n      if (parseInt(m[1]) >= idx) {\n        idx = Math.max(idx, parseInt(m[1]));\n      }\n    }\n    return `sm-${idx + 1}`;\n  }\n\n  /** Get all drafts of a table */\n  getDraftsByTable(table: Table): DraftSemanticModel[] {\n    const drafts = [];\n    let i = 0;\n    while (true) {\n      const id = `draft-${i}:${table.id}`;\n      const draft = this.getCreateDraft(id);\n      if (draft === undefined) {\n        break;\n      }\n      drafts.push(draft);\n      i++;\n    }\n    return drafts;\n  }\n\n  /**\n   * Find semantic models of the given table.\n   */\n  public findByTable(tableId: number): SemanticModel[] {\n    return Array.from(this.tableIndex.index.get(tableId) || []).map(\n      (id) => this.records.get(id)!\n    );\n  }\n\n  /**\n   * Remove a record (by id) from your indexes\n   */\n  protected deindex(record: SemanticModel): void {\n    for (const index of this.indices) {\n      index.remove(record);\n    }\n  }\n\n  /** Whether we have local copies of semantic models of a given table */\n  public hasByTable(tableId: number): boolean {\n    return this.tableIndex.index.has(tableId);\n  }\n\n  public deserialize = (record: any): SemanticModel => {\n    const nodes: SMNode[] = record.data.nodes.map((node: any) => {\n      const type: SMNodeType = node.type;\n      delete node.type;\n      node.nodetype = type;\n      if (type === \"data_node\") {\n        node.columnIndex = node.column_index;\n        delete node.column_index;\n      } else if (type === \"literal_node\") {\n        node.isInContext = node.is_in_context;\n        delete node.is_in_context;\n      }\n      return node;\n    });\n    const edges: SMEdge[] = record.data.edges;\n\n    let graph = new SMGraph(record.id.toString(), nodes, edges);\n    return new SemanticModel(\n      record.id,\n      record.name,\n      record.description,\n      record.version,\n      graph,\n      record.table\n    );\n  };\n\n  public serializeUpdateDraft(record: SemanticModel): object {\n    record.version += 1;\n    return {\n      table: record.table,\n      name: record.name,\n      description: record.description,\n      version: record.version,\n      data: {\n        nodes: record.graph.nodes.map((node) => {\n          switch (node.nodetype) {\n            case \"class_node\":\n              return {\n                id: node.id,\n                uri: node.uri,\n                approximation: node.approximation,\n                label: node.label,\n                type: node.nodetype,\n              };\n            case \"data_node\":\n              return {\n                id: node.id,\n                label: node.label,\n                column_index: node.columnIndex,\n                type: node.nodetype,\n              };\n            case \"literal_node\":\n              return {\n                id: node.id,\n                value: node.value,\n                label: node.label,\n                is_in_context: node.isInContext,\n                type: node.nodetype,\n              };\n          }\n        }),\n        edges: record.graph.edges.map((edge) => {\n          return {\n            source: edge.source,\n            target: edge.target,\n            uri: edge.uri,\n            approximation: edge.approximation,\n            label: edge.label,\n          };\n        }),\n      },\n    };\n  }\n\n  public serializeCreateDraft(record: DraftSemanticModel): object {\n    return this.serializeUpdateDraft(record);\n  }\n}\n","import { makeObservable, observable } from \"mobx\";\n\n/** An entity modeled according to Wikidata Qnode */\nexport class Entity {\n  public id: string;\n  public uri: string;\n  public label: MultiLingualString;\n  public readableLabel: string;\n  public aliases: MultiLingualStringList;\n  public description: MultiLingualString;\n  public properties: { [prop: string]: Statement[] };\n\n  constructor(\n    id: string,\n    uri: string,\n    label: MultiLingualString,\n    readableLabel: string,\n    aliases: MultiLingualStringList,\n    description: MultiLingualString,\n    props: { [prop: string]: Statement[] }\n  ) {\n    this.id = id;\n    this.uri = uri;\n    this.label = label;\n    this.readableLabel = readableLabel;\n    this.aliases = aliases;\n    this.description = description;\n    this.properties = props;\n\n    makeObservable(this, {\n      id: observable,\n      label: observable,\n      aliases: observable,\n      description: observable,\n      properties: observable,\n    });\n  }\n\n  /**\n   * Mapping from entity id to url to external KG\n   * @param entityId\n   */\n  static id2uri = (entityId: string): string => {\n    switch (entityId[0]) {\n      case \"Q\":\n        return `https://www.wikidata.org/wiki/${entityId}`;\n      case \"P\":\n        return `https://www.wikidata.org/wiki/Property:${entityId}`;\n      case \"L\":\n        return `https://www.wikidata.org/wiki/Lexeme:${entityId}`;\n      default:\n        return entityId;\n    }\n  };\n\n  static uri2id = (entityURI: string): string => {\n    if (entityURI.startsWith(\"https://www.wikidata.org/wiki/Property:\")) {\n      return entityURI.slice(\"https://www.wikidata.org/wiki/Property:\".length);\n    }\n    if (entityURI.startsWith(\"https://www.wikidata.org/wiki/Lexeme:\")) {\n      return entityURI.slice(\"https://www.wikidata.org/wiki/Lexeme:\".length);\n    }\n    if (entityURI.startsWith(\"https://www.wikidata.org/wiki/\")) {\n      return entityURI.slice(\"https://www.wikidata.org/wiki/\".length);\n    }\n    return entityURI;\n  };\n}\n\nexport type MultiLingualString = {\n  lang2value: { [lang: string]: string };\n  lang: string;\n};\nexport type MultiLingualStringList = {\n  lang2values: { [lang: string]: string[] };\n  lang: string;\n};\n\nexport interface Statement {\n  value: DataValue;\n  // mapping from qualifier id into data value\n  qualifiers: { [qualifier: string]: DataValue[] };\n  // order of qualifiers as dictionary lacks of order\n  qualifiersOrder: string[];\n}\n\nexport type DataValue =\n  | DataValueString\n  | DataValueTime\n  | DataValueQuantity\n  | DataValueGlobeCoordinate\n  | DataValueMonolingualText\n  | DataValueEntity;\n\nexport interface DataValueTime {\n  readonly type: \"time\";\n  value: {\n    time: string;\n    timezone: number;\n    before: number;\n    after: number;\n    precision: number;\n    calendarmodel: string;\n  };\n}\n\nexport interface DataValueQuantity {\n  readonly type: \"quantity\";\n  value: {\n    amount: string;\n    upperBound: string;\n    lowerBound: string;\n    unit: string;\n  };\n}\n\nexport interface DataValueMonolingualText {\n  readonly type: \"monolingualtext\";\n  value: {\n    text: string;\n    language: string;\n  };\n}\n\nexport interface DataValueGlobeCoordinate {\n  readonly type: \"globecoordinate\";\n  value: {\n    latitude: number;\n    longitude: number;\n    precision: number;\n    altitude: null;\n    globe: string;\n  };\n}\n\nexport interface DataValueEntity {\n  readonly type: \"entityid\";\n  value: string;\n}\n\nexport interface DataValueString {\n  readonly type: \"string\";\n  value: string;\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\n\nexport class EntitySettings {\n  // properties to show in full view\n  public _showedPropsInFullView: Set<string> = new Set();\n\n  // properties to show in popover view\n  public _showedPropsInPopoverView: Set<string> = new Set();\n\n  constructor() {\n    this._showedPropsInPopoverView.add(\"P31\");\n\n    makeObservable(this, {\n      _showedPropsInFullView: observable,\n      _showedPropsInPopoverView: observable,\n      showedPropsInFullView: computed,\n      showedPropsInPopoverView: computed,\n      setShowedPropsInFullView: action,\n      setShowedPropsInPopoverView: action,\n      addShowedPropsInFullView: action,\n      addShowedPropsInPopoverView: action,\n      removeShowedPropsInFullView: action,\n      removeShowedPropsInPopoverView: action,\n    });\n  }\n\n  get showedPropsInFullView() {\n    return Array.from(this._showedPropsInFullView);\n  }\n\n  get showedPropsInPopoverView() {\n    return Array.from(this._showedPropsInPopoverView);\n  }\n\n  setShowedPropsInFullView = (props: Set<string>) => {\n    this._showedPropsInFullView = props;\n  };\n\n  setShowedPropsInPopoverView = (props: Set<string>) => {\n    this._showedPropsInPopoverView = props;\n  };\n\n  addShowedPropsInFullView = (prop: string) => {\n    this._showedPropsInFullView.add(prop);\n  };\n\n  addShowedPropsInPopoverView = (prop: string) => {\n    this._showedPropsInPopoverView.add(prop);\n  };\n\n  removeShowedPropsInFullView = (prop: string) => {\n    this._showedPropsInFullView.delete(prop);\n  };\n\n  removeShowedPropsInPopoverView = (prop: string) => {\n    this._showedPropsInPopoverView.delete(prop);\n  };\n}\n","import { AxiosError } from \"axios\";\nimport { makeObservable, observable } from \"mobx\";\nimport { RStore } from \"rma-baseapp\";\nimport { SERVER } from \"../../env\";\nimport { Entity } from \"./Entity\";\nimport { EntitySettings } from \"./EntitySettings\";\n\nexport class EntityStore extends RStore<string, Entity> {\n  public settings: EntitySettings;\n\n  constructor() {\n    super(`${SERVER}/api/entities`, undefined, false);\n    this.settings = new EntitySettings();\n\n    makeObservable(this, {\n      settings: observable,\n    });\n  }\n\n  public deserialize = (record: any): Entity => {\n    record.readableLabel = record.readable_label;\n    delete record.readable_label;\n    for (const stmts of Object.values(record.properties)) {\n      for (let stmt of stmts as any[]) {\n        stmt.qualifiersOrder = stmt.qualifiers_order;\n        delete stmt.qualifiers_order;\n      }\n    }\n    return record;\n  };\n}\n","import { RStore, SingleKeyIndex, SingleKeyUniqueIndex } from \"rma-baseapp\";\nimport { SERVER } from \"../../env\";\n\nexport interface Property {\n  id: string;\n  uri: string;\n  label: string;\n  readableLabel: string;\n  aliases: string[];\n  description: string;\n  parents: string[];\n}\n\nexport class PropertyStore extends RStore<string, Property> {\n  constructor() {\n    super(\n      `${SERVER}/api/properties`,\n      { readableLabel: \"readable_label\" },\n      false,\n      [new SingleKeyUniqueIndex(\"uri\")]\n    );\n  }\n\n  get uriIndex() {\n    return this.indices[0] as SingleKeyUniqueIndex<string, string, Property>;\n  }\n\n  getPropertyByURI = (uri: string): Property | undefined => {\n    const id = this.uriIndex.index.get(uri);\n    return id !== undefined ? this.get(id)! : undefined;\n  };\n}\n","import { RStore, SingleKeyIndex, SingleKeyUniqueIndex } from \"rma-baseapp\";\nimport { SERVER } from \"../../env\";\n\nexport interface Class {\n  id: string;\n  uri: string;\n  label: string;\n  readableLabel: string;\n  aliases: string[];\n  description: string;\n  parents: string[];\n}\n\nexport class ClassStore extends RStore<string, Class> {\n  constructor() {\n    super(`${SERVER}/api/classes`, { readableLabel: \"readable_label\" }, false, [\n      new SingleKeyUniqueIndex(\"uri\"),\n    ]);\n  }\n\n  get uriIndex() {\n    return this.indices[0] as SingleKeyUniqueIndex<string, string, Class>;\n  }\n\n  getClassByURI = (uri: string): Class | undefined => {\n    const id = this.uriIndex.index.get(uri);\n    return id !== undefined ? this.get(id)! : undefined;\n  };\n}\n","import { Project, ProjectStore } from \"./Project\";\nimport { createContext } from \"react\";\n\nimport React from \"react\";\nimport { TableStore, TableRowStore } from \"./table\";\nimport {\n  DraftSemanticModel,\n  SemanticModel,\n  SMGraph,\n  URICount,\n  SemanticModelStore,\n  SMNode,\n} from \"./sm\";\nimport { Entity, EntityStore } from \"./entity\";\nimport { PropertyStore } from \"./ontology/PropertyStore\";\nimport { ClassStore } from \"./ontology/ClassStore\";\n\nexport const stores = {\n  projectStore: new ProjectStore(),\n  tableStore: new TableStore(),\n  tableRowStore: new TableRowStore(),\n  semanticModelStore: new SemanticModelStore(),\n  entityStore: new EntityStore(),\n  propertyStore: new PropertyStore(),\n  classStore: new ClassStore(),\n};\n(window as any)._stores = stores;\nexport type IStore = Readonly<typeof stores>;\n\nexport const StoreContext = createContext<IStore>(stores);\n\nexport function useStores(): IStore {\n  return React.useContext(StoreContext);\n}\n\nexport {\n  ProjectStore,\n  TableStore,\n  TableRowStore,\n  Project,\n  SemanticModelStore,\n  DraftSemanticModel,\n  PropertyStore,\n  ClassStore,\n  SemanticModel,\n  SMGraph,\n  URICount,\n  Entity,\n};\nexport type { Property } from \"./ontology/PropertyStore\";\nexport type { Table, TableRow } from \"./table\";\nexport type { SMEdge, SMNode } from \"./sm/SMGraph\";\n","import { Avatar, Col, List, Row, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { InternalLink } from \"rma-baseapp\";\nimport { useStores } from \"../models\";\nimport { routes } from \"../routes\";\n\nexport const HomePage = observer(() => {\n  const { projectStore } = useStores();\n\n  useEffect(() => {\n    projectStore.fetch({ limit: 100, offset: 0 });\n  }, [projectStore]);\n\n  return (\n    <React.Fragment>\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={24}>\n          <Typography.Title level={3}>Projects</Typography.Title>\n          <List\n            size=\"small\"\n            bordered={true}\n            itemLayout=\"horizontal\"\n            dataSource={projectStore.list}\n            renderItem={(project, i) => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={\n                    <Avatar\n                      shape=\"square\"\n                      size=\"large\"\n                      style={{\n                        marginTop: 4,\n                        backgroundColor: [\n                          \"#f56a00\",\n                          \"#7265e6\",\n                          \"#1890ff\",\n                          \"#00a2ae\",\n                        ][project.name.charCodeAt(0) % 4],\n                      }}\n                    >\n                      {project.name[0].toUpperCase()}\n                    </Avatar>\n                  }\n                  title={\n                    <InternalLink\n                      path={routes.project}\n                      urlArgs={{ projectId: project.id }}\n                      queryArgs={{}}\n                    >\n                      {project.name}\n                    </InternalLink>\n                  }\n                  description={project.description}\n                />\n              </List.Item>\n            )}\n          />\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n});\n","import ProTable from \"@ant-design/pro-table\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Typography } from \"antd\";\nimport _ from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { InternalLink, LoadingPage, NotFoundPage } from \"rma-baseapp\";\nimport { Table, useStores } from \"../models\";\nimport { routes } from \"../routes\";\n\nconst styles = {\n  table: {\n    \"& div.ant-table-container\": {\n      border: \"1px solid #bbb\",\n      borderRadius: 4,\n      borderLeft: \"1px solid #bbb !important\",\n    },\n    \"& div.ant-card-body\": {\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    \"& th\": {\n      fontWeight: 600,\n    },\n  },\n};\n\nexport const ProjectPage = withStyles(styles)(\n  observer(({ classes }: WithStyles<typeof styles>) => {\n    const projectId = routes.project.useURLParams()!.projectId;\n\n    const { projectStore, tableStore } = useStores();\n    useEffect(() => {\n      projectStore.fetchById(projectId);\n    }, [projectStore, projectId]);\n\n    const project = projectStore.get(projectId);\n    if (project === undefined) {\n      return <LoadingPage />;\n    } else if (project === null) {\n      return <NotFoundPage />;\n    }\n\n    const columns = [\n      { dataIndex: \"id\", title: \"id\" },\n      {\n        dataIndex: \"name\",\n        title: \"name\",\n        renderText: (text: string, tbl: ReturnType<typeof table2row>) => {\n          return (\n            <InternalLink\n              path={routes.table}\n              urlArgs={{ tableId: tbl.id }}\n              queryArgs={{\n                query: tableStore.encodeWhereQuery({ project: projectId }),\n              }}\n            >\n              {tbl.name}\n            </InternalLink>\n          );\n        },\n      },\n      { dataIndex: \"description\", title: \"description\" },\n    ];\n\n    return (\n      <React.Fragment>\n        <Typography.Title level={3}>\n          Project: {_.upperFirst(project.name)}\n        </Typography.Title>\n        <ProTable<ReturnType<typeof table2row>>\n          className={classes.table}\n          defaultSize=\"small\"\n          bordered={true}\n          request={async (params, sort, filter) => {\n            let result = await tableStore.fetch({\n              limit: params.pageSize!,\n              offset: (params.current! - 1) * params.pageSize!,\n              conditions: { project: projectId },\n            });\n            return {\n              data: result.records.map(table2row),\n              success: true,\n              total: result.total,\n            };\n          }}\n          options={{\n            search: true,\n          }}\n          headerTitle={<Typography.Title level={4}>Tables</Typography.Title>}\n          // toolBarRender={false}\n          search={false}\n          pagination={{\n            pageSize: 500,\n            pageSizeOptions: [\"10\", \"20\", \"50\", \"100\", \"200\", \"500\", \"1000\"],\n          }}\n          rowKey=\"id\"\n          columns={columns}\n        />\n      </React.Fragment>\n    );\n  })\n);\n\nfunction table2row(tbl: Table) {\n  return {\n    id: tbl.id,\n    name: tbl.name,\n    description: tbl.description,\n  };\n}\n","import { useEffect, useMemo } from \"react\";\nimport { Property, useStores } from \"../../models\";\nimport { Entity } from \"../../models/entity\";\nexport { Entity } from \"../../models/entity\";\n\n/**\n * A placeholder for an entity that has not been loaded yet.\n */\nexport interface IncompleteEntity {\n  id: string;\n  // whether the value is still fetching or not\n  doesNotExist: boolean;\n}\n\n/**\n * Type guard to check if an entity is loaded (completed)\n */\nexport function isEntityComplete(\n  entity: Entity | IncompleteEntity\n): entity is Entity {\n  return (entity as IncompleteEntity).doesNotExist === undefined;\n}\n\n/**\n * A placeholder for a property that has not been loaded yet.\n */\nexport interface IncompleteProperty {\n  id: string;\n  // will just be the property id\n  label: string;\n  // whether the value is still fetching or not\n  doesNotExist: boolean;\n}\n\n/**\n * Type guard to check if a property is loaded (completed)\n */\nexport function isPropertyComplete(\n  prop: Property | IncompleteProperty\n): prop is Property {\n  return (prop as IncompleteProperty).doesNotExist === undefined;\n}\n\nexport type ID2Prop = Record<string, Property | IncompleteProperty>;\n\n/**\n * Gather properties of an entity.\n */\nexport function useEntityProperties(entity: Entity): ID2Prop {\n  const propIds = useMemo(() => {\n    const ids: Set<string> = new Set();\n    for (const [pid, stmts] of Object.entries(entity.properties)) {\n      ids.add(pid);\n      for (const stmt of stmts) {\n        for (const qid of Object.keys(stmt.qualifiers)) {\n          ids.add(qid);\n        }\n      }\n    }\n    return Array.from(ids);\n  }, [entity.id]);\n\n  const { propertyStore } = useStores();\n\n  useEffect(() => {\n    propertyStore.batch.fetchByIds(propIds);\n  }, [entity.id]);\n\n  return Object.fromEntries(\n    propIds.map((id) => {\n      const record = propertyStore.get(id);\n      if (record) {\n        return [id, record];\n      }\n      return [id, { id, doesNotExist: record === null }];\n    })\n  );\n}\n","import { ExternalLink } from \"rma-baseapp\";\nimport { Entity } from \"./Entity\";\n\n/**\n * Render entity in a single line.\n *\n * @param entity the entity to render\n * @param noLink whether to render the entity as plain text (not clickable to open a page)\n */\nexport const InlineEntityComponent = ({\n  entity,\n  nolink = false,\n  onCtrlClick,\n  ...restprops\n}: {\n  entity: Entity;\n  nolink?: boolean;\n  onCtrlClick?: () => void;\n} & Omit<React.HTMLProps<HTMLAnchorElement>, \"href\" | \"target\" | \"rel\">) => {\n  if (nolink) {\n    return <span {...restprops}>{entity.readableLabel}</span>;\n  }\n\n  return (\n    <ExternalLink\n      href={Entity.id2uri(entity.id)}\n      openInNewPage={true}\n      onCtrlClick={onCtrlClick}\n      {...restprops}\n    >\n      {entity.readableLabel}\n    </ExternalLink>\n  );\n};\n","import { Result } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { LoadingPage } from \"rma-baseapp\";\nimport { useStores } from \"../../models\";\nimport { EntitySettings } from \"../../models/entity\";\nimport { Entity } from \"./Entity\";\n\nexport const FetchEntityComponent = observer(\n  ({\n    entityId,\n    render,\n    renderLoading,\n    renderNotFound,\n    forceWaiting = false,\n  }: {\n    entityId: string;\n    forceWaiting?: boolean;\n    render: (entity: Entity, settings: EntitySettings) => React.ReactElement;\n    renderLoading?: () => React.ReactElement;\n    renderNotFound?: () => React.ReactElement;\n  }) => {\n    const { entityStore } = useStores();\n\n    useEffect(() => {\n      entityStore.batch.fetchById(entityId);\n    }, [entityStore, entityId]);\n\n    const entity = entityStore.get(entityId);\n\n    if (entity === undefined) {\n      if (forceWaiting) {\n        if (renderLoading !== undefined) {\n          return renderLoading();\n        }\n        return <LoadingPage />;\n      }\n\n      return <span>{entityId}</span>;\n    }\n\n    if (entity === null) {\n      if (renderNotFound !== undefined) {\n        return renderNotFound();\n      }\n\n      return (\n        <Result\n          status=\"404\"\n          title=\"404\"\n          subTitle={`Entity ${entityId} does not exist`}\n        />\n      );\n    }\n\n    return render(entity, entityStore.settings);\n  }\n);\n","import { ExternalLink } from \"rma-baseapp\";\nimport { Property } from \"../../models\";\nimport { IncompleteProperty, isPropertyComplete } from \"./Entity\";\n\n/**\n * Render property in a single line.\n *\n * @param property the property to render\n * @param noLink whether to render the property as plain text (not clickable to open a page)\n */\nexport const InlinePropertyComponent = ({\n  property,\n  nolink = false,\n  showId = false,\n  ...restprops\n}: {\n  property: Property | IncompleteProperty;\n  showId?: boolean;\n  nolink?: boolean;\n} & Omit<\n  React.HTMLProps<HTMLAnchorElement>,\n  \"href\" | \"target\" | \"rel\" | \"property\"\n>) => {\n  if (!isPropertyComplete(property)) {\n    if (property.doesNotExist) {\n      return (\n        <span {...restprops}>\n          <i>Property {property.id} doesn't exist</i>\n        </span>\n      );\n    } else if (nolink) {\n      return <span {...restprops}>({property.id})</span>;\n    } else {\n      // TODO: we need to have a way to handle id & uri properly\n      // create a local page for the property? for entity add uri to part of the entity\n      return (\n        <ExternalLink href={\"\"} openInNewPage={true} {...restprops}>\n          ({property.id})\n        </ExternalLink>\n      );\n    }\n  }\n\n  if (nolink) {\n    return (\n      <span {...restprops}>\n        {property.label} ({property.id})\n      </span>\n    );\n  }\n\n  const label = showId ? `${property.label} (${property.id})` : property.label;\n\n  return (\n    <ExternalLink href={property.uri} openInNewPage={true} {...restprops}>\n      {label}\n    </ExternalLink>\n  );\n};\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { EyeOutlined, EyeInvisibleOutlined } from \"@ant-design/icons\";\nimport { Space } from \"antd\";\n\nconst styles = {\n  hide: {\n    display: \"none\",\n  },\n};\nexport const CollapsibleComponent = withStyles(styles)(\n  (\n    props: React.PropsWithChildren<\n      { collapsible: React.ReactNode } & WithStyles<typeof styles>\n    >\n  ) => {\n    const [visible, setVisible] = useState(false);\n    const toggleVisible = () => {\n      setVisible(!visible);\n    };\n    const btn = visible ? (\n      <EyeInvisibleOutlined onClick={toggleVisible} />\n    ) : (\n      <EyeOutlined onClick={toggleVisible} />\n    );\n\n    return (\n      <div>\n        <Space size={4}>\n          {props.children}\n          {btn}\n        </Space>\n        <div className={visible ? \"\" : props.classes.hide}>\n          {props.collapsible}\n        </div>\n      </div>\n    );\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Typography } from \"antd\";\nimport { toJS } from \"mobx\";\nimport { ExternalLink } from \"rma-baseapp\";\nimport { FetchEntityComponent } from \"./FetchEntityComponent\";\nimport { InlineEntityComponent } from \"./InlineEntityComponent\";\nimport { DataValue } from \"../../models/entity\";\nimport { CollapsibleComponent } from \"../element/Collapse\";\n\nconst styles = {};\n\nexport const ValueComponent = withStyles(styles)(\n  ({ value }: { value: DataValue } & WithStyles<typeof styles>) => {\n    if (value.type === \"entityid\") {\n      return (\n        <FetchEntityComponent\n          entityId={value.value}\n          render={(entity) => {\n            return <InlineEntityComponent entity={entity} />;\n          }}\n        />\n      );\n    }\n\n    if (value.type === \"time\") {\n      return (\n        <CollapsibleComponent\n          collapsible={\n            <ul>\n              <li>\n                <b>Timezone:</b> {value.value.timezone}\n              </li>\n              <li>\n                <b>From:</b> {value.value.before} - {value.value.after}\n              </li>\n              <li>\n                <b>Precision:</b> {value.value.precision}\n              </li>\n              <li>\n                <b>Calendar Model:</b>{\" \"}\n                <ExternalLink\n                  href={value.value.calendarmodel}\n                  openInNewPage={true}\n                >\n                  {value.value.calendarmodel}\n                </ExternalLink>\n              </li>\n            </ul>\n          }\n        >\n          {value.value.time}\n        </CollapsibleComponent>\n      );\n    }\n\n    if (value.type === \"quantity\") {\n      return (\n        <CollapsibleComponent\n          collapsible={\n            <ul>\n              <li>\n                <b>Bound:</b> {value.value.lowerBound} -{\" \"}\n                {value.value.upperBound}\n              </li>\n              <li>\n                <b>Unit:</b> {value.value.unit}\n              </li>\n            </ul>\n          }\n        >\n          {value.value.amount}\n        </CollapsibleComponent>\n      );\n    }\n\n    if (value.type === \"monolingualtext\") {\n      return (\n        <span>\n          {value.value.text} <i>@{value.value.language}</i>\n        </span>\n      );\n    }\n\n    if (value.type === \"globecoordinate\") {\n      return (\n        <CollapsibleComponent\n          collapsible={\n            <ul>\n              <li>\n                <b>Precision:</b> {value.value.precision}\n              </li>\n              <li>\n                <b>Globe:</b>{\" \"}\n                <ExternalLink href={value.value.globe} openInNewPage={true}>\n                  {value.value.globe}\n                </ExternalLink>\n              </li>\n            </ul>\n          }\n        >\n          <ExternalLink\n            href={`http://maps.google.com/maps?q=${value.value.latitude},${value.value.longitude}`}\n            openInNewPage={true}\n          >\n            {value.value.latitude} N,{value.value.longitude} W\n          </ExternalLink>\n        </CollapsibleComponent>\n      );\n    }\n\n    // haven't handle these types\n    if (typeof value.value === \"object\") {\n      return <span>{JSON.stringify(value.value)}</span>;\n    }\n\n    return <span>{value.value}</span>;\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Col, Row, Typography } from \"antd\";\nimport { ID2Prop, IncompleteProperty } from \"./Entity\";\nimport { Statement } from \"../../models/entity\";\nimport { InlinePropertyComponent } from \"./InlinePropertyComponent\";\nimport { ValueComponent } from \"./ValueComponent\";\n\nconst styles = {\n  qualifiers: {\n    marginLeft: 24,\n  },\n};\n\nexport const StatementComponent = withStyles(styles)(\n  ({\n    stmt,\n    classes,\n    id2prop,\n    ...restprops\n  }: {\n    id2prop: ID2Prop;\n    stmt: Statement;\n  } & WithStyles<typeof styles> &\n    React.HTMLProps<HTMLDivElement>) => {\n    const qualifiers = [];\n    for (const qid of stmt.qualifiersOrder) {\n      let qval;\n      if (stmt.qualifiers[qid].length === 0) {\n        qval = (\n          <Typography.Text type=\"secondary\" italic={true}>\n            no value\n          </Typography.Text>\n        );\n      } else {\n        qval = stmt.qualifiers[qid].map((value, valueIndex) => {\n          return (\n            <div key={valueIndex}>\n              <ValueComponent value={value} />\n            </div>\n          );\n        });\n      }\n\n      qualifiers.push(\n        <Row gutter={8} key={qid}>\n          <Col span={6}>\n            <InlinePropertyComponent property={id2prop[qid]} />\n          </Col>\n          <Col span={18}>{qval}</Col>\n        </Row>\n      );\n    }\n\n    return (\n      <div {...restprops}>\n        <div>\n          <ValueComponent value={stmt.value} />\n        </div>\n        <div className={classes.qualifiers}>{qualifiers}</div>\n      </div>\n    );\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Col, Row, Space, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { ID2Prop } from \".\";\nimport { Entity } from \"../../models/entity\";\nimport { InlinePropertyComponent } from \"./InlinePropertyComponent\";\nimport { StatementComponent } from \"./StatementComponent\";\n\nconst styles = {\n  propDivider: {\n    height: 1,\n    border: \"none\",\n    color: \"#ddd\",\n    backgroundColor: \"#ddd\",\n  },\n};\n\nexport const PropertyComponent = withStyles(styles)(\n  observer(\n    ({\n      entity,\n      id2prop,\n      filteredProps,\n      showId = false,\n      classes,\n    }: {\n      entity: Entity;\n      id2prop: ID2Prop;\n      showId?: boolean;\n      filteredProps: string[];\n    } & WithStyles<typeof styles>) => {\n      if (filteredProps.length === 0) {\n        filteredProps = Object.keys(entity.properties);\n      }\n\n      const components = [];\n      for (const pid of filteredProps) {\n        // we have undefined when entity does not have this property `pid`\n        if (entity.properties[pid] === undefined) continue;\n\n        const stmts = entity.properties[pid];\n        if (components.length > 0) {\n          components.push(\n            <hr key={`divider-${pid}`} className={classes.propDivider} />\n          );\n        }\n        components.push(\n          <Row gutter={8} key={pid}>\n            <Col span={6}>\n              <Typography.Text strong={true}>\n                <InlinePropertyComponent\n                  property={id2prop[pid]}\n                  showId={showId}\n                />\n              </Typography.Text>\n            </Col>\n            <Col span={18}>\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                {stmts.map((stmt, idx) => {\n                  return (\n                    <StatementComponent\n                      key={idx}\n                      stmt={stmt}\n                      id2prop={id2prop}\n                    />\n                  );\n                })}\n              </Space>\n            </Col>\n          </Row>\n        );\n      }\n\n      return (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }} size={2}>\n          {components}\n        </Space>\n      );\n    }\n  )\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Checkbox, Select } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { forwardRef, useImperativeHandle, useMemo, useState } from \"react\";\nimport { Entity, ID2Prop } from \"./Entity\";\n\nconst styles = {\n  root: {\n    width: 240,\n  },\n};\n\nexport const PropertyFilterComponent = withStyles(styles)(\n  observer(\n    ({\n      entity,\n      enable,\n      setEnable,\n      id2prop,\n      filteredProps,\n      addFilteredProp,\n      removeFilteredProp,\n      classes,\n    }: {\n      enable: boolean;\n      setEnable: (enable: boolean) => void;\n      entity: Entity;\n      id2prop: ID2Prop;\n      filteredProps: string[];\n      addFilteredProp: (prop: string) => void;\n      removeFilteredProp: (prop: string) => void;\n    } & WithStyles<typeof styles>) => {\n      const props = useMemo(() => {\n        return Object.keys(entity.properties).map((pid) => ({\n          label: `${id2prop[pid].label} (${pid})`,\n          value: pid,\n        }));\n      }, [id2prop, entity.id]);\n\n      return (\n        <div>\n          <Checkbox onChange={() => setEnable(!enable)} checked={enable}>\n            Enable Filtering\n          </Checkbox>\n          <Select\n            mode=\"multiple\"\n            allowClear={true}\n            options={props}\n            optionFilterProp=\"label\"\n            className={classes.root}\n            value={filteredProps}\n            onSelect={addFilteredProp as any}\n            onDeselect={removeFilteredProp as any}\n          />\n        </div>\n      );\n    }\n  )\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Modal, Space, Typography } from \"antd\";\nimport { ExternalLink } from \"rma-baseapp\";\nimport { FetchEntityComponent } from \"./FetchEntityComponent\";\nimport { Entity, useEntityProperties } from \"./Entity\";\nimport { PropertyComponent } from \"./PropertyComponent\";\nimport { PropertyFilterComponent } from \"./PropertyFilterComponent\";\nimport { useState } from \"react\";\nimport { EntitySettings } from \"../../models/entity\";\nimport { observer } from \"mobx-react\";\nconst styles = {\n  root: {\n    \"& > h2, p, span\": {\n      margin: 0,\n    },\n    minWidth: 360,\n  },\n};\n\nexport const PageEntityComponent = withStyles(styles)(\n  observer(\n    ({\n      entity,\n      settings,\n    }: { entity: Entity; settings: EntitySettings } & WithStyles<\n      typeof styles\n    >) => {\n      const id2prop = useEntityProperties(entity);\n      const [enable, setEnable] = useState<boolean>(true);\n\n      return (\n        <div>\n          <Space style={{ float: \"right\" }}>\n            <PropertyFilterComponent\n              enable={enable}\n              setEnable={setEnable}\n              entity={entity}\n              id2prop={id2prop}\n              filteredProps={settings.showedPropsInFullView}\n              addFilteredProp={settings.addShowedPropsInFullView}\n              removeFilteredProp={settings.removeShowedPropsInFullView}\n            />\n          </Space>\n          <h2>\n            <ExternalLink href={Entity.id2uri(entity.id)} openInNewPage={true}>\n              {entity.label.lang2value[entity.label.lang]}\n            </ExternalLink>\n            &nbsp;\n            <Typography.Text\n              italic={true}\n              strong={false}\n              style={{ fontSize: 14, fontWeight: 400 }}\n              copyable={{ text: entity.id }}\n            >\n              ({entity.id})\n            </Typography.Text>\n          </h2>\n          <Typography.Text type=\"secondary\">\n            {entity.aliases.lang2values[entity.aliases.lang].join(\" | \")}\n          </Typography.Text>\n          <p>{entity.description.lang2value[entity.description.lang]}</p>\n          <hr />\n          <PropertyComponent\n            entity={entity}\n            id2prop={id2prop}\n            showId={true}\n            filteredProps={enable ? settings.showedPropsInFullView : []}\n          />\n        </div>\n      );\n    }\n  )\n);\n\n/** Open a full page of entity as a modal */\nexport function openPageEntityComponent(\n  args: { entity: Entity; settings: EntitySettings } | string,\n  zIndex?: number\n) {\n  // avoid using instanceof Entity because it's going to be proxy object due to mobx\n  const isEntity = typeof args !== \"string\";\n  let content;\n  if (isEntity) {\n    content = (\n      <PageEntityComponent entity={args.entity} settings={args.settings} />\n    );\n  } else {\n    content = (\n      <FetchEntityComponent\n        entityId={args}\n        render={(entity, settings) => (\n          <PageEntityComponent entity={entity} settings={settings} />\n        )}\n      />\n    );\n  }\n\n  Modal.info({\n    icon: null,\n    content,\n    bodyStyle: { margin: -8, marginTop: -16 },\n    okButtonProps: { style: { display: \"none\" } },\n    maskClosable: true,\n    mask: true,\n    zIndex: zIndex,\n    width: \"calc(100% - 128px)\",\n    style: { top: 64 },\n  });\n}\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport UnfoldMoreIcon from \"@mui/icons-material/UnfoldMore\";\nimport { Popover, Typography } from \"antd\";\nimport React from \"react\";\nimport { ExternalLink } from \"rma-baseapp\";\nimport { EntitySettings } from \"../../models/entity\";\nimport { Entity, useEntityProperties } from \"./Entity\";\nimport { openPageEntityComponent } from \"./PageEntityComponent\";\nimport { PropertyComponent } from \"./PropertyComponent\";\n\nconst styles = {\n  root: {\n    \"& > h2, p, span\": {\n      margin: 0,\n    },\n    minWidth: 600,\n  },\n};\n\n/**\n * Showing entity in popover mode.\n *\n * To control which one to show first, set the zIndex property of the popover.\n */\nexport const PopoverEntityComponent = withStyles(styles)(\n  ({\n    entity,\n    children,\n    classes,\n    zIndex,\n    settings,\n    ...restprops\n  }: {\n    entity: Entity;\n    settings: EntitySettings;\n    zIndex?: number;\n  } & React.HTMLProps<HTMLDivElement> &\n    WithStyles<typeof styles>) => {\n    // TODO: find a way to remove this hard code\n    const id2prop = useEntityProperties(entity);\n    const content = (\n      <div {...restprops} className={`${classes.root} ${restprops.className}`}>\n        <h2>\n          <ExternalLink href={Entity.id2uri(entity.id)} openInNewPage={true}>\n            {entity.label.lang2value[entity.label.lang]}\n          </ExternalLink>\n          &nbsp;\n          <Typography.Text\n            italic={true}\n            strong={false}\n            style={{ fontSize: 14, fontWeight: 400 }}\n            copyable={{ text: entity.id }}\n          >\n            ({entity.id})\n          </Typography.Text>\n          <UnfoldMoreIcon\n            style={{ marginBottom: -2, paddingTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              openPageEntityComponent(\n                { entity, settings },\n                zIndex !== undefined ? zIndex + 1 : undefined\n              );\n            }}\n          />\n        </h2>\n        <Typography.Text type=\"secondary\">\n          {entity.aliases.lang2values[entity.aliases.lang].join(\" | \")}\n        </Typography.Text>\n        <p>{entity.description.lang2value[entity.description.lang]}</p>\n        <hr />\n        <PropertyComponent\n          id2prop={id2prop}\n          entity={entity}\n          filteredProps={settings.showedPropsInPopoverView}\n        />\n      </div>\n    );\n\n    return (\n      <Popover content={content} zIndex={zIndex}>\n        {children}\n      </Popover>\n    );\n  }\n);\n","export const Number: React.FunctionComponent<\n  {\n    value: number;\n    fractionDigits?: number;\n  } & Omit<React.HTMLProps<HTMLSpanElement>, \"title\">\n> = ({ value, fractionDigits, ...restprops }) => {\n  return (\n    <span title={value.toString()} {...restprops}>\n      {value.toFixed(fractionDigits)}\n    </span>\n  );\n};\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { blue, grey } from \"@ant-design/colors\";\nimport { useState } from \"react\";\n\nconst styles = {\n  checkboxIcon: {\n    padding: 1,\n    border: \"1px solid\",\n    borderRadius: 2,\n  },\n};\n\nexport const CheckboxIcon = withStyles(styles)(\n  ({\n    icon,\n    classes,\n    selected,\n    onChange,\n    colorSelected = blue[5],\n    colorUnselected = grey[5],\n  }: {\n    icon: IconProp;\n    selected?: boolean;\n    onChange?: (selected: boolean) => void;\n    colorSelected?: string;\n    colorUnselected?: string;\n  } & WithStyles<typeof styles>) => {\n    const [stateSelected, setStateSelected] = useState(false);\n    const toggle = () => {\n      if (selected !== undefined && onChange !== undefined) {\n        return onChange(!selected);\n      }\n      setStateSelected(!stateSelected);\n    };\n\n    const correctSelected = selected === undefined ? stateSelected : selected;\n\n    return (\n      <FontAwesomeIcon\n        icon={icon}\n        color={correctSelected ? colorSelected : colorUnselected}\n        className={classes.checkboxIcon}\n        onClick={toggle}\n      />\n    );\n  }\n);\n","import { blue, grey } from \"@ant-design/colors\";\nimport ProTable from \"@ant-design/pro-table\";\nimport { faCheck, faCheckDouble } from \"@fortawesome/free-solid-svg-icons\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Button, Modal, Space, Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { CheckboxIcon, Number } from \"../element\";\nimport {\n  FetchEntityComponent,\n  InlineEntityComponent,\n  PopoverEntityComponent,\n} from \"../entity\";\nimport * as RTable from \"./RelationalTable\";\n\nconst styles = {\n  correctCandidateEntity: {\n    color: blue[5],\n  },\n  candidateEntity: {\n    color: grey[5],\n    \"&:hover\": {\n      color: `${grey[5]} !important`,\n    },\n  },\n  candidateEntitySeeMore: {\n    color: grey[5],\n    cursor: \"pointer\",\n  },\n};\n\nexport const CandidateEntityListComponent = withStyles(styles)(\n  ({\n    record,\n    index,\n    classes,\n    topK = 3,\n  }: {\n    record: RTable.Row;\n    index: number;\n    topK?: number;\n  } & WithStyles<typeof styles>) => {\n    const [showAllCandidateModals, setShowAllCandidateModals] = useState(false);\n\n    const links = record.links[index] || [];\n    const candidateLst = [];\n    if (links.length > 0) {\n      for (let candidateEntity of links[0].candidateEntities.slice(0, topK)) {\n        const className =\n          candidateEntity.entityId === links[0].entityId\n            ? classes.correctCandidateEntity\n            : classes.candidateEntity;\n\n        candidateLst.push(\n          <div key={candidateEntity.entityId}>\n            <Space size={4}>\n              <CheckboxIcon icon={faCheck} />\n              <CheckboxIcon icon={faCheckDouble} />\n              <FetchEntityComponent\n                entityId={candidateEntity.entityId}\n                render={(entity, settings) => (\n                  <PopoverEntityComponent entity={entity} settings={settings}>\n                    <InlineEntityComponent\n                      nolink={true}\n                      entity={entity}\n                      className={className}\n                    />\n                  </PopoverEntityComponent>\n                )}\n              />\n              <span className={className}>\n                (\n                <Number\n                  value={candidateEntity.probability}\n                  fractionDigits={3}\n                />\n                )\n              </span>\n            </Space>\n          </div>\n        );\n      }\n\n      // if there is a correct entity in top K, no need to highlight, otherwise,\n      // add them to the list\n      const idx = links[0].candidateEntities.findIndex(\n        (candidate) => candidate.entityId === links[0].entityId\n      );\n      if (idx !== -1 && idx >= topK) {\n        const candidateEntity = links[0].candidateEntities[idx];\n        candidateLst.push(\n          <div key={candidateEntity.entityId}>\n            <Space size={4}>\n              <CheckboxIcon icon={faCheck} />\n              <CheckboxIcon icon={faCheckDouble} />\n              <FetchEntityComponent\n                entityId={candidateEntity.entityId}\n                render={(entity, settings) => (\n                  <span className={classes.correctCandidateEntity}>\n                    ({idx})&nbsp;\n                    <PopoverEntityComponent entity={entity} settings={settings}>\n                      <InlineEntityComponent nolink={true} entity={entity} />\n                    </PopoverEntityComponent>\n                  </span>\n                )}\n              />\n              <span className={classes.correctCandidateEntity}>\n                (\n                <Number\n                  value={candidateEntity.probability}\n                  fractionDigits={3}\n                />\n                )\n              </span>\n            </Space>\n          </div>\n        );\n      }\n\n      if (links[0].candidateEntities.length > topK) {\n        candidateLst.push(\n          <div key=\"see-more\">\n            <Typography.Text\n              className={classes.candidateEntitySeeMore}\n              onClick={() => setShowAllCandidateModals(!showAllCandidateModals)}\n            >\n              See more\n            </Typography.Text>\n          </div>\n        );\n      }\n    }\n\n    const columns: any = [\n      {\n        dataIndex: \"id\",\n        title: \"Entity\",\n        render: (entityId: string) => {\n          return (\n            <FetchEntityComponent\n              entityId={entityId}\n              render={(entity, settings) => (\n                <PopoverEntityComponent entity={entity} settings={settings}>\n                  <InlineEntityComponent nolink={true} entity={entity} />\n                </PopoverEntityComponent>\n              )}\n            />\n          );\n        },\n      },\n      {\n        dataIndex: \"score\",\n        title: \"Score\",\n        render: (score: number) => {\n          return <Number value={score} fractionDigits={5} />;\n        },\n      },\n      {\n        title: \"action\",\n        render: () => {\n          return (\n            <Space size={4}>\n              <Button>Select</Button>\n            </Space>\n          );\n        },\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        {candidateLst}\n        <Modal\n          title=\"Candidate Entities\"\n          visible={showAllCandidateModals}\n          style={{ top: 20 }}\n          bodyStyle={{ padding: 0 }}\n          width={\"60%\"}\n          onOk={() => setShowAllCandidateModals(false)}\n          onCancel={() => setShowAllCandidateModals(false)}\n        >\n          <ProTable\n            defaultSize=\"small\"\n            bordered={true}\n            search={false}\n            pagination={{\n              pageSize: 20,\n              pageSizeOptions: [\"20\", \"50\", \"100\", \"200\", \"500\", \"1000\"],\n            }}\n            rowKey=\"id\"\n            columns={columns}\n            request={async (params, sort, filter) => {\n              return Promise.resolve({\n                total: links.length > 0 ? links[0].candidateEntities.length : 0,\n                success: true,\n                data:\n                  links.length === 0\n                    ? []\n                    : links[0].candidateEntities\n                        .slice(\n                          (params.current! - 1) * params.pageSize!,\n                          params.current! * params.pageSize!\n                        )\n                        .map((candidateEntity, index) => ({\n                          id: candidateEntity.entityId,\n                          score: candidateEntity.probability,\n                        })),\n              });\n            }}\n          ></ProTable>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n);\n","import * as RTable from \"./RelationalTable\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport {\n  FetchEntityComponent,\n  openPageEntityComponent,\n  PopoverEntityComponent,\n} from \"../entity\";\nimport { grey } from \"@ant-design/colors\";\nimport { CandidateEntityListComponent } from \"./CandidateEntityListComponent\";\nimport { ExternalLink } from \"rma-baseapp\";\n\nconst styles = {\n  link: {\n    textDecoration: \"underline\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n  noEntityLink: {\n    color: grey[5],\n    \"&:hover\": {\n      color: grey[5],\n    },\n  },\n};\n\nexport const CellComponent = withStyles(styles)(\n  ({\n    cell,\n    record,\n    index,\n    classes,\n    topK = 3,\n  }: {\n    cell: string;\n    record: RTable.Row;\n    index: number;\n    topK?: number;\n  } & WithStyles<typeof styles>) => {\n    const links = record.links[index] || [];\n    let components = links.flatMap((link, index) => {\n      let prefix =\n        index === 0\n          ? cell.substring(0, link.start)\n          : cell.substring(links[index - 1].end, link.start);\n      let linksurface = cell.substring(link.start, link.end);\n      let onCtrlClick = undefined;\n      if (link.entityId !== undefined) {\n        onCtrlClick = () => {\n          openPageEntityComponent(link.entityId!);\n        };\n      }\n      const infix = (\n        <ExternalLink\n          key={index}\n          href={link.url}\n          openInNewPage={true}\n          dangerouslySetInnerHTML={{\n            __html: linksurface.trim() === \"\" ? \"&blank;\" : linksurface,\n          }}\n          className={\n            classes.link +\n            (link.entityId === undefined ? \" \" + classes.noEntityLink : \"\")\n          }\n          style={link.entityId === null ? { color: \"#aaa\" } : {}}\n          onCtrlClick={onCtrlClick}\n        />\n      );\n\n      if (link.entityId === undefined) {\n        return [prefix, infix];\n      }\n\n      // reassign to infix somehow killing the application\n      const wrappedInfix = (\n        <FetchEntityComponent\n          key={index}\n          entityId={link.entityId}\n          render={(entity, settings) => (\n            <PopoverEntityComponent\n              entity={entity}\n              zIndex={500}\n              settings={settings}\n            >\n              {infix}\n            </PopoverEntityComponent>\n          )}\n          renderNotFound={() => (\n            <span className={classes.noEntityLink}>{infix}</span>\n          )}\n        />\n      );\n\n      return [prefix, wrappedInfix];\n    });\n\n    if (links.length === 0) {\n      components.push(cell);\n    } else {\n      components.push(cell.substring(links[links.length - 1].end));\n    }\n\n    return (\n      <div>\n        {components}\n        <CandidateEntityListComponent\n          record={record}\n          index={index}\n          topK={topK}\n        />\n      </div>\n    );\n  }\n);\n","import ProTable from \"@ant-design/pro-table\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Descriptions, Typography } from \"antd\";\nimport { toJS } from \"mobx\";\nimport React from \"react\";\nimport { ExternalLink } from \"rma-baseapp\";\nimport { isLineBreak, LineBreak, Text } from \"../../models/table/TableContext\";\nimport {\n  FetchEntityComponent,\n  InlineEntityComponent,\n  openPageEntityComponent,\n  PopoverEntityComponent,\n} from \"../entity\";\nimport { CellComponent } from \"./CellComponent\";\nimport * as RTable from \"./RelationalTable\";\nimport { tableStyles } from \"./styles\";\n\nexport const styles = {\n  table: tableStyles,\n};\n\nexport const TableComponent = withStyles(styles)(\n  ({\n    table,\n    query,\n    classes,\n    toolBarRender,\n    showRowIndex = false,\n  }: {\n    table: RTable.Table;\n    query: (limit: number, offset: number) => Promise<RTable.Row[]>;\n    toolBarRender?: false;\n    showRowIndex?: boolean;\n  } & WithStyles<typeof styles>) => {\n    const columns = table.columns.map((col, columnIndex) => ({\n      dataIndex: [\"row\", columnIndex, \"value\"],\n      title: col,\n      render: ((value: string, record: RTable.Row) => {\n        return (\n          <CellComponent cell={value} record={record} index={columnIndex} />\n        );\n      }) as any,\n    }));\n\n    if (showRowIndex) {\n      columns.splice(0, 0, {\n        title: (\n          <Typography.Text type=\"secondary\" disabled={true}>\n            #\n          </Typography.Text>\n        ),\n        dataIndex: \"index\",\n      } as any);\n    }\n\n    return (\n      <React.Fragment>\n        <ProTable\n          className={classes.table}\n          defaultSize=\"small\"\n          bordered={true}\n          request={async (params, sort, filter) => {\n            let records = await query(\n              params.pageSize!,\n              (params.current! - 1) * params.pageSize!\n            );\n            return {\n              data: records,\n              success: true,\n              total: table.size,\n            };\n          }}\n          search={false}\n          pagination={{\n            pageSize: 5,\n            pageSizeOptions: [\n              \"5\",\n              \"10\",\n              \"20\",\n              \"50\",\n              \"100\",\n              \"200\",\n              \"500\",\n              \"1000\",\n            ],\n          }}\n          headerTitle={\n            table.context.webpage !== undefined ? (\n              <ExternalLink href={table.context.webpage} openInNewPage={true}>\n                {table.name}\n              </ExternalLink>\n            ) : (\n              table.name\n            )\n          }\n          toolBarRender={toolBarRender}\n          rowKey=\"index\"\n          columns={columns}\n        />\n        <TableInformation table={table} />\n      </React.Fragment>\n    );\n  }\n);\n\nexport const TableInformation: React.FunctionComponent<{\n  table: RTable.Table;\n}> = ({ table }) => {\n  const info: [string, React.ReactNode][] = [\n    [\"Description\", table.description],\n  ];\n\n  if (table.context.webpage !== undefined) {\n    info.push([\n      \"From website\",\n      <ExternalLink href={table.context.webpage} openInNewPage={true}>\n        {table.context.title}\n      </ExternalLink>,\n    ]);\n  } else {\n    info.push([\"From website\", \"N/A\"]);\n  }\n  info.push([\n    \"Associated Entity\",\n    table.context.entityId !== undefined ? (\n      <FetchEntityComponent\n        entityId={table.context.entityId}\n        render={(entity, settings) => (\n          <PopoverEntityComponent\n            entity={entity}\n            zIndex={500}\n            settings={settings}\n          >\n            <InlineEntityComponent\n              entity={entity}\n              onCtrlClick={() => {\n                openPageEntityComponent({ entity, settings });\n              }}\n            />\n          </PopoverEntityComponent>\n        )}\n        renderNotFound={() => (\n          <span>`Entity ${table.context.entityId} does not exist`</span>\n        )}\n      />\n    ) : (\n      \"N/A\"\n    ),\n  ]);\n\n  let content = (table.context.contentHierarchy || []).flatMap(\n    (hierarchy, index) => {\n      if (hierarchy.level === 0 && hierarchy.heading.trim().length === 0) {\n        if (\n          hierarchy.contentBefore.every(isLineBreak) &&\n          hierarchy.contentAfter.length === 0\n        ) {\n          return [];\n        }\n      }\n      const output = [\n        <p key={`${index}-head`}>\n          <b>\n            {\"#\".repeat(hierarchy.level)} {hierarchy.heading}\n          </b>\n        </p>,\n      ];\n      return output\n        .concat(ContentComponent(`${index}-before`, hierarchy.contentBefore))\n        .concat(ContentComponent(`${index}-after`, hierarchy.contentAfter));\n    }\n  );\n  info.push([\n    \"Content Hierarchy\",\n    content.length > 0 ? <div>{content}</div> : \"N/A\",\n  ]);\n\n  return (\n    <Descriptions title=\"Table Info\" size=\"small\">\n      {info.map(([label, value]) => (\n        <Descriptions.Item key={label} label={label}>\n          {value}\n        </Descriptions.Item>\n      ))}\n    </Descriptions>\n  );\n};\n\nconst ContentComponent = (key: string, lines: (Text | LineBreak)[]) => {\n  const comps: string[][] = [[]];\n  for (const line of lines) {\n    if (isLineBreak(line)) {\n      comps.push([]);\n    } else {\n      comps[comps.length - 1].push(line.value);\n    }\n  }\n  return comps\n    .filter((lst) => lst.length > 0)\n    .map((lst, i) => <p key={`${key}-${i}`}>{lst}</p>);\n};\n","/** Table styles applied to all tables */\nexport const tableStyles = {\n  width: \"100%\",\n  \"& div.ant-table-container\": {\n    border: \"1px solid #bbb\",\n    borderRadius: 4,\n    borderLeft: \"1px solid #bbb !important\",\n  },\n  \"& div.ant-card-body\": {\n    paddingLeft: 0,\n    paddingRight: 0,\n  },\n  \"& th\": {\n    fontWeight: 600,\n  },\n  \"& .ant-table-cell\": {\n    verticalAlign: \"top\",\n  },\n};\n","/** A utility to discard responses out of order */\nexport class SequentialFuncInvoker {\n  private timer: number = 0;\n\n  public exec<T>(fn: () => Promise<T>): Promise<T | undefined> {\n    this.timer += 1;\n    let calledAt = this.timer;\n\n    return fn().then((result: any) => {\n      if (calledAt < this.timer) {\n        return undefined;\n      }\n\n      return result;\n    });\n  }\n}\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Select } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { SequentialFuncInvoker } from \"../../misc\";\nimport { useStores } from \"../../models\";\n\nconst styles = {\n  selection: {\n    width: \"100%\",\n  },\n};\n\ntype SearchProps = {\n  value?: string | string[];\n  onDeselect?: (value: string) => void;\n  onSelect?: (value: string) => void;\n  mode?: \"multiple\" | \"tags\";\n} & WithStyles<typeof styles>;\n\nexport const OntPropSearchComponent = withStyles(styles)(\n  observer((props: SearchProps) => {\n    return useSearchComponent(\"propertyStore\", props);\n  })\n);\n\nexport const OntClassSearchComponent = withStyles(styles)(\n  observer((props: SearchProps) => {\n    return useSearchComponent(\"classStore\", props);\n  })\n);\n\nexport const EntitySearchComponent = withStyles(styles)(\n  observer((props: SearchProps) => {\n    return useSearchComponent(\"entityStore\", props);\n  })\n);\n\nfunction useSearchComponent(\n  storeName: \"propertyStore\" | \"classStore\" | \"entityStore\",\n  props: SearchProps\n) {\n  const store = useStores()[storeName];\n  const seqInvoker = new SequentialFuncInvoker();\n\n  // when the provided value is not in the store, fetch it\n  useEffect(() => {\n    if (props.value === undefined) {\n      return;\n    }\n\n    if (Array.isArray(props.value)) {\n      // leverage the fact that the three stores are not re-fetched\n      if (!store.refetch) {\n        store.fetchByIds(props.value);\n      } else {\n        store.fetchByIds(props.value.filter((id) => !store.records.has(id)));\n      }\n    } else if (store.get(props.value) === undefined) {\n      store.fetchById(props.value);\n    }\n  }, [props.value]);\n\n  // gather all options already in the store, leverage the fact\n  // that property store is readonly\n  const options = useMemo(() => {\n    const options = [];\n    for (const r of store.iter()) {\n      options.push({\n        value: r.id,\n        label: r.readableLabel,\n      });\n    }\n    return options;\n  }, [store.records.size]);\n\n  // search for additional properties if it's not in the list\n  const onSearch = (query: string) => {\n    if (query === \"\") return;\n    seqInvoker.exec(() => {\n      return store.fetchById(query).then(() => 1);\n    });\n  };\n\n  return (\n    <Select\n      mode={props.mode}\n      allowClear={true}\n      options={options}\n      optionFilterProp=\"label\"\n      className={props.classes.selection}\n      showSearch={true}\n      onSearch={onSearch}\n      value={props.value}\n      onSelect={props.onSelect as any}\n      onDeselect={props.onDeselect as any}\n    />\n  );\n}\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Descriptions } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { useStores } from \"../../models\";\nimport { OntPropSearchComponent } from \"./OntSearchComponent\";\n\nconst styles = {};\n\nexport const EntitySettingComponent = withStyles(styles)(\n  observer(({ classes }: {} & WithStyles<typeof styles>) => {\n    const { entityStore } = useStores();\n\n    return (\n      <Descriptions title=\"Entity Settings\" size=\"small\" column={1}>\n        <Descriptions.Item label=\"Properties (full view)\">\n          <OntPropSearchComponent\n            mode=\"multiple\"\n            value={entityStore.settings.showedPropsInFullView}\n            onSelect={entityStore.settings.addShowedPropsInFullView}\n            onDeselect={entityStore.settings.removeShowedPropsInFullView}\n          />\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Properties (popover view)\">\n          <OntPropSearchComponent\n            mode=\"multiple\"\n            value={entityStore.settings.showedPropsInPopoverView}\n            onSelect={entityStore.settings.addShowedPropsInPopoverView as any}\n            onDeselect={\n              entityStore.settings.removeShowedPropsInPopoverView as any\n            }\n          />\n        </Descriptions.Item>\n      </Descriptions>\n    );\n  })\n);\n","import { WordWrap } from \"./wordwrap\";\nimport G6, {\n  ModelConfig,\n  ShapeStyle,\n  IGroup,\n  IShape,\n  LabelStyle,\n} from \"@antv/g6\";\nimport { ParagraphRenderedUnit } from \"./wordwrap/model\";\n\n/** Draw paragraph */\nexport function drawText(\n  group: IGroup,\n  wordwrap: WordWrap,\n  units: ParagraphRenderedUnit[],\n  {\n    xoffset,\n    yoffset,\n    cfg,\n    stroke,\n  }: {\n    xoffset?: number;\n    yoffset?: number;\n    cfg?: LabelStyle;\n    // whether to draw a small border around the text for better visibility\n    stroke?: { width: number; color: string };\n  }\n): IShape[] {\n  xoffset = xoffset === undefined ? 0 : xoffset;\n  yoffset = yoffset === undefined ? 0 : yoffset;\n\n  if (stroke !== undefined) {\n    units.map(({ text, x, y }) => {\n      group!.addShape(\"text\", {\n        attrs: {\n          text,\n          x: x + xoffset!,\n          y: y + yoffset!,\n          fontFamily: wordwrap.fontFamily,\n          ...cfg,\n          // override the three important styles to draw a border around the text\n          fill: stroke.color,\n          stroke: stroke.color,\n          lineWidth: stroke.width,\n        },\n        name: \"bg-text\",\n        draggable: true,\n      });\n    });\n  }\n\n  return units.map(({ text, x, y }) => {\n    return group!.addShape(\"text\", {\n      attrs: {\n        text,\n        fill: \"black\",\n        x: x + xoffset!,\n        y: y + yoffset!,\n        fontFamily: wordwrap.fontFamily,\n        ...cfg,\n      },\n      name: \"text\",\n      draggable: true,\n    });\n  });\n}\n\n/**\n * Type of each rect node.\n */\nexport interface RectConfig extends ModelConfig {\n  label: string;\n  // width of the rectangle\n  size: number;\n  style: ShapeStyle & {\n    // padding\n    paddingHeight?: number;\n    paddingWidth?: number;\n  };\n  labelCfg?: { style: LabelStyle };\n}\n\nexport function registerRectNode(wordwrap: WordWrap) {\n  const defaultWidth = wordwrap.getApproximateWidth(4);\n  // TODO: fix x and y as well as position of the text\n  const draw = (cfg: RectConfig, group: IGroup): IShape => {\n    const wp = cfg.style.paddingWidth || 0;\n    const hp = cfg.style.paddingHeight || 0;\n    const { units, width, height } = wordwrap.wrapText(\n      cfg.label,\n      cfg.size || defaultWidth,\n      \"center\"\n    );\n\n    // draw shape\n    const shape = group!.addShape(\"rect\", {\n      attrs: {\n        // x,\n        // y,\n        width: width + wp * 2,\n        height: height + hp * 2,\n        ...cfg.style,\n      },\n      name: \"rect\",\n    });\n\n    // draw text\n    drawText(group, wordwrap, units, {\n      xoffset: wp,\n      yoffset: hp,\n      cfg: cfg.labelCfg?.style,\n    });\n    return shape;\n  };\n\n  G6.registerNode(\n    \"rect-wrap\",\n    {\n      draw: (cfg?: ModelConfig, group?: IGroup) => {\n        return draw(cfg! as RectConfig, group!);\n      },\n\n      // call everything state is changed so we can update the shape\n      // currently clear and re-draw it, but we could do better\n      setState(name, value, node) {\n        const cfg = node!._cfg!;\n        const model = cfg.model!;\n        const states = cfg.states!;\n        let styles: any = {};\n        let labelStyles = { ...model.labelCfg?.style };\n\n        for (const [name, prop] of Object.entries(model.style!)) {\n          if (typeof prop === \"object\") {\n            continue;\n          }\n          styles[name] = prop;\n        }\n        for (const state of states) {\n          for (const [name, prop] of Object.entries(\n            cfg.styles![state] as object\n          )) {\n            if (name === \"label\") {\n              Object.assign(labelStyles, prop);\n            } else {\n              styles[name] = prop;\n            }\n          }\n        }\n\n        const group = cfg.group!;\n        group.clear();\n        draw(\n          {\n            label: model.label as string,\n            size: model.size as number,\n            style: styles,\n            labelCfg: { style: labelStyles },\n          },\n          group\n        );\n      },\n    },\n    \"single-node\"\n  );\n\n  return wordwrap;\n}\n","import G6, {\n  IGroup,\n  ILabelConfig,\n  IShape,\n  LabelStyle,\n  ModelConfig,\n  ShapeStyle,\n} from \"@antv/g6\";\nimport { drawText } from \"./RectNode\";\nimport { WordWrap } from \"./wordwrap\";\n\n/**\n * Type of each circle node.\n */\nexport interface CircleConfig {\n  label: string;\n  style: ShapeStyle & {\n    padding?: number;\n    paddingWidth?: number;\n    paddingHeight?: number;\n  };\n  labelCfg?: { offset: number; style: LabelStyle };\n}\n\nexport function registerCircleNode(wordwrap: WordWrap) {\n  const defaultWidth = wordwrap.getApproximateWidth(4);\n\n  const draw = (cfg: CircleConfig, group: IGroup): IShape => {\n    const padding = cfg.style.padding || 8;\n    const labelPosition: string = \"below\";\n    const labelOffset = cfg.labelCfg?.offset || 0;\n\n    if (labelPosition === \"inside\") {\n      // render text inside circle\n      const { units, radius } = wordwrap.wrapTextCircle(cfg.label, 256);\n      const shape = group!.addShape(\"circle\", {\n        attrs: {\n          // x: cfg.x,\n          // y: cfg.y,\n          r: radius + padding,\n          ...cfg.style,\n        },\n        name: \"circle\",\n      });\n      drawText(group, wordwrap, units, {\n        xoffset: 0,\n        yoffset: 0,\n        cfg: cfg.labelCfg?.style,\n      });\n      return shape;\n    }\n\n    // render text below circle\n    const { units, width } = wordwrap.wrapText(\n      cfg.label as string,\n      defaultWidth,\n      \"center\"\n    );\n    const defaultRadius = 10;\n    const shape = group!.addShape(\"circle\", {\n      attrs: {\n        // x: cfg.x,\n        // y: cfg.y,\n        r: defaultRadius,\n        ...cfg.style,\n      },\n      name: \"circle\",\n    });\n\n    drawText(group, wordwrap, units, {\n      xoffset: -width / 2,\n      yoffset: defaultRadius + labelOffset,\n      cfg: cfg?.labelCfg?.style,\n      stroke: { color: \"white\", width: 4 },\n    });\n    return shape;\n  };\n\n  G6.registerNode(\n    \"circle-wrap\",\n    {\n      draw: (cfg?: ModelConfig, group?: IGroup): IShape => {\n        return draw(cfg! as CircleConfig, group!);\n      },\n    },\n    \"single-node\"\n  );\n\n  return wordwrap;\n}\n","import { Paragraph, ParagraphUnit } from \"./model\";\n\nconst cacheFn = <F extends (...args: any) => any>(\n  fn: F,\n  cache: { [key: string]: ReturnType<F> }\n): F => {\n  return ((...args: any) => {\n    const key = args.join(\":\");\n    if (cache[key] === undefined) {\n      cache[key] = fn(...args);\n    }\n    return cache[key];\n  }) as unknown as F;\n};\n\n/**\n * Optimize paragraph to fit lines.\n *\n * Using a score function similar to Knuth-Plass algorithm. Differences:\n * 1. badness of a line is change to <adjustment_ratio>^3, not 100 * <adjustment_ratio>^3 to avoid\n *    making a number too big\n * 2. the ability to brea, super long word (no glue). the <adjustment_ratio> is undefined in Knuth-Plass algorithm, making\n *    badness becomes infinity. Hence, the algorithm avoids breaking it at all cost. We set the glue size to be 0.1 so that\n *    the badness is finite.\n */\nexport class ParagraphOptimizer {\n  protected paragraph: ParagraphUnit[];\n  protected getDesiredLineLength: (i: number) => number;\n  protected cacheLineLengths: { [key: string]: number } = {};\n  protected cacheLineDemerits: { [key: string]: number } = {};\n  protected cacheParagraphDemerits: { [key: string]: number } = {};\n  protected cacheParagraphBreakpoints: {\n    [key: string]: { breakpoints: number[]; demerits: number };\n  } = {};\n\n  constructor(paragraph: Paragraph) {\n    this.paragraph = paragraph.units.map((item) => {\n      item = Object.assign({}, item);\n      item.width = item.width / 16;\n      if (item.type === \"glue\") {\n        item.stretch = item.stretch / 16;\n        item.shrink = item.shrink / 16;\n      }\n      return item;\n    });\n    this.getDesiredLineLength = (i: number) => paragraph.getLineLength(i) / 16;\n  }\n\n  /**\n   * Optimize a paragraph by minimizing a score (demerits) similar to the one defined by Knuth-Plass algorithm\n   *\n   * Example: optimize returns breakpoints [4, 8] meaning it creates 3 lines:\n   * [0, 4], [5, 8], [9, <paragraph.length - 1>]\n   *\n   * @see this.optimizeParagraph for more information\n   */\n  optimize = () => {\n    return this.optimizeParagraph(0, this.paragraph.length - 1, 0);\n  };\n\n  /**\n   * Optimize a (sub) paragraph from [start, end] (inclusive) by minimizing the predefined score\n   *\n   * Example: optimizeParagraph(0, 15, 0) returns breakpoints [4, 8] meaning it creates 3 lines:\n   * [0, 4], [5, 8], [9, 15]\n   *\n   * @param start\n   * @param end (inclusive)\n   * @param nPreviousLines the number of lines of previous paragraphs\n   *\n   * @returns breakpoints & the score (demerits)\n   */\n  optimizeParagraph = cacheFn(\n    (\n      start: number,\n      end: number,\n      nPreviousLines: number\n    ): { breakpoints: number[]; demerits: number } => {\n      const lineAdjustment = this.computeLineAdjustment(\n        start,\n        end,\n        nPreviousLines // base 0\n      );\n      if (lineAdjustment !== undefined && lineAdjustment >= 0) {\n        // this paragraph can fit in a whole line -- no need to break it up\n        return {\n          breakpoints: [],\n          demerits: this.computeLineDemerits(start, end, nPreviousLines),\n        };\n      }\n\n      const optimalSplit = {\n        caret: -1,\n        demerits: Infinity,\n        breakpoints: [] as number[],\n      };\n\n      // work incrementally from right to left -- but only consider breaking points\n      for (let caret = end - 1; caret > start; caret--) {\n        if (this.paragraph[caret].type === \"box\") continue;\n\n        const prevParagraphBreakpoints = this.optimizeParagraph(\n          start,\n          caret,\n          nPreviousLines\n        );\n        const nextParagraphBreakpoints = this.optimizeParagraph(\n          caret + 1,\n          end,\n          nPreviousLines +\n            (prevParagraphBreakpoints.breakpoints.length > 0\n              ? prevParagraphBreakpoints.breakpoints.length + 1\n              : 0)\n        );\n\n        if (\n          prevParagraphBreakpoints.demerits +\n            nextParagraphBreakpoints.demerits <\n          optimalSplit.demerits\n        ) {\n          optimalSplit.caret = caret;\n          optimalSplit.demerits =\n            prevParagraphBreakpoints.demerits +\n            nextParagraphBreakpoints.demerits;\n          optimalSplit.breakpoints =\n            prevParagraphBreakpoints.breakpoints.slice();\n          optimalSplit.breakpoints.push(caret);\n          optimalSplit.breakpoints = optimalSplit.breakpoints.concat(\n            nextParagraphBreakpoints.breakpoints\n          );\n        }\n      }\n\n      return {\n        breakpoints: optimalSplit.breakpoints,\n        demerits: optimalSplit.demerits,\n      };\n    },\n    this.cacheParagraphBreakpoints\n  );\n\n  /**\n   * Compute length of units from [start, end] (inclusive) if rendered in a single line.\n   * We only count items that are box, glue & only the penalty if it's the last item as penalties\n   * won't be rendered in the line.\n   *\n   * @param start\n   * @param end -- inclusive\n   */\n  computeLineLength = cacheFn((start: number, end: number) => {\n    let len = 0;\n    for (let i = start; i < end; i++) {\n      if (this.paragraph[i].type === \"penalty\") continue;\n\n      len += this.paragraph[i].width;\n    }\n\n    // add the width of the last penalty item only if break is forced (break words are added hyphen)\n    if (this.paragraph[end].type === \"penalty\") {\n      // hyphen will have a non zero width\n      len += this.paragraph[end].width;\n    }\n    return len;\n  }, this.cacheLineLengths);\n\n  /**\n   * Compute the elasticity of a line of units from [start, end] (inclusive)\n   * @param start\n   * @param end -- inclusive\n   */\n  computeLineElastic = (start: number, end: number) => {\n    let stretchability = 0;\n    let shrinkability = 0;\n\n    for (let i = start; i <= end; i++) {\n      const item = this.paragraph[i];\n      if (item.type === \"glue\") {\n        stretchability += item.stretch;\n        shrinkability += item.shrink;\n      }\n    }\n\n    return { stretchability, shrinkability };\n  };\n\n  /**\n   * Compute the adjustment ratio of a line\n   *\n   * @param start\n   * @param end\n   * @param lineNumber\n   * @returns\n   */\n  computeLineAdjustment = (start: number, end: number, lineNumber: number) => {\n    const len = this.computeLineLength(start, end);\n    const desiredLength = this.getDesiredLineLength(lineNumber);\n\n    if (len === desiredLength) {\n      return 0;\n    }\n\n    const elastic = this.computeLineElastic(start, end);\n    if (len < desiredLength) {\n      if (elastic.stretchability < 0) {\n        return undefined;\n      }\n      // This is modified from Knuth-Plass algorithm.\n      if (elastic.stretchability === 0) {\n        return (desiredLength - len) / 0.1;\n      }\n      return (desiredLength - len) / elastic.stretchability;\n    }\n    if (elastic.shrinkability <= 0) {\n      return undefined;\n    }\n    return (desiredLength - len) / elastic.shrinkability;\n  };\n\n  computeLineBadness = (start: number, end: number, lineNumber: number) => {\n    const r = this.computeLineAdjustment(start, end, lineNumber);\n    if (r === undefined || r < -1) {\n      return -Infinity;\n    }\n    // original formula: r ** 3 * 100\n    return r ** 3;\n  };\n\n  computeLineDemerits = cacheFn(\n    (start: number, end: number, lineNumber: number) => {\n      const lastLineItem = this.paragraph[end];\n      const linePenalty =\n        lastLineItem.type === \"penalty\" ? lastLineItem.cost : 0;\n      const lineBadness = this.computeLineBadness(start, end, lineNumber);\n      const additionalPenalty = 0;\n\n      if (linePenalty >= 0) {\n        return (1 + lineBadness + linePenalty) ** 2 + additionalPenalty;\n      } else if (linePenalty === -Infinity) {\n        return (1 + lineBadness) ** 2 + additionalPenalty;\n      } else {\n        return (1 + lineBadness) ** 2 - linePenalty ** 2 + additionalPenalty;\n      }\n    },\n    this.cacheLineDemerits\n  );\n\n  computeParagraphDemerits = (\n    start: number,\n    end: number,\n    breakpoints: number[],\n    nPreviousLines: number\n  ) => {\n    let caret = start;\n    let demerits = 0;\n    for (let i = 0; i < breakpoints.length; i++) {\n      demerits += this.computeLineDemerits(\n        caret,\n        breakpoints[i],\n        nPreviousLines + i\n      );\n      caret = breakpoints[i] + 1;\n    }\n    demerits += this.computeLineDemerits(\n      caret,\n      end,\n      nPreviousLines + (breakpoints.length > 0 ? breakpoints.length + 1 : 0)\n    );\n\n    return demerits;\n  };\n}\n","/**\n * An object (eg. a word) to be typeset.\n */\nexport interface Box {\n  type: \"box\";\n\n  text: string;\n\n  /** Amount of space required by this content. Must be >= 0. */\n  width: number;\n}\n\n/**\n * A space between `Box` items with a preferred width and some\n * capacity to stretch or shrink.\n *\n * `Glue` items are also candidates for breakpoints if they immediately follow a\n * `Box`.\n */\nexport interface Glue {\n  type: \"glue\";\n  text: string;\n\n  /**\n   * Preferred width of this space. Must be >= 0.\n   */\n  width: number;\n  /** Maximum amount by which this space can grow. */\n  stretch: number;\n  /** Maximum amount by which this space can shrink. */\n  shrink: number;\n}\n\n/**\n * An explicit candidate position for breaking a line.\n */\nexport interface Penalty {\n  type: \"penalty\";\n  text: string;\n\n  /**\n   * Amount of space required for typeset content to be added (eg. a hyphen) if\n   * a line is broken here. Must be >= 0.\n   */\n  width: number;\n  /**\n   * The undesirability of breaking the line at this point.\n   *\n   * Values <= `MIN_COST` and >= `MAX_COST` mandate or prevent breakpoints\n   * respectively.\n   */\n  cost: number;\n  /**\n   * A hint used to prevent successive lines being broken with hyphens. The\n   * layout algorithm will try to avoid successive lines being broken at flagged\n   * `Penalty` items.\n   */\n  flagged: boolean;\n}\n\nexport type ParagraphUnit = Box | Glue | Penalty;\nexport type ParagraphRenderedUnit = ParagraphUnit & {\n  x: number;\n  y: number;\n  lineNumber: number;\n  renderedWidth: number;\n};\nexport type ParagraphLine = ParagraphUnit[];\n\nexport interface RenderParams {\n  lineHeight: number;\n  cssLineHeight: number;\n  fontSize: number;\n  align: \"center\" | \"left\" | \"justify\" | \"right\";\n  verticalAlign: \"middle\";\n  // shorten the line's length if possible -- this will affect \"justify\" paragraph\n  // for non uniform line length, this does not change the length of line less than the new maximum length\n  // hence may produce ugly result\n  autoLength: boolean;\n}\n\nexport class Paragraph {\n  public readonly spaceWidth: number;\n  public readonly units: ParagraphUnit[];\n  public readonly lineLengths: number | number[];\n  public readonly getLineLength: (i: number) => number;\n\n  constructor(units: ParagraphUnit[], lineLengths: number | number[]) {\n    this.units = units;\n    this.lineLengths = lineLengths;\n\n    if (Array.isArray(lineLengths)) {\n      this.getLineLength = (i: number) =>\n        i < lineLengths.length\n          ? lineLengths[i]\n          : lineLengths[lineLengths.length - 1];\n    } else {\n      this.getLineLength = (i: number) => lineLengths;\n    }\n\n    this.spaceWidth = 0;\n    for (const unit of units) {\n      if (unit.type === \"glue\") {\n        this.spaceWidth = unit.width;\n        break;\n      }\n    }\n  }\n\n  /**\n   * A convenience function that generates a set of input items for `breakLines`\n   * from a string.\n   *\n   * @param text - Text to process\n   * @param measureFn - Callback that calculates the width of a given string\n   * @param hyphenateFn - Callback that calculates legal hyphenation points in\n   *                      words and returns an array of pieces that can be joined\n   *                      with hyphens.\n   */\n  static getUnitsFromText(\n    text: string,\n    measureFn: (word: string) => number,\n    hyphenateFn?: (word: string) => string[],\n    separable?: string[],\n    penaltyCost: number = 1000\n  ): ParagraphUnit[] {\n    const units: ParagraphUnit[] = [];\n    // MODIFY: modify here to split the word further to create possible break points of really long equation/json string\n    let chunks = text.split(/(\\s+)/).filter((w) => w.length > 0);\n    if (separable !== undefined && separable.length > 0) {\n      const re = new RegExp(`.*?[${separable.join(\"\")}]|.+`, \"g\");\n      chunks = chunks.flatMap((w) => w.match(re)!);\n    }\n\n    // Here we assume that every space has the same default size. Callers who want\n    // more flexibility can use the lower-level functions.\n    const spaceWidth = measureFn(\" \");\n    const hyphenWidth = measureFn(\"-\");\n    const isSpace = (word: string) => /\\s/.test(word.charAt(0));\n\n    // MODIFY: from Knuth-Place paper (space 1/3em, stretch 1/6em, shrink 1/9em)\n    const stretch = spaceWidth / 2;\n    const shrink = spaceWidth / 3;\n\n    chunks.forEach((w) => {\n      if (isSpace(w)) {\n        const g: Glue = {\n          type: \"glue\",\n          width: spaceWidth,\n          shrink,\n          stretch,\n          text: w,\n        };\n        units.push(g);\n        return;\n      }\n\n      // MODIFY: for words that are splitted in the middle by :,\" etc as above\n      if (units.length > 0 && units[units.length - 1].type === \"box\") {\n        units.push({\n          type: \"penalty\",\n          width: 0,\n          cost: 1,\n          flagged: false,\n          text: \"\",\n        });\n      }\n\n      if (hyphenateFn) {\n        const chunks = hyphenateFn(w);\n        chunks.forEach((c, i) => {\n          const b: Box = { type: \"box\", width: measureFn(c), text: c };\n          units.push(b);\n          if (i < chunks.length - 1) {\n            const hyphen: Penalty = {\n              type: \"penalty\",\n              text: \"-\",\n              width: hyphenWidth,\n              cost: penaltyCost,\n              flagged: true,\n            };\n            units.push(hyphen);\n          }\n        });\n      } else {\n        const b: Box = { type: \"box\", width: measureFn(w), text: w };\n        units.push(b);\n      }\n    });\n    // Add \"finishing glue\" to space out final line.\n    units.push({\n      type: \"glue\",\n      width: 0,\n      stretch: 10000,\n      shrink: 0,\n      text: \"\",\n    });\n\n    return units;\n  }\n\n  /**\n   * Group units of the paragraph by lines:\n   * - Penalties in the middle of a line are ignored\n   * - Glue at the end is ignored\n   * - Consecutive boxes are merged.\n   */\n  groupByLine = (breaklines: number[]): ParagraphLine[] => {\n    const lines = [];\n    let start = 0;\n\n    breaklines = breaklines.slice();\n    breaklines.push(this.units.length - 1);\n\n    for (const end of breaklines) {\n      const units = this.units.slice(start, end);\n      const line = [];\n\n      // adjust glues of the line\n      for (const unit of units) {\n        if (unit.type === \"penalty\") {\n          continue;\n        }\n\n        if (\n          unit.type === \"box\" &&\n          line.length > 0 &&\n          line[line.length - 1].type === \"box\"\n        ) {\n          // merge consecutive boxes together\n          line[line.length - 1].text += unit.text;\n          line[line.length - 1].width += unit.width;\n          continue;\n        }\n        // make a shallow copy so that we don't modify the original unit\n        line.push(Object.assign({}, unit));\n      }\n\n      if (\n        this.units[end].type === \"penalty\" &&\n        this.units[end].text.length > 0\n      ) {\n        line.push(this.units[end]);\n      }\n\n      start = end + 1;\n      lines.push(line);\n    }\n\n    return lines;\n  };\n\n  /** Compute layout of the paragraph */\n  layout = (\n    lines: ParagraphLine[],\n    {\n      lineHeight,\n      cssLineHeight,\n      fontSize,\n      align,\n      verticalAlign,\n      autoLength,\n    }: RenderParams\n  ): { units: ParagraphRenderedUnit[]; lineLengths: number[] } => {\n    const renderingUnits = [];\n    const lineLengths = lines.map((line) =>\n      line.reduce((a, x) => a + x.width, 0)\n    );\n    const desiredLens = lines.map((line, i) => this.getLineLength(i));\n\n    if (autoLength) {\n      const maxLen = Math.max(...lineLengths);\n      for (let i = 0; i < desiredLens.length; i++) {\n        if (desiredLens[i] > maxLen) {\n          desiredLens[i] = maxLen;\n        }\n      }\n    }\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n\n      // find the glue width, we won't adjust the glue width if the line is shorter than desired and not justify\n      const len = lineLengths[i];\n      const desiredLen = desiredLens[i];\n      const nGlues = line.filter((x) => x.type === \"glue\").length;\n      const glueWidth =\n        len < desiredLen && align !== \"justify\"\n          ? this.spaceWidth\n          : Math.abs(desiredLen - len) / nGlues + this.spaceWidth;\n\n      // verticalAlign === \"middle\"\n      const y = (i + 1) * lineHeight - (fontSize * (cssLineHeight - 1)) / 2;\n      let x = 0;\n\n      if (align === \"center\") {\n        x += (desiredLen - len) / 2;\n      } else if (align === \"right\") {\n        x += desiredLen - len;\n      }\n\n      if (glueWidth === this.spaceWidth) {\n        const renderingUnit = Object.assign(\n          {\n            x,\n            y,\n            renderedWidth: len,\n            lineNumber: i,\n          },\n          line[0]\n        );\n        renderingUnit.text = line.map((x) => x.text).join(\"\");\n        renderingUnits.push(renderingUnit);\n      } else {\n        for (const unit of line) {\n          const renderedWidth = unit.type === \"glue\" ? glueWidth : unit.width;\n          const renderedUnit = Object.assign(\n            {\n              x,\n              y,\n              renderedWidth,\n              lineNumber: i,\n            },\n            unit\n          );\n\n          x += renderedWidth;\n          renderingUnits.push(renderedUnit);\n        }\n      }\n    }\n\n    return { units: renderingUnits, lineLengths };\n  };\n}\n","import enUsPatterns from \"hyphenation.en-us\";\nimport Hypher from \"hypher\";\nimport { ParagraphOptimizer } from \"./optimizer\";\nimport { Paragraph, ParagraphRenderedUnit } from \"./model\";\n\nexport type ElementFontConfig = {\n  font?: string;\n  fontSize: number;\n  fontFamily: string;\n};\n\nexport class WordWrap {\n  protected measureCtx: CanvasRenderingContext2D;\n  protected circleLayout: CircleLayout;\n  protected hypher: Hypher;\n\n  public readonly font: string;\n  public readonly fontFamily: string;\n  public readonly fontSize: number;\n  public readonly cssLineHeight: number = 1.428;\n  // lineHeight in pixel (different from cssLineHeight property)\n  public readonly lineHeight: number;\n  public readonly spaceWidth: number;\n  public readonly separable: string[] = [\n    \"{\",\n    \"}\",\n    \":\",\n    \",\",\n    \"'\",\n    '\"',\n    \".\",\n    \"/\",\n  ];\n\n  constructor(\n    fontCfg: ElementFontConfig,\n    layoutCfg?: { lineHeight?: number; separable?: string[] }\n  ) {\n    const canvas = document.createElement(\"canvas\");\n    this.measureCtx = canvas.getContext(\"2d\")!;\n    this.spaceWidth = this.measureText(\" \");\n\n    this.font = fontCfg.font || `${fontCfg.fontSize}px ${fontCfg.fontFamily}`;\n    this.fontFamily = fontCfg.fontFamily;\n    this.fontSize = fontCfg.fontSize;\n    this.measureCtx.font = this.font;\n\n    this.hypher = new Hypher(enUsPatterns);\n\n    if (layoutCfg !== undefined) {\n      if (layoutCfg.lineHeight !== undefined) {\n        this.cssLineHeight = layoutCfg.lineHeight;\n      }\n      if (layoutCfg.separable !== undefined) {\n        this.separable = layoutCfg.separable;\n      }\n    }\n\n    this.lineHeight = this.fontSize * this.cssLineHeight;\n    this.circleLayout = new CircleLayout(this);\n  }\n\n  /** Generate a plan to render text. Note that font size is automatically figured out from the given container */\n  wrapText = (\n    text: string,\n    desiredLineLengths: number | number[],\n    align: \"justify\" | \"left\" | \"center\" | \"right\" = \"justify\"\n  ): {\n    units: ParagraphRenderedUnit[];\n    width: number;\n    height: number;\n  } => {\n    const paragraph = new Paragraph(\n      Paragraph.getUnitsFromText(\n        text,\n        this.measureText,\n        this.hyphenate,\n        this.separable\n      ),\n      desiredLineLengths\n    );\n    // TODO: uncomment to debug\n    // console.log(\n    //   text,\n    //   desiredLineLengths,\n    //   JSON.stringify(\n    //     Object.fromEntries(paragraph.units.map((u) => [u.text, u.width]))\n    //   )\n    // );\n    const breakpoints = new ParagraphOptimizer(paragraph).optimize()\n      .breakpoints;\n    const { units, lineLengths } = paragraph.layout(\n      paragraph.groupByLine(breakpoints),\n      {\n        align,\n        cssLineHeight: this.cssLineHeight,\n        fontSize: this.fontSize,\n        lineHeight: this.lineHeight,\n        verticalAlign: \"middle\",\n        autoLength: true,\n      }\n    );\n\n    const width = Math.max(...lineLengths);\n    const height = (breakpoints.length + 1) * this.lineHeight;\n\n    return { units: units, width, height };\n  };\n\n  /** Wrap text in a circle */\n  wrapTextCircle = (\n    text: string,\n    maxRadius: number = 1024,\n    acceptableError: number = 10\n  ): {\n    units: ParagraphRenderedUnit[];\n    radius: number;\n  } => {\n    let radius =\n      this.circleLayout.findRadius(\n        this.measureText(text),\n        maxRadius,\n        acceptableError\n      ) + 12;\n    const circleLayout = this.circleLayout.getLayout(radius);\n    const {\n      lines: lineLengths,\n      // centralLine,\n      // linesY,\n    } = circleLayout;\n    const { units, width } = this.wrapText(\n      text,\n      lineLengths.slice(0, 3),\n      \"center\"\n    );\n    const nLines = Math.max(...units.map((item) => item.lineNumber)) + 1;\n\n    // shift the location to the center of the circle\n    radius = width / 2;\n    const deltaX = -radius;\n    const deltaY =\n      -(nLines % 2 === 1 ? (nLines - 1) / 2 : nLines / 2) * this.lineHeight -\n      this.lineHeight / 2;\n\n    for (let itemLayout of units) {\n      itemLayout.x += deltaX;\n      itemLayout.y += deltaY;\n    }\n\n    return {\n      units: units,\n      radius,\n    };\n  };\n\n  /** Hyphenate a long word (at least 4 characters) */\n  hyphenate = (word: string) => {\n    return word.length > 4 ? this.hypher.hyphenate(word) : [word];\n  };\n\n  /** Get approximate width of a sentence of n words */\n  getApproximateWidth = (nWords: number) => {\n    return nWords * this.measureText(\"abcij \");\n  };\n\n  /**\n   * Return the computed CSS `font` property value for an element.\n   */\n  static getCssFont = (container: Element) => {\n    const style = getComputedStyle(container);\n    const { fontStyle, fontVariant, fontWeight, fontSize, fontFamily } = style;\n    return {\n      font: `${fontStyle!} ${fontVariant!} ${fontWeight!} ${fontSize!} ${fontFamily}`,\n      fontSize: parseFloat(fontSize),\n      fontFamily,\n    };\n  };\n\n  /**\n   * Measure the width of `text` as it would appear if rendered with a given computed `font` style.\n   */\n  measureText = (text: string) => {\n    return this.measureCtx.measureText(text).width;\n  };\n}\n\nexport class CircleLayout {\n  protected lineBreak: WordWrap;\n  protected lineHeight: number;\n  protected radius2layout: {\n    [k: number]: {\n      lines: number[];\n      linesY: number[];\n      totalLength: number;\n      centralLine: number;\n    };\n  };\n\n  constructor(lineBreak: WordWrap) {\n    this.lineBreak = lineBreak;\n    this.lineHeight = lineBreak.lineHeight;\n    this.radius2layout = {};\n  }\n\n  findRadius = (\n    textLength: number,\n    maxRadius: number = 1024,\n    acceptableError: number = 10\n  ): number => {\n    // first step is to find the lower bound using binary search\n    let [start, end] = [0, maxRadius];\n    let lowerbound = undefined;\n    for (let i = 0; i < maxRadius; i++) {\n      if (end - start === 1) {\n        lowerbound = end;\n        break;\n      }\n\n      const radius = Math.ceil((start + end) / 2);\n      const l = this.getLayout(radius).totalLength;\n\n      if (l < textLength) {\n        start = radius;\n        continue;\n      }\n\n      if (l - textLength > acceptableError) {\n        end = radius;\n        continue;\n      }\n      lowerbound = radius;\n      break;\n    }\n\n    if (lowerbound === undefined) {\n      throw new Error(\n        `The text of ${textLength} is too long to render in a circle that has the maximum radius: ${maxRadius} - ${\n          this.getLayout(maxRadius).totalLength\n        }`\n      );\n    }\n\n    // next step is to find the upper bound assuming that the longest word\n    // is going to be breaked at every line (textLength + longestWord * nLines)\n    return lowerbound;\n  };\n\n  /** Get layout (line lengths) of a given radius */\n  getLayout = (radius: number) => {\n    if (this.radius2layout[radius] === undefined) {\n      const n = this.computeHalfNumberOfLines(radius);\n      // small to large to small\n      const lines = [];\n      const linesY = [];\n      for (let i = n; i > 0; i--) {\n        lines.push(this.computeLineLength(i, radius));\n        linesY.push(radius - this.lineHeight * (i + 1 / 2));\n      }\n      lines.push(this.computeCentralLineLength(radius));\n      linesY.push(radius - this.lineHeight / 2);\n      for (let i = n - 1; i >= 0; i--) {\n        lines.push(lines[i]);\n        linesY.push(radius + this.lineHeight * (i - 1 / 2));\n      }\n\n      this.radius2layout[radius] = {\n        lines,\n        linesY,\n        centralLine: lines[n],\n        totalLength: lines.reduce((a, b) => a + b),\n      };\n    }\n\n    return this.radius2layout[radius];\n  };\n\n  /** Number of lines can fit in a half of circle without central line */\n  computeHalfNumberOfLines = (radius: number) => {\n    return Math.floor((radius - this.lineHeight / 2) / this.lineHeight);\n  };\n\n  /** Compute line height of non-central lines */\n  computeLineLength = (index: number, radius: number) => {\n    return Math.sqrt(radius ** 2 - (this.lineHeight * index) ** 2) * 2;\n  };\n\n  computeCentralLineLength = (radius: number) => {\n    return Math.sqrt(radius ** 2 - (this.lineHeight / 2) ** 2) * 2;\n  };\n}\n","import G6, { Graph, GraphData, NodeConfig, LayoutConfig } from \"@antv/g6\";\nimport { registerRectNode } from \"./RectNode\";\nimport { registerCircleNode } from \"./CircleNode\";\nimport { WordWrap } from \"./wordwrap\";\nimport { testNodeWrap } from \"./TestNodeWrap\";\nimport _ from \"lodash\";\n\nexport interface GraphEdge {\n  id: string;\n  source: string;\n  target: string;\n  label: string;\n}\n\nexport interface GraphNode {\n  id: string;\n  label: string;\n  style?: object;\n  labelStyle?: object;\n  shape?:\n    | \"rect\"\n    | \"circle\"\n    | \"ellipse\"\n    | \"diamond\"\n    | \"triangle\"\n    | \"star\"\n    | \"image\";\n}\n\nexport interface G6GraphProps {\n  // init height of the canvas\n  initHeight: number;\n  // shift the node in the graph by `leftOffset` units -- default 0\n  leftOffset?: number;\n  // shift the node in the graph by `topOffset` units -- default 0\n  topOffset?: number;\n  /**\n   * Layout of the graph. Default it's force layout with distance 50\n   */\n  layout?: LayoutConfig;\n  onNodeClick?: (nodeId: string) => void;\n  onEdgeClick?: (edge: GraphEdge) => void;\n  // highlight the node and its related nodes and edges when the mouse enter the node;\n  // default is false\n  enableActivateRelations?: boolean;\n}\n\nexport class G6Graph {\n  private version: number;\n  private container: HTMLDivElement;\n  public graph: Graph;\n  private data: GraphData;\n  public props: G6GraphProps;\n  private wordwrap: WordWrap;\n\n  constructor(container: HTMLDivElement, props: G6GraphProps) {\n    this.version = 0;\n    this.props = props;\n    this.container = container;\n    this.data = {\n      nodes: [],\n      edges: [],\n    };\n\n    const cfg = {\n      fontFamily:\n        \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'\",\n      fontSize: 12,\n    };\n    this.wordwrap = new WordWrap(cfg);\n    registerRectNode(this.wordwrap);\n    registerCircleNode(this.wordwrap);\n\n    const modes: any[] = [\"drag-canvas\", \"drag-node\"];\n\n    if (props.enableActivateRelations) {\n      modes.push({\n        type: \"activate-relations\",\n        resetSelected: true,\n      });\n    }\n\n    this.graph = new G6.Graph({\n      container: container,\n      width: container.scrollWidth,\n      height: props.initHeight,\n      layout: props.layout || {\n        type: \"force\",\n        preventOverlap: true,\n        linkDistance: 50,\n        nodeSpacing: 50,\n      },\n      defaultEdge: {\n        type: \"quadratic\",\n        style: {\n          stroke: \"black\",\n          endArrow: {\n            fill: \"black\",\n            path: G6.Arrow.triangle(6, 8),\n          },\n        },\n        labelCfg: {\n          style: {\n            fill: \"black\",\n            background: {\n              fill: \"#ffffff\",\n              stroke: \"#9EC9FF\",\n              padding: [2, 2, 2, 2],\n              radius: 2,\n            },\n          },\n        },\n      },\n      modes: {\n        default: modes,\n        edit: [\"click-select\"],\n      },\n      // these control styles of nodes & edges at different states\n      // currently define active & inactive for the activate-relations mode\n      nodeStateStyles: {\n        active: {\n          opacity: 1,\n          // this is a custom attr for label's style\n          // checkout `setState` method in the custom nodes such as rect-wrap\n          label: {\n            opacity: 1,\n          },\n        },\n        inactive: {\n          opacity: 0.2,\n          // this is a custom attr for label's style\n          // checkout `setState` method in the custom nodes such as rect-wrap\n          label: {\n            opacity: 0.2,\n          },\n        },\n      },\n      edgeStateStyles: {\n        active: {\n          stroke: \"black\",\n          opacity: 1,\n        },\n        inactive: {\n          opacity: 0.2,\n          text: {\n            opacity: 0.2,\n          },\n        },\n      },\n    });\n\n    if (props.onNodeClick !== undefined) {\n      this.graph.on(\"node:click\", (event: any) => {\n        this.props.onNodeClick!(event.item._cfg.model.id);\n      });\n    }\n\n    if (props.onEdgeClick !== undefined) {\n      this.graph.on(\"edge:click\", (event: any) => {\n        this.props.onEdgeClick!(event.item._cfg.model);\n      });\n    }\n  }\n\n  /** Try to hot-swap the properties of this graph and returns whether it's success or not */\n  hotswapProps = (props: G6GraphProps) => {\n    if (!_.isEqual(this.props.layout, props.layout)) {\n      return false;\n    }\n\n    if (this.props.enableActivateRelations !== props.enableActivateRelations) {\n      return false;\n    }\n\n    this.props = props;\n    return true;\n  };\n\n  destroy = () => {\n    this.graph.destroy();\n  };\n\n  /** Transform the data from our format to G6 format */\n  static transformData(nodes: GraphNode[], edges: GraphEdge[]): GraphData {\n    // const { nodes: x, edges: y } = testNodeWrap(\"rect\");\n    // nodes = x;\n    // edges = y;\n\n    // get new nodes\n    let newNodes = nodes.map((u, i) => {\n      let type;\n      if (u.label.trim().length > 0) {\n        if (u.shape === \"rect\" || u.shape === \"circle\") {\n          type = u.shape + \"-wrap\";\n        } else {\n          type = u.shape;\n        }\n      } else {\n        type = u.shape;\n      }\n\n      const node: NodeConfig = {\n        id: u.id,\n        label: u.label,\n        type: type,\n        style: {\n          ...u.style,\n          radius: 4,\n          paddingHeight: 2,\n          paddingWidth: 4,\n        },\n        labelCfg: {\n          style: u.labelStyle,\n        },\n      };\n      if (u.shape === \"rect\") {\n        node.style!.radius = 4;\n      }\n      return node;\n    });\n\n    // get new edges\n    if (_.uniq(edges.map((u) => u.id)).length !== edges.length) {\n      console.error(\n        \"Edges must have unique ids. However, we get:\",\n        edges.map((u) => u.id)\n      );\n    }\n\n    let newEdges = edges.map((e) => ({\n      id: e.id,\n      source: e.source,\n      target: e.target,\n      label: e.label,\n    }));\n\n    // process parallel edges if needed\n    const uv = new Set();\n    let hasParallelEdges = false;\n    for (const edge of edges) {\n      const pair = `${edge.source}-${edge.target}`;\n      if (uv.has(pair)) {\n        hasParallelEdges = true;\n        break;\n      }\n      uv.add(pair);\n    }\n    if (hasParallelEdges) {\n      G6.Util.processParallelEdges(newEdges);\n    }\n\n    return { nodes: newNodes, edges: newEdges };\n  }\n\n  /**\n   * Adjust the viewport to fit the view without zooming,\n   * just align the center of the image bbox to the center of the canvas\n   */\n  fitCenter = () => {\n    this.graph.fitCenter();\n  };\n\n  /** Entry point of graph. Render the graph with given data */\n  setDataAndRender = (data: GraphData, onFinish?: () => void) => {\n    if (this.version > 0) {\n      this.graph.clear();\n    }\n    this.data = data;\n    this.graph.data({ nodes: data.nodes, edges: data.edges });\n    this.graph.render();\n    this.version += 1;\n\n    if (onFinish !== undefined) {\n      onFinish();\n    }\n  };\n\n  /** Update layout of the graph **/\n  updateLayout = (layoutCfg: LayoutConfig) => {\n    this.graph.updateLayout(layoutCfg);\n    this.graph.layout();\n  };\n\n  /**\n   * Adjust the canvas size to fit with the graph\n   *\n   * For fit-graph mode, the extraHeight mode is used to add top & bottom padding so that it's not too close (e.g., 20px)\n   * For fit-remaining-window, the offsetHeight is used to reserved some pixels at the bottom of the window so that it's not overflow (e.g., minus 1px for the border)\n   * For keep-as-is, we use the initial height\n   */\n  updateContainerSize = ({\n    center,\n    height,\n  }: {\n    center: boolean;\n    height:\n      | { type: \"fit-graph\"; extraHeight: number }\n      | { type: \"fit-remaining-window\"; offsetHeight: number }\n      | { type: \"keep-as-is\" };\n  }): DOMRect => {\n    // follow the code in fitView & fitCenter\n    let group = this.graph.get(\"group\");\n    group.resetMatrix();\n    let bbox = group.getCanvasBBox();\n    if (!(bbox.width === 0 || bbox.height === 0)) {\n      // let graphWidth = this.graph.getWidth();\n      let graphWidth = this.container.clientWidth;\n\n      let graphHeight;\n      switch (height.type) {\n        case \"fit-graph\":\n          graphHeight = bbox.height + height.extraHeight;\n          break;\n        case \"fit-remaining-window\":\n          let viewportOffset = this.container.getBoundingClientRect().top;\n          let documentScrollY = window.scrollY;\n          let viewportHeight = document.documentElement.clientHeight;\n          graphHeight =\n            viewportHeight -\n            (viewportOffset + documentScrollY) -\n            height.offsetHeight;\n          break;\n        case \"keep-as-is\":\n          graphHeight = this.props.initHeight;\n      }\n      this.graph.changeSize(graphWidth, graphHeight);\n      if (center === true) {\n        this.graph.moveTo(\n          graphWidth / 2 - bbox.width / 2,\n          graphHeight / 2 - bbox.height / 2\n        );\n      } else {\n        this.graph.moveTo(\n          this.props.leftOffset || 0,\n          this.props.topOffset || 0\n        );\n      }\n    }\n    return bbox;\n  };\n\n  /**\n   * During rendering, the bounding box of the graph is changing and may\n   * lead to incorrect canvas size. This function will check until the layout\n   * process is finished (the bounding box is not changing a lot) to\n   * call the function.\n   *\n   * If you doesn't provide prevBBox, the function will wait for 3 * delay ms\n   * (first delay to compute bbox, second delay is in the last wait), because of\n   * the last wait, you can set the delay smaller (e.g., 50ms)\n   *\n   * @param maxTries\n   * @param delay milliseconds\n   * @param fn\n   * @param args\n   * @param onFinish\n   * @param significantChange\n   * @param prevBBox\n   */\n  untilLayoutStable = <F extends (...args: any[]) => any>(\n    maxTries: number,\n    delay: number,\n    fn: F,\n    args: Parameters<F>,\n    onFinish?: () => void,\n    significantChange?: number,\n    prevBBox?: DOMRect\n  ) => {\n    if (maxTries <= 0) {\n      // timeout, call the function anyway\n      fn(...args);\n      if (onFinish !== undefined) {\n        onFinish();\n      }\n      return;\n    }\n\n    const group = this.graph.get(\"group\");\n    const bbox = group.getCanvasBBox();\n\n    significantChange = significantChange || 10;\n\n    if (prevBBox !== undefined) {\n      if (\n        Math.abs(prevBBox.width - bbox.width) < significantChange &&\n        Math.abs(prevBBox.height - bbox.height) < significantChange\n      ) {\n        // seem like no significant change we may call the function now\n        // but what if the layout is running quite slow and we call too fast?\n        // wait for sometime and check again to make sure it's really stable\n        setTimeout(() => {\n          const group = this.graph.get(\"group\");\n          const nextBBox = group.getCanvasBBox();\n\n          if (\n            Math.abs(bbox.width - nextBBox.width) >= significantChange! ||\n            Math.abs(bbox.height - nextBBox.height) >= significantChange!\n          ) {\n            // the layout is still changing, keep on waiting\n            this.untilLayoutStable(\n              maxTries - 1,\n              delay,\n              fn,\n              args,\n              onFinish,\n              significantChange,\n              nextBBox\n            );\n          } else {\n            fn(...args);\n            if (onFinish !== undefined) {\n              onFinish();\n            }\n          }\n        }, delay);\n        return;\n      } else {\n        setTimeout(() => {\n          this.untilLayoutStable(\n            maxTries - 1,\n            delay,\n            fn,\n            args,\n            onFinish,\n            significantChange,\n            bbox\n          );\n        }, delay);\n      }\n    } else {\n      setTimeout(() => {\n        this.untilLayoutStable(\n          maxTries,\n          delay,\n          fn,\n          args,\n          onFinish,\n          significantChange,\n          bbox\n        );\n      }, delay);\n    }\n  };\n}\n","import {\n  DownOutlined,\n  FullscreenOutlined,\n  LayoutOutlined,\n} from \"@ant-design/icons\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport MyLocationIcon from \"@mui/icons-material/MyLocation\";\nimport { Button, Dropdown, Menu, Space, Tooltip } from \"antd\";\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { G6Graph, G6GraphProps, GraphEdge, GraphNode } from \"./G6Graph\";\n\nconst styles = {\n  hide: {\n    display: \"none\",\n  },\n  graph: {\n    position: \"relative\",\n    width: \"100%\",\n    // marginLeft: -36,\n    // marginRight: -36,\n  },\n  toolbar: {\n    position: \"absolute\",\n    top: 8,\n    left: 8,\n    \"& button.text\": {\n      borderRadius: 4,\n      paddingLeft: 8,\n      paddingRight: 8,\n    },\n    \"& button.icon\": {\n      borderRadius: 4,\n      padding: 4,\n      \"& svg\": {\n        fontSize: 22,\n      },\n    },\n  },\n  bordered: {\n    border: \"1px solid #bbb\",\n    borderRadius: 4,\n  },\n  container: {\n    // width: \"calc(100% + 72px)\",\n    width: \"100%\",\n    \"& canvas\": {\n      display: \"block\",\n    },\n  },\n} as const;\n\nconst GraphLayout = {\n  Force: {\n    type: \"force\",\n    preventOverlap: true,\n    linkDistance: 50,\n    nodeSpacing: 50,\n  },\n  Dagre: {\n    type: \"dagre\",\n    rankdir: \"TB\",\n    nodesep: 70,\n    ranksep: 30,\n  },\n};\n\nexport interface GraphComponentFunc {\n  graph: () => G6Graph | undefined;\n  recenter: () => boolean;\n}\n\nexport const GraphComponent = withStyles(styles)(\n  forwardRef(\n    (\n      {\n        id,\n        version,\n        nodes,\n        edges,\n        classes,\n        props,\n        className,\n        renderingAdjustedHeight = { type: \"fit-graph\", extraHeight: 8 },\n        toolbar = false,\n        bordered = true,\n        layouts = GraphLayout,\n      }: {\n        nodes: GraphNode[];\n        edges: GraphEdge[];\n        id?: string | number;\n        version?: number;\n        bordered?: boolean;\n        toolbar?: boolean | \"auto-hide\";\n        props?: G6GraphProps;\n        renderingAdjustedHeight?:\n          | { type: \"fit-graph\"; extraHeight: number }\n          | { type: \"fit-remaining-window\"; offsetHeight: number }\n          | { type: \"keep-as-is\" };\n        className?: string;\n        layouts?: typeof GraphLayout;\n      } & WithStyles<typeof styles>,\n      ref\n    ) => {\n      const container = useRef(null);\n      const graph = useRef<G6Graph | undefined>(undefined);\n\n      useImperativeHandle(\n        ref,\n        (): GraphComponentFunc => ({\n          graph: () => graph.current,\n          recenter: () => {\n            if (graph.current === undefined) return false;\n            graph.current.updateContainerSize({\n              center: true,\n              height: renderingAdjustedHeight,\n            });\n            return true;\n          },\n        })\n      );\n\n      useEffect(() => {\n        if (container.current === null) return;\n        if (graph.current === undefined) {\n          graph.current = new G6Graph(\n            container.current,\n            props || {\n              initHeight: 500,\n            }\n          );\n        }\n\n        let g = graph.current;\n        if (props !== undefined) {\n          const success = g.hotswapProps(props);\n          if (!success) {\n            g.destroy();\n            graph.current = new G6Graph(\n              container.current,\n              props || {\n                initHeight: 500,\n              }\n            );\n            g = graph.current;\n          }\n        }\n        g.setDataAndRender(G6Graph.transformData(nodes, edges), () => {\n          (window as any).g = g;\n          // maximum wait is 1 second\n          g.untilLayoutStable(\n            20,\n            50,\n            g.updateContainerSize,\n            [{ center: true, height: renderingAdjustedHeight }],\n            () => {}\n          );\n        });\n      }, [id, version, nodes, edges, props, renderingAdjustedHeight]);\n\n      const toolbarElement =\n        toolbar === false ? null : (\n          <GraphToolbar\n            autoHide={toolbar === \"auto-hide\"}\n            graph={graph}\n            layouts={layouts}\n          />\n        );\n\n      return (\n        <div className={className}>\n          <div className={classes.hide}>{version}</div>\n          <div className={classes.graph}>\n            {toolbarElement}\n            <div\n              ref={container}\n              className={\n                classes.container + (bordered ? \" \" + classes.bordered : \"\")\n              }\n            ></div>\n          </div>\n        </div>\n      );\n    }\n  )\n);\n\nexport const GraphToolbar = withStyles(styles)(\n  ({\n    autoHide = false,\n    graph,\n    classes,\n    layouts,\n  }: {\n    autoHide?: boolean;\n    graph: React.MutableRefObject<G6Graph | undefined>;\n    layouts: typeof GraphLayout;\n  } & WithStyles<typeof styles>) => {\n    const [isHover, setIsHover] = useState(false);\n    const [layout, setLayout] = useState(\"Force\" as keyof typeof GraphLayout);\n\n    const onMouseEnter = () => {\n      if (autoHide) setIsHover(true);\n    };\n    const onMouseLeave = () => {\n      if (autoHide) setIsHover(false);\n    };\n\n    if (autoHide && !isHover) {\n      return (\n        <div\n          className={classes.toolbar}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          <Button className=\"icon\">\n            <MoreHorizIcon />\n          </Button>\n        </div>\n      );\n    }\n\n    const centerGraph = () => {\n      graph.current?.graph.fitCenter();\n    };\n\n    const changeLayout = (name: keyof typeof GraphLayout) => {\n      setLayout(name);\n      graph.current?.updateLayout(layouts[name]);\n      graph.current?.untilLayoutStable(20, 50, centerGraph, [], () => {});\n    };\n\n    const cycleLayout = () => {\n      if (layout === \"Force\") changeLayout(\"Dagre\");\n      if (layout === \"Dagre\") changeLayout(\"Force\");\n    };\n\n    const onMenuSelectLayout = (e: any) => {\n      changeLayout(e.key);\n    };\n\n    return (\n      <div\n        className={classes.toolbar}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <Space size={4} align=\"start\">\n          <Tooltip title=\"Center the graph\">\n            <Button className=\"icon\" onClick={centerGraph}>\n              <MyLocationIcon />\n            </Button>\n          </Tooltip>\n          <Tooltip title=\"Make the graph full screen\">\n            <Button className=\"icon\">\n              <FullscreenOutlined />\n            </Button>\n          </Tooltip>\n          <Tooltip title=\"Change graph layout\">\n            <Dropdown\n              overlay={\n                <Menu onClick={onMenuSelectLayout}>\n                  {Object.keys(GraphLayout).map((layout) => (\n                    <Menu.Item key={layout}>{layout}</Menu.Item>\n                  ))}\n                </Menu>\n              }\n            >\n              <Button\n                className=\"text\"\n                icon={<LayoutOutlined />}\n                onClick={cycleLayout}\n              >\n                {layout} <DownOutlined />\n              </Button>\n            </Dropdown>\n          </Tooltip>\n        </Space>\n      </div>\n    );\n  }\n);\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Select } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useMemo } from \"react\";\nimport { SequentialFuncInvoker } from \"../../misc\";\nimport { SemanticModel, useStores } from \"../../models\";\nimport { SMNodeType } from \"../../models/sm\";\nimport { gold, green, purple, yellow } from \"@ant-design/colors\";\n\nconst styles = {\n  selection: {\n    width: \"100%\",\n  },\n  class_node: {\n    backgroundColor: green[2],\n    \"&:hover\": {\n      backgroundColor: green[8],\n      color: \"white\",\n    },\n  },\n  literal_node: {\n    backgroundColor: purple[2],\n    \"&:hover\": {\n      backgroundColor: purple[8],\n      color: \"white\",\n    },\n  },\n  data_node: {\n    backgroundColor: gold[2],\n    \"&:hover\": {\n      backgroundColor: gold[8],\n      color: \"white\",\n    },\n  },\n};\n\nexport type SearchValue = { type: SMNodeType | \"class\"; id: string };\n\nexport const NodeSearchComponent = withStyles(styles)(\n  observer(\n    ({\n      sm,\n      value,\n      onDeselect,\n      onSelect,\n      classes,\n    }: {\n      sm: SemanticModel;\n      value?: SearchValue;\n      onDeselect: (value: SearchValue) => void;\n      onSelect: (value: SearchValue) => void;\n    } & WithStyles<typeof styles>) => {\n      const { classStore } = useStores();\n      const seqInvoker = new SequentialFuncInvoker();\n\n      // gather all options already in the store, leverage the fact\n      // that property store is readonly\n      const options = useMemo(() => {\n        const options: ({\n          value: string;\n          label: string;\n        } & SearchValue)[] = [];\n        for (const r of classStore.iter()) {\n          options.push({\n            type: \"class\",\n            id: r.id,\n            value: `class:${r.id}`,\n            label: sm.graph.uriCount.nextLabel(r.uri, r.readableLabel),\n          });\n        }\n\n        for (const u of sm.graph.nodes) {\n          options.push({\n            type: u.nodetype,\n            id: u.id,\n            value: `${u.nodetype}:${u.id}`,\n            label: sm.graph.uriCount.label(u),\n            className: classes[u.nodetype],\n          } as any);\n        }\n        return options;\n      }, [classStore.records.size]);\n\n      // search for additional values if it's not in the list\n      const onSearch = (query: string) => {\n        if (query === \"\") return;\n        seqInvoker.exec(() => {\n          return classStore.fetchById(query).then(() => 1);\n        });\n      };\n\n      return (\n        <Select\n          allowClear={true}\n          options={options}\n          optionFilterProp=\"label\"\n          className={classes.selection}\n          showSearch={true}\n          onSearch={onSearch}\n          value={value === undefined ? undefined : `${value.type}:${value.id}`}\n          onSelect={(value, option) => {\n            onSelect({ type: option.type, id: option.id });\n          }}\n          onDeselect={(value, option) => {\n            onDeselect({ type: option.type, id: option.id });\n          }}\n        />\n      );\n    }\n  )\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Button, Form, Modal, Select, Space, Switch, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { SemanticModel, SMEdge, useStores } from \"../../../models\";\nimport { NodeSearchComponent, SearchValue } from \"../NodeSearchComponent\";\nimport { OntPropSearchComponent } from \"../OntSearchComponent\";\n\nconst styles = {\n  table: {\n    width: \"100%\",\n    textAlign: \"left\",\n    borderSpacing: 0,\n    borderRadius: \"2px 2px 0 0\",\n\n    \"& tr\": {\n      verticalAlign: \"middle\",\n    },\n    \"& th, td\": {\n      padding: \"0 4px\",\n    },\n  },\n  selection: {\n    width: \"100%\",\n  },\n} as const;\n\nexport const NodeSelectionComponent = withStyles(styles)(\n  observer(\n    ({\n      sm,\n      classes,\n      value,\n      onSelect,\n      onDeselect,\n    }: {\n      sm: SemanticModel;\n      value?: string;\n      onDeselect?: (value: string) => void;\n      onSelect?: (value: string) => void;\n    } & WithStyles<typeof styles>) => {\n      // gather all options already in the store, leverage the fact\n      // that property store is readonly\n      const options = useMemo(() => {\n        return sm.graph.nodes.map((node) => {\n          return {\n            value: node.id,\n            label: node.label,\n          };\n        });\n      }, [sm]);\n\n      return (\n        <Select\n          showSearch={true}\n          allowClear={true}\n          options={options}\n          optionFilterProp=\"label\"\n          className={classes.selection}\n          value={value}\n          onSelect={onSelect as any}\n          onDeselect={onDeselect as any}\n        />\n      );\n    }\n  )\n);\n\nexport type EdgeFormProps = {\n  sm: SemanticModel;\n  edge?: SMEdge;\n};\n\nexport const EdgeForm = withStyles(styles)(\n  observer(\n    ({ sm, edge, classes }: EdgeFormProps & WithStyles<typeof styles>) => {\n      const { classStore, propertyStore } = useStores();\n      const [source, setSource] = useState<SearchValue | undefined>(\n        edge !== undefined\n          ? { type: sm.graph.node(edge.source).nodetype, id: edge.source }\n          : undefined\n      );\n      const [target, setTarget] = useState<SearchValue | undefined>(\n        edge !== undefined\n          ? { type: sm.graph.node(edge.target).nodetype, id: edge.target }\n          : undefined\n      );\n      const [uri, setURI] = useState<string | undefined>(edge?.uri);\n      const [approximation, setApproximation] = useState(false);\n\n      // whether there exists an edge between source & target\n      // if yes, we can't insert because we assume only one relationship\n      // between two nodes\n      const dupEdge = useMemo(() => {\n        if (source === undefined || source.type === \"class\") return false;\n        if (target === undefined || target.type === \"class\") return false;\n        return (\n          sm.graph.hasEdge(source.id, target.id) &&\n          (edge === undefined ||\n            source.id !== edge.source ||\n            target.id !== edge.target)\n        );\n      }, [sm.graph.version, source?.id, target?.id]);\n\n      useEffect(() => {\n        if (edge === undefined) return;\n        if (propertyStore.getPropertyByURI(edge.uri) !== undefined) return;\n\n        propertyStore.fetchOne({ conditions: { uri: edge.uri } });\n      }, [propertyStore, edge, uri]);\n\n      const onSave = () => {\n        if (uri === undefined || source === undefined || target === undefined)\n          return;\n        if (dupEdge) return;\n\n        const prop = propertyStore.getPropertyByURI(uri)!;\n        let sourceId, targetId;\n\n        if (source.type === \"class\") {\n          const cls = classStore.get(source.id)!;\n          sourceId = sm.graph.nextNodeId();\n          sm.graph.addClassNode({\n            id: sourceId,\n            uri: cls.uri,\n            label: cls.readableLabel,\n            approximation: false,\n            nodetype: \"class_node\",\n          });\n        } else {\n          sourceId = source.id;\n        }\n\n        if (target.type === \"class\") {\n          const cls = classStore.get(target.id)!;\n          targetId = sm.graph.nextNodeId();\n          sm.graph.addClassNode({\n            id: targetId,\n            uri: cls.uri,\n            label: cls.readableLabel,\n            approximation: false,\n            nodetype: \"class_node\",\n          });\n        } else {\n          targetId = target.id;\n        }\n\n        const newEdge = {\n          source: sourceId,\n          target: targetId,\n          uri: prop.uri,\n          approximation,\n          label: prop.readableLabel,\n        };\n        if (edge !== undefined) {\n          if (edge.source === sourceId && edge.target === targetId) {\n            sm.graph.updateEdge(edge.source, edge.target, newEdge);\n          } else {\n            sm.graph.removeEdge(edge.source, edge.target);\n            sm.graph.addEdge(newEdge);\n          }\n        } else {\n          sm.graph.addEdge(newEdge);\n        }\n\n        Modal.destroyAll();\n      };\n\n      const onDelete = () => {\n        if (edge === undefined) return;\n        sm.graph.removeEdge(edge.source, edge.target);\n        Modal.destroyAll();\n      };\n\n      const isModified = () => {\n        return (\n          edge === undefined ||\n          source?.id !== edge.source ||\n          target?.id !== edge.target ||\n          uri !== edge.uri ||\n          approximation !== edge.approximation\n        );\n      };\n\n      return (\n        <Form\n          labelCol={{ span: 6 }}\n          wrapperCol={{ span: 18 }}\n          labelWrap={true}\n          layout=\"horizontal\"\n        >\n          <Form.Item\n            label={\n              <Typography.Text\n                copyable={\n                  source !== undefined ? { text: source.id } : undefined\n                }\n              >\n                Source\n              </Typography.Text>\n            }\n            validateStatus={dupEdge ? \"error\" : undefined}\n            help={\n              dupEdge\n                ? \"Cannot have more than one edge between two nodes\"\n                : undefined\n            }\n          >\n            <NodeSearchComponent\n              sm={sm}\n              value={source}\n              onSelect={setSource}\n              onDeselect={() => setSource(undefined)}\n            />\n          </Form.Item>\n          <Form.Item\n            label={\n              <Typography.Text\n                copyable={\n                  target !== undefined ? { text: target.id } : undefined\n                }\n              >\n                Target\n              </Typography.Text>\n            }\n          >\n            <NodeSearchComponent\n              sm={sm}\n              value={target}\n              onSelect={setTarget}\n              onDeselect={() => setTarget(undefined)}\n            />\n          </Form.Item>\n          <Form.Item\n            label={\n              <Typography.Text\n                copyable={\n                  uri !== undefined\n                    ? { text: propertyStore.getPropertyByURI(uri)?.id }\n                    : undefined\n                }\n              >\n                Predicate\n              </Typography.Text>\n            }\n          >\n            <OntPropSearchComponent\n              value={\n                uri !== undefined\n                  ? propertyStore.getPropertyByURI(uri)?.id\n                  : undefined\n              }\n              onSelect={(id) => setURI(propertyStore.get(id)?.uri)}\n              onDeselect={(value) => setURI(undefined)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Approximation\">\n            <Switch\n              checked={approximation}\n              onChange={(val) => setApproximation(val)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Button\">\n            <Space>\n              <Button\n                type=\"primary\"\n                onClick={onSave}\n                disabled={\n                  source === undefined ||\n                  target === undefined ||\n                  uri === undefined ||\n                  !isModified() ||\n                  dupEdge\n                }\n              >\n                Save\n              </Button>\n              {edge !== undefined ? (\n                <Button type=\"primary\" danger={true} onClick={onDelete}>\n                  delete\n                </Button>\n              ) : null}\n            </Space>\n          </Form.Item>\n        </Form>\n      );\n    }\n  )\n);\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Button, Form, Modal, Radio, Space, Switch, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useStores } from \"../../../models\";\nimport {\n  ClassNode,\n  LiteralNode,\n  SemanticModel,\n  SMNode,\n  SMNodeType,\n} from \"../../../models/sm\";\nimport {\n  EntitySearchComponent,\n  OntClassSearchComponent,\n} from \"../OntSearchComponent\";\n\nconst styles = {} as const;\n\nexport interface NodeFormProps {\n  sm: SemanticModel;\n  node?: SMNode;\n}\n\n/**\n * Form for adding/editing a node in the graph. There are two cases:\n *\n * 1. Create new node -- when node is undefined\n * 2. Delete or update existing node data without modifying its edges -- when the node is provided\n */\nexport const ClassNodeSubForm = observer(\n  (props: { sm: SemanticModel; node?: ClassNode; onDone: () => void }) => {\n    const { classStore } = useStores();\n    const [uri, setURI] = useState<string | undefined>(props.node?.uri);\n    const [approximation, setApproximation] = useState(\n      props.node?.approximation || false\n    );\n\n    // fetch class id associated with the node uri\n    useEffect(() => {\n      if (props.node === undefined) return;\n      if (classStore.getClassByURI(props.node.uri) !== undefined) return;\n\n      classStore.fetchOne({ conditions: { uri: props.node.uri } });\n    }, [props.node?.uri]);\n\n    const onSave = () => {\n      if (uri === undefined) return;\n\n      if (props.node === undefined) {\n        // always create a new node\n        props.sm.graph.addClassNode({\n          id: props.sm.graph.nextNodeId(),\n          uri: uri,\n          label: classStore.getClassByURI(uri)!.readableLabel,\n          nodetype: \"class_node\",\n          approximation: approximation,\n        });\n      } else {\n        // we update existing node, it can be\n        props.sm.graph.updateClassNode(props.node.id, {\n          uri: uri,\n          label: classStore.getClassByURI(uri)!.readableLabel,\n          approximation: approximation,\n        });\n      }\n\n      props.onDone();\n    };\n\n    const onDelete = () => {\n      props.sm.graph.removeNode(props.node!.id);\n      props.onDone();\n    };\n\n    const isModified = () => {\n      return (\n        props.node === undefined ||\n        props.node.uri !== uri ||\n        props.node.approximation !== approximation\n      );\n    };\n\n    return (\n      <React.Fragment>\n        <Form.Item\n          label={\n            <Typography.Text\n              copyable={\n                uri !== undefined\n                  ? {\n                      text: classStore.getClassByURI(uri)?.id,\n                    }\n                  : undefined\n              }\n            >\n              Class\n            </Typography.Text>\n          }\n        >\n          <OntClassSearchComponent\n            value={\n              uri !== undefined ? classStore.getClassByURI(uri)?.id : undefined\n            }\n            onSelect={(id) => setURI(classStore.get(id)?.uri)}\n            onDeselect={() => setURI(undefined)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Approximation\">\n          <Switch\n            checked={approximation}\n            onChange={(val) => setApproximation(val)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Button\">\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={onSave}\n              disabled={uri === undefined || !isModified()}\n            >\n              Save\n            </Button>\n            {props.node !== undefined ? (\n              <Button type=\"primary\" danger={true} onClick={onDelete}>\n                delete\n              </Button>\n            ) : null}\n          </Space>\n        </Form.Item>\n      </React.Fragment>\n    );\n  }\n);\n\nexport const LiteralNodeSubForm = observer(\n  (props: { sm: SemanticModel; node?: LiteralNode; onDone: () => void }) => {\n    const { entityStore } = useStores();\n    const [id, setId] = useState<string | undefined>(\n      props.node?.value?.type === \"entity-id\" ? props.node.value.id : undefined\n    );\n    const [isInContext, setIsInContext] = useState(\n      props.node !== undefined && props.node.nodetype === \"literal_node\"\n        ? props.node.isInContext\n        : false\n    );\n\n    const duplicatedId = useMemo(\n      () =>\n        id !== undefined &&\n        ((props.node === undefined &&\n          props.sm.graph.nodeByEntityId(id) !== undefined) ||\n          (props.node !== undefined &&\n            props.sm.graph.nodeByEntityId(id)?.id !== props.node.id)),\n      [props.sm.graph.version, id]\n    );\n\n    if (props.node !== undefined && props.node.value.type === \"string\") {\n      return <div>Not Implemented Yet</div>;\n    }\n\n    const onSave = () => {\n      if (id === undefined) return;\n      if (duplicatedId) return;\n\n      const ent = entityStore.get(id)!;\n\n      if (props.node === undefined) {\n        // always create a new node\n        props.sm.graph.addLiteralNode({\n          id: props.sm.graph.nextNodeId(),\n          value: {\n            type: \"entity-id\",\n            id: id,\n            uri: ent.uri,\n          },\n          label: ent.readableLabel,\n          nodetype: \"literal_node\",\n          isInContext: isInContext,\n        });\n      } else {\n        // we update existing node, it can be\n        props.sm.graph.updateLiteralNode(props.node.id, {\n          value: {\n            type: \"entity-id\",\n            id: id,\n            uri: ent.uri,\n          },\n          label: ent.readableLabel,\n          nodetype: \"literal_node\",\n          isInContext: isInContext,\n        });\n      }\n\n      props.onDone();\n    };\n\n    const onDelete = () => {\n      props.sm.graph.removeNode(props.node!.id);\n      props.onDone();\n    };\n\n    const isModified = () => {\n      return (\n        props.node === undefined ||\n        props.node.isInContext !== isInContext ||\n        (props.node.value.type === \"entity-id\" && props.node.value.id !== id)\n      );\n    };\n\n    return (\n      <React.Fragment>\n        <Form.Item\n          label={\n            <Typography.Text\n              copyable={id !== undefined ? { text: id } : undefined}\n            >\n              Entity\n            </Typography.Text>\n          }\n          validateStatus={duplicatedId ? \"error\" : undefined}\n          help={duplicatedId ? \"Entity's already in the graph\" : undefined}\n        >\n          <EntitySearchComponent\n            value={id}\n            onSelect={setId}\n            onDeselect={() => setId(undefined)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Is In Context?\">\n          <Switch\n            checked={isInContext}\n            onChange={(val) => setIsInContext(val)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Button\">\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={onSave}\n              disabled={id === undefined || duplicatedId || !isModified()}\n            >\n              Save\n            </Button>\n            {props.node !== undefined ? (\n              <Button type=\"primary\" danger={true} onClick={onDelete}>\n                delete\n              </Button>\n            ) : null}\n          </Space>\n        </Form.Item>\n      </React.Fragment>\n    );\n  }\n);\n\nexport const NodeForm = withStyles(styles)(\n  observer(\n    ({ sm, node, classes }: NodeFormProps & WithStyles<typeof styles>) => {\n      const [nodetype, setNodeType] = useState<SMNodeType>(\n        node?.nodetype || \"class_node\"\n      );\n      const onDone = () => Modal.destroyAll();\n\n      return (\n        <Form\n          labelCol={{ span: 6 }}\n          wrapperCol={{ span: 18 }}\n          labelWrap={true}\n          layout=\"horizontal\"\n        >\n          {node === undefined ? (\n            <Form.Item label=\"Node Type\">\n              <Radio.Group\n                value={nodetype}\n                onChange={(event) => setNodeType(event.target.value)}\n                buttonStyle=\"solid\"\n              >\n                <Radio.Button value=\"class_node\">Class Node</Radio.Button>\n                <Radio.Button value=\"literal_node\">Literal Node</Radio.Button>\n              </Radio.Group>\n            </Form.Item>\n          ) : null}\n          {nodetype === \"class_node\" ? (\n            <ClassNodeSubForm\n              sm={sm}\n              node={node?.nodetype === \"class_node\" ? node : undefined}\n              onDone={onDone}\n            />\n          ) : (\n            <LiteralNodeSubForm\n              sm={sm}\n              node={node?.nodetype === \"literal_node\" ? node : undefined}\n              onDone={onDone}\n            />\n          )}\n        </Form>\n      );\n    }\n  )\n);\n","import { Modal } from \"antd\";\nimport { EdgeForm, EdgeFormProps } from \"./EdgeForm\";\nimport { NodeForm, NodeFormProps } from \"./NodeForm\";\n\ninterface TypedEdgeFormProps extends EdgeFormProps {\n  type: \"edge\";\n}\n\ninterface TypedNodeFormProps extends NodeFormProps {\n  type: \"node\";\n}\n\nexport function openForm(\n  args: TypedEdgeFormProps | TypedNodeFormProps,\n  zIndex?: number\n) {\n  let title;\n  let content;\n  switch (args.type) {\n    case \"edge\":\n      content = <EdgeForm {...args} />;\n      title = args.edge === undefined ? \"Add Edge\" : \"Update Edge\";\n      break;\n    case \"node\":\n      content = <NodeForm {...args} />;\n      title = args.node === undefined ? \"Add Node\" : \"Update Node\";\n      break;\n  }\n\n  Modal.info({\n    title: (\n      <span style={{ marginBottom: 16, display: \"inline-block\" }}>{title}</span>\n    ),\n    content,\n    bodyStyle: { margin: -8 },\n    okButtonProps: { style: { display: \"none\" } },\n    maskClosable: true,\n    mask: true,\n    zIndex: zIndex,\n    width: \"calc(100% - 128px)\",\n    style: { top: 64 },\n  });\n}\n","import { gold, green, purple, yellow } from \"@ant-design/colors\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Button, Divider, Popconfirm, Space } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useMemo, useRef, useState } from \"react\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport {\n  GraphComponent,\n  GraphComponentFunc,\n  GraphEdge,\n  GraphNode,\n} from \"../../components/graph\";\nimport { routes } from \"../../routes\";\nimport {\n  DraftSemanticModel,\n  SemanticModel,\n  Table,\n  useStores,\n} from \"../../models\";\nimport { SMNode } from \"../../models/sm\";\nimport { openForm } from \"./forms\";\n\nconst styles = {\n  hide: {\n    display: \"none\",\n  },\n  graphContainer: {\n    marginTop: 8,\n  },\n  draft: {\n    border: `1px dashed ${yellow[7]} !important`,\n    \"&:hover\": {\n      color: `${gold[5]} !important`,\n    },\n  },\n  selectedDraft: {\n    backgroundColor: `${gold[5]} !important`,\n  },\n};\n\nexport const SemanticModelComponent = withStyles(styles)(\n  observer(\n    ({ classes, table }: { table: Table } & WithStyles<typeof styles>) => {\n      const graphRef = useRef<GraphComponentFunc | undefined>(undefined);\n      const [currentIndex, setCurrentIndex] = useState(0);\n      const { semanticModelStore } = useStores();\n      const sms = semanticModelStore.findByTable(table.id);\n      const drafts = semanticModelStore.getDraftsByTable(table);\n      if (currentIndex >= sms.length + drafts.length) {\n        // there is no semantic model & no draft for this table, create a new draft\n        const id = semanticModelStore.getNewDraftId(table);\n        const draft = DraftSemanticModel.getDefaultDraftSemanticModel(\n          id,\n          `sm-${sms.length}`,\n          table\n        );\n        semanticModelStore.setCreateDraft(draft);\n        drafts.push(draft);\n      }\n\n      const sm =\n        currentIndex < sms.length\n          ? sms[currentIndex]\n          : drafts[currentIndex - sms.length];\n\n      const [nodes, edges] = useMemo(() => {\n        const nodes = sm.graph.nodes.map((node) => {\n          let shape: GraphNode[\"shape\"], style;\n          switch (node.nodetype) {\n            case \"class_node\":\n              shape = \"circle\";\n              style = { fill: green[2], stroke: green[8] };\n              break;\n            case \"data_node\":\n              shape = \"rect\";\n              style = { fill: gold[3], stroke: gold[8] };\n              break;\n            case \"literal_node\":\n              if (node.value.type === \"entity-id\") {\n                shape = \"circle\";\n              } else {\n                shape = \"rect\";\n              }\n              if (node.isInContext) {\n                style = { fill: \"#C6E5FF\", stroke: \"#5B8FF9\" };\n              } else {\n                style = { fill: purple[2], stroke: \"#c41d7f\" };\n              }\n              break;\n            default:\n              throw new Error(`Unreachable!`);\n          }\n\n          return {\n            id: node.id,\n            label: getNodeLabel(sm, node),\n            style,\n            shape,\n          };\n        });\n        const edges = sm.graph.edges.map((edge) => {\n          return {\n            id: `${edge.source}-${edge.target}-${edge.uri}`,\n            source: edge.source,\n            target: edge.target,\n            label: edge.label,\n          };\n        });\n\n        return [nodes, edges];\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [\n        SemanticModel.isDraft(sm) ? sm.draftID : null,\n        sm.id,\n        sm.graph.version,\n      ]);\n\n      // center the graph\n      const centering = () => {\n        if (graphRef.current === undefined) {\n          return;\n        }\n        graphRef.current.recenter();\n      };\n      useHotkeys(\"c\", centering, [sm.id, graphRef !== undefined]);\n\n      // add model\n      const cloneNewModel = () => {\n        const id = semanticModelStore.getNewDraftId(table);\n        const nSms = sms.length + drafts.length;\n        const draft = DraftSemanticModel.getDefaultDraftSemanticModel(\n          id,\n          semanticModelStore.getNewSemanticModelName(table),\n          table\n        );\n        draft.graph = sm.graph.clone();\n        draft.graph.id = id;\n        semanticModelStore.setCreateDraft(draft);\n        setCurrentIndex(nSms);\n      };\n\n      const onExport = () => {\n        routes.tableExport\n          .path({ tableId: table.id })\n          .mouseClickNavigationHandler(undefined, true);\n      };\n\n      const smLists = [];\n      for (let idx = 0; idx < sms.length + drafts.length; idx++) {\n        const item = idx < sms.length ? sms[idx] : drafts[idx - sms.length];\n        const isSelected = idx === currentIndex;\n        smLists.push(\n          <Button\n            size=\"small\"\n            key={item.id}\n            type={isSelected ? \"primary\" : \"default\"}\n            onClick={() => setCurrentIndex(idx)}\n            className={\n              item.graph.stale || SemanticModel.isDraft(item)\n                ? classes.draft +\n                  (isSelected ? ` ${classes.selectedDraft}` : \"\")\n                : \"\"\n            }\n          >\n            {item.name}\n          </Button>\n        );\n      }\n\n      // only show the list of semantic models when we have more than one semantic model\n      // or when we have some drafts or when the only semantic model is modified\n      let smListComponent = undefined;\n      smListComponent = (\n        <Space style={{ float: \"right\" }}>\n          {smLists.length !== 1 || drafts.length > 0 || sms[0].graph.stale ? (\n            <React.Fragment>\n              <span>Semantic Models:</span>\n              {smLists}\n              <Divider type=\"vertical\" />\n            </React.Fragment>\n          ) : null}\n          {/* reset is nice to have, but we didn't have the original copy... */}\n          {/* {!sm.isDraft && sm.graph.stale ? (\n            <Button size=\"small\" onClick={() => openForm({ type: \"edge\", sm })}>\n              Reset\n            </Button>\n          ) : null} */}\n          {sms.length + drafts.length > 1 ? (\n            <Popconfirm\n              title=\"Are you sure to delete this model?\"\n              onConfirm={() => {\n                if (SemanticModel.isDraft(sm)) {\n                  semanticModelStore.deleteCreateDraft(sm.draftID);\n                } else {\n                  semanticModelStore.delete(sm.id);\n                }\n                setCurrentIndex(0);\n              }}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button size=\"small\" danger={true}>\n                Delete model\n              </Button>\n            </Popconfirm>\n          ) : null}\n          {SemanticModel.isDraft(sm) || sm.graph.stale ? (\n            <Button\n              size=\"small\"\n              onClick={() =>\n                SemanticModel.isDraft(sm)\n                  ? semanticModelStore.create(sm)\n                  : semanticModelStore.update(sm)\n              }\n            >\n              Save model\n            </Button>\n          ) : null}\n\n          <Button size=\"small\" onClick={cloneNewModel}>\n            Add model\n          </Button>\n\n          <Button size=\"small\" type=\"primary\" disabled={true}>\n            Import\n          </Button>\n          <Button\n            size=\"small\"\n            type=\"primary\"\n            style={{ background: green[6], borderColor: green[6] }}\n            onClick={onExport}\n          >\n            Export\n          </Button>\n        </Space>\n      );\n\n      return (\n        <div>\n          {smListComponent}\n          <Space>\n            <Button size=\"small\" onClick={centering}>\n              Center graph (C)\n            </Button>\n            <Button size=\"small\" onClick={() => openForm({ type: \"node\", sm })}>\n              Add node\n            </Button>\n            <Button size=\"small\" onClick={() => openForm({ type: \"edge\", sm })}>\n              Add edge\n            </Button>\n          </Space>\n          <GraphComponent\n            ref={graphRef}\n            className={classes.graphContainer}\n            id={sm.id}\n            version={sm.graph.version}\n            nodes={nodes}\n            edges={edges}\n            toolbar={false}\n            renderingAdjustedHeight={{ type: \"fit-graph\", extraHeight: 20 }}\n            props={{\n              initHeight: 300,\n              layout: {\n                type: \"dagre\",\n                rankdir: \"TB\",\n                nodesep: 50,\n                ranksep: 15,\n              },\n              onNodeClick: (nodeId: string) => {\n                openForm({\n                  type: \"node\",\n                  sm,\n                  node: sm.graph.node(nodeId),\n                });\n              },\n              onEdgeClick: (edge: GraphEdge) => {\n                openForm({\n                  type: \"edge\",\n                  sm,\n                  edge: sm.graph.edge(edge.source, edge.target),\n                });\n              },\n            }}\n          />\n        </div>\n      );\n    }\n  )\n);\n\nconst getNodeLabel = (sm: SemanticModel, node: SMNode) => {\n  switch (node.nodetype) {\n    case \"data_node\":\n      return node.label;\n    case \"literal_node\":\n      return node.label;\n    case \"class_node\":\n      return sm.graph.uriCount.label(node);\n  }\n};\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Button, PageHeader, Space } from \"antd\";\nimport _ from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport { history, LoadingPage, NotFoundPage } from \"rma-baseapp\";\nimport { TableComponent } from \"../../components/table\";\nimport * as RTable from \"../../components/table/RelationalTable\";\nimport {\n  Project,\n  Table,\n  TableStore as TableStoreType,\n  useStores,\n} from \"../../models\";\nimport { routes } from \"../../routes\";\nimport { EntitySettingComponent } from \"./EntitySettingComponent\";\nimport { SemanticModelComponent } from \"./SemanticModelComponent\";\n\n// https://cssinjs.org/jss-plugin-nested?v=v10.8.0#use--to-reference-selector-of-the-parent-rule\nconst styles = {\n  table: {\n    marginTop: 8,\n    \"& div.ant-table-container\": {\n      border: \"1px solid #bbb\",\n      borderRadius: 4,\n      borderLeft: \"1px solid #bbb !important\",\n    },\n  },\n  container: {\n    marginLeft: 24,\n    marginRight: 24,\n  },\n};\n\nexport const TablePage = withStyles(styles)(\n  observer(({ classes }: WithStyles<typeof styles>) => {\n    // use stores\n    const { projectStore, tableStore, tableRowStore, semanticModelStore } =\n      useStores();\n\n    // parse necessary route parameters\n    const tableId = routes.table.useURLParams()!.tableId;\n    const { navState, toNextTable, toPreviousTable } = useTableNavigation(\n      tableStore,\n      tableId\n    );\n\n    useEffect(() => {\n      // fetch the table\n      tableStore.fetchById(tableId).then((table) => {\n        if (table !== undefined) {\n          projectStore.fetchById(table.project);\n        }\n      });\n\n      // fetch its semantic model\n      if (!semanticModelStore.hasByTable(tableId)) {\n        semanticModelStore.fetch({\n          limit: 1000,\n          offset: 0,\n          conditions: {\n            table: tableId,\n          },\n        });\n      }\n    }, [tableStore, projectStore, semanticModelStore, tableId]);\n\n    useHotkeys(\"b\", toPreviousTable, [navState.version]);\n    useHotkeys(\"n\", toNextTable, [navState.version]);\n\n    const table = tableStore.get(tableId);\n    const rtable: RTable.Table | undefined = useMemo(() => {\n      const table = tableStore.get(tableId);\n      if (table === undefined || table === null) {\n        return undefined;\n      }\n\n      return {\n        name: table.name,\n        description: table.description,\n        columns: table.columns,\n        size: table.size,\n        context: {\n          webpage: table.contextPage?.url,\n          title: table.contextPage?.title,\n          entityId: table.contextPage?.entityId,\n          contentHierarchy: table.contextTree,\n        },\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [tableId, table !== undefined]);\n\n    if (table === null) {\n      return <NotFoundPage />;\n    } else if (table === undefined) {\n      return <LoadingPage />;\n    }\n\n    let semComponent = null;\n    if (!semanticModelStore.hasByTable(tableId)) {\n      semComponent = <LoadingPage bordered={true} />;\n    } else {\n      semComponent = <SemanticModelComponent key={tableId} table={table} />;\n    }\n\n    const queryRow = async (limit: number, offset: number) => {\n      let result = await tableRowStore.fetch({\n        limit,\n        offset,\n        conditions: { table: table.id },\n      });\n      return result.records.map((row) => ({\n        index: row.index,\n        row: row.row.map((v) => ({ value: v })),\n        links: row.links,\n      }));\n    };\n\n    return (\n      <React.Fragment>\n        <TableNavBar\n          project={projectStore.get(table.project)}\n          table={table}\n          btns={[\n            <Button\n              key=\"prev\"\n              onClick={toPreviousTable}\n              disabled={!navState.hasPrev}\n            >\n              Previous Table (B)\n            </Button>,\n            <Button\n              key=\"next\"\n              onClick={toNextTable}\n              disabled={!navState.hasNext}\n            >\n              Next Table (N)\n            </Button>,\n          ]}\n          extraSubTitle={\n            <span className=\"ml-2\">\n              Position:{\" \"}\n              <b>\n                {\" \"}\n                {navState.leftOffset + navState.tableIndex + 1}/{navState.total}\n              </b>\n            </span>\n          }\n        />\n        <div className={classes.container}>\n          <Space direction=\"vertical\" size={8}>\n            {semComponent}\n            <TableComponent\n              key={tableId}\n              toolBarRender={false}\n              table={rtable!}\n              query={queryRow}\n              showRowIndex={true}\n            />\n            <EntitySettingComponent />\n          </Space>\n        </div>\n      </React.Fragment>\n    );\n  })\n);\n\nfunction useTableNavigation(TableStore: TableStoreType, tableId: number) {\n  const PREFETCH_LIMIT = 50;\n  const queryParams = routes.table.useQueryParams();\n  const b64query = queryParams === null ? \"\" : queryParams.query;\n  const tableQueryConditions = useMemo(\n    () => (b64query !== \"\" ? TableStore.decodeWhereQuery(b64query) : {}),\n    [TableStore, b64query]\n  );\n\n  // Note: assume that the list is always sorted by id (which the order which the table)\n  // is inserted into the DB\n  const [state, setState] = useState({\n    tableId: -1,\n    tableIndex: -1,\n    query: \"\",\n    records: [] as number[],\n    leftOffset: 0,\n    total: 0,\n    hasPrev: false,\n    hasNext: false,\n    allLeft: false,\n    allRight: false,\n    version: 0,\n  });\n\n  useEffect(() => {\n    const fn = async () => {\n      // we reinit the state whenever the query change, or table id is moved\n      // too far from the list (e.g., when users modify the URL)\n      const idx = _.sortedIndex(state.records, tableId);\n      const reinit = state.query !== b64query || state.records[idx] !== tableId;\n      let newState: Partial<typeof state>;\n\n      if (reinit) {\n        const [gtr, ltr] = await Promise.all([\n          TableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"gte\", value: tableId },\n            },\n          }),\n          TableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"lt\", value: tableId },\n            },\n          }),\n        ]);\n\n        const records = ltr.records\n          .map((tbl) => tbl.id)\n          .concat(gtr.records.map((tbl) => tbl.id));\n        newState = {\n          tableIndex: ltr.records.length,\n          records,\n          total: ltr.total + gtr.total,\n          leftOffset: ltr.total - ltr.records.length,\n          allLeft: ltr.total <= PREFETCH_LIMIT,\n          allRight: gtr.total <= PREFETCH_LIMIT,\n          hasPrev: ltr.records.length > 0,\n          hasNext: gtr.records.length > 1,\n        };\n      } else {\n        // only table id change, we fetch if it's near the boundary\n        if (idx === 0 && !state.allLeft) {\n          const ltr = await TableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"lt\", value: tableId },\n            },\n          });\n          newState = {\n            tableIndex: ltr.records.length,\n            leftOffset: ltr.total - ltr.records.length,\n            records: ltr.records.map((tbl) => tbl.id).concat(state.records),\n            allLeft: ltr.total <= PREFETCH_LIMIT,\n            hasPrev: ltr.records.length > 0,\n          };\n        } else if (idx === state.records.length - 1 && !state.allRight) {\n          const gtr = await TableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"gt\", value: tableId },\n            },\n          });\n          newState = {\n            tableIndex: idx,\n            records: state.records.concat(gtr.records.map((tbl) => tbl.id)),\n            allRight: gtr.total <= PREFETCH_LIMIT,\n            hasNext: gtr.records.length > 0,\n          };\n        } else {\n          newState = {\n            tableIndex: idx,\n            hasNext: idx < state.records.length - 1,\n            hasPrev: idx > 0,\n          };\n        }\n      }\n      setState({\n        ...state,\n        ...newState,\n        version: state.version + 1,\n        query: b64query,\n        tableId,\n      });\n    };\n    fn();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableId, b64query]);\n\n  // open another table relative to the current table by some offset\n  const move = (offset: number) => {\n    if (tableId !== state.tableId) {\n      // they call the function too fast before the state is updated\n      return;\n    }\n\n    const nextTableId = state.records[state.tableIndex + offset];\n    if (nextTableId !== undefined) {\n      routes.table.path({ tableId: nextTableId }, { query: b64query }).open();\n    }\n  };\n\n  return {\n    // get id of the table relative to the current table by some offset\n    toPreviousTable: () => {\n      move(-1);\n    },\n    toNextTable: () => {\n      move(1);\n    },\n    navState: state,\n  };\n}\n\nconst TableNavBar = (props: {\n  project: Project | null | undefined;\n  table: Table;\n  btns?: React.ReactNode[];\n  extraSubTitle?: React.ReactNode;\n}) => {\n  let project = props.project || new Project(0, \"\", \"\");\n  return (\n    <PageHeader\n      onBack={() =>\n        history.push(\n          routes.project.getURL({\n            projectId: props.table.project,\n          })\n        )\n      }\n      title={\n        <Space>\n          <span style={{ fontWeight: 500 }}>Table </span>\n          <span style={{ color: \"#237804\", textDecoration: \"underline\" }}>\n            {props.table.name}\n          </span>\n        </Space>\n      }\n      subTitle={\n        <Space>\n          <span>\n            (Project <b>{project.name}</b>)\n          </span>\n          {props.extraSubTitle}\n        </Space>\n      }\n      extra={props.btns}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.e35779db.png\";","import {\n  PathDef,\n  NoArgsPathDef,\n  NoQueryArgsPathDef,\n  applyLayout,\n} from \"rma-baseapp\";\nimport { HomePage, ProjectPage, TablePage, SettingPage } from \"./pages\";\n\nimport React from \"react\";\nimport { LeftNavBar } from \"rma-baseapp\";\nimport { Space } from \"antd\";\nimport logo from \"./logo.png\";\n\nimport {\n  CloudUploadOutlined,\n  ProjectOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\n\n/*************************************************************************************\n * Layouts of the application\n */\nexport const Layout = (\n  component: React.FunctionComponent<any> | React.ComponentClass<any, any>\n) => {\n  return (props: any) => {\n    const element = React.createElement(component, props);\n    return (\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <LeftNavBar\n          menus={{\n            home: <img src={logo} alt=\"logo\" />,\n            projects: { icon: <ProjectOutlined />, children: \"Projects\" },\n            upload: { icon: <CloudUploadOutlined />, children: \"Upload\" },\n            settings: { icon: <SettingOutlined />, children: \"Settings\" },\n          }}\n          routes={routes}\n          isFirstItemLogo={true}\n        />\n        <div className=\"wide-container\">{element}</div>\n      </Space>\n    );\n  };\n};\n\nconst None = () => <h1>Not supposed to see this page</h1>;\n\n/*************************************************************************************\n * Definitions for routes in this application\n */\nexport const routes = {\n  project: new NoQueryArgsPathDef({\n    component: ProjectPage,\n    urlSchema: { projectId: \"number\" },\n    pathDef: \"/projects/:projectId\",\n  }),\n  table: new PathDef({\n    component: TablePage,\n    urlSchema: { tableId: \"number\" },\n    querySchema: { query: \"string\" },\n    pathDef: \"/tables/:tableId\",\n  }),\n  tableExport: new NoQueryArgsPathDef({\n    component: None,\n    urlSchema: { tableId: \"number\" },\n    pathDef: \"/api/table/:tableId/export?attachment=true\",\n  }),\n  settings: new NoArgsPathDef({\n    component: SettingPage,\n    pathDef: \"/settings\",\n    exact: true,\n  }),\n  upload: new NoArgsPathDef({\n    component: HomePage,\n    pathDef: \"/upload\",\n    exact: true,\n  }),\n  projects: new NoArgsPathDef({\n    component: HomePage,\n    pathDef: \"/projects\",\n    exact: true,\n  }),\n  home: new NoArgsPathDef({ component: HomePage, pathDef: \"/\", exact: true }),\n};\n(window as any)._routes = routes;\n\n// apply this layout to all routes except table\napplyLayout(routes, Layout, [\"table\"]);\n","import { Col, Row } from \"antd\";\n\nexport const SettingPage = () => {\n  return (\n    <Row gutter={16}>\n      <Col className=\"gutter-row\" span={24}></Col>\n    </Row>\n  );\n};\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"rma-baseapp\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { stores, StoreContext } from \"./models\";\nimport { routes } from \"./routes\";\n\nReactDOM.render(\n  <StoreContext.Provider value={stores}>\n    <App enUSLocale={true} routes={routes} />\n  </StoreContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}