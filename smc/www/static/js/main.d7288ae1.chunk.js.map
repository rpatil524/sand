{"version":3,"sources":["reportWebVitals.ts","env.ts","models/Project.ts","models/table/TableRowStore.ts","models/table/TableStore.ts","models/sm/SMGraph.ts","models/sm/SemanticModelStore.ts","models/entity/Entity.ts","models/entity/EntityStore.ts","models/ontology/PropertyStore.ts","models/index.ts","pages/HomePage.tsx","pages/ProjectPage.tsx","components/entity/Entity.ts","components/entity/InlineEntityComponent.tsx","components/entity/FetchEntityComponent.tsx","components/entity/InlinePropertyComponent.tsx","components/element/Collapse.tsx","components/entity/ValueComponent.tsx","components/entity/StatementComponent.tsx","components/entity/PropertyComponent.tsx","components/entity/PropertyFilterComponent.tsx","components/entity/PageEntityComponent.tsx","components/entity/PopoverEntityComponent.tsx","components/element/Number.tsx","components/element/Button.tsx","components/table/CandidateEntityListComponent.tsx","components/table/CellComponent.tsx","components/table/TableComponent.tsx","components/table/styles.ts","components/graph/RectNode.ts","components/graph/CircleNode.ts","components/graph/wordwrap/optimizer.ts","components/graph/wordwrap/model.ts","components/graph/wordwrap/wordwrap.ts","components/graph/G6Graph.ts","components/graph/GraphComponent.tsx","pages/table/SemanticModelComponent.tsx","pages/table/TablePage.tsx","logo.png","routes.tsx","pages/SettingPage.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SERVER","process","REACT_APP_PLATFORM","REACT_APP_API_SERVER","Project","id","name","description","this","makeObservable","observable","ProjectStore","undefined","record","CRUDStore","TableRowStore","tableIndex","PairKeysUniqueIndex","findByTable","tableId","start","no","map","index","get","output","i","rowId","push","records","add","Object","values","links","forEach","link","entity","entityId","candidate_entities","ce","candidateEntities","entity_id","RStore","TableStore","projectIndex","SingleKeyIndex","findByProject","projectId","Array","from","contextPage","context_page","contextValues","context_values","contextTree","context_tree","URICount","nodes","counter","id2num","label","node","nextLabel","uri","unlabel","substring","lastIndexOf","nodetype","SMGraph","edges","version","stale","nodeId2Index","column2nodeIndex","uriCount","onSave","hasNode","nodesByURI","filter","nodeByColumnIndex","edge","source","target","e","hasEdge","length","incomingEdges","outgoingEdges","nextNodeId","nid","Error","findPathMax2hops","sourceId","targetId","matchPaths","outedges","outedge","outedge2","getClassIdOfColumnIndex","columnIndex","inedges","inedge","getOutgoingProperties","outprops","coutedge","_removeNode","nodeId","nodeIndex","isInContext","_removeEdge","edgeIndex","sourceDegree","targetDegree","splice","buildIndex","n","addColumnRelationship","action","upsertColumnType","upsertRelationship","addClassNode","addLiteralNode","removeNode","updateClassNode","updateDataNode","updateLiteralNode","addEdge","removeEdge","updateEdge","toJS","sourceColumnIndex","targetColumnIndex","edgeData","sourceIncomingEdges","targetIncomingEdges","realSource","realTarget","approximation","pred1","pred2","edge1","edge2","tempid","props","assign","size","SemanticModel","graph","table","DraftSemanticModel","draftID","SemanticModelStore","has","data","type","column_index","is_in_context","toString","Entity","aliases","properties","id2uri","EntityStore","fetchByIdQueue","Map","Promise","resolve","reject","set","fetchById","catch","error","listener","delete","stmts","stmt","qualifiersOrder","qualifiers_order","PropertyStore","readableLabel","stores","projectStore","tableStore","tableRowStore","semanticModelStore","entityStore","propertyStore","window","_stores","StoreContext","createContext","useStores","React","useContext","HomePage","observer","useEffect","fetch","limit","offset","Fragment","gutter","className","span","Title","level","bordered","itemLayout","dataSource","list","renderItem","project","Item","Meta","avatar","shape","style","marginTop","backgroundColor","charCodeAt","toUpperCase","title","path","routes","urlArgs","queryArgs","ProjectPage","withStyles","border","borderRadius","borderLeft","paddingLeft","paddingRight","fontWeight","classes","useURLParams","columns","dataIndex","renderText","text","tbl","query","encodeWhereQuery","_","upperFirst","defaultSize","request","params","sort","a","pageSize","current","conditions","result","table2row","success","total","options","search","headerTitle","pagination","pageSizeOptions","rowKey","useEntityProperties","propIds","useMemo","ids","Set","entries","pid","keys","qualifiers","qid","fetchByIds","fromEntries","doesNotExist","InlineEntityComponent","nolink","restprops","href","openInNewPage","FetchEntityComponent","render","forceWaiting","serializeFetchById","status","subTitle","InlinePropertyComponent","property","CollapsibleComponent","hide","display","useState","visible","setVisible","toggleVisible","btn","EyeInvisibleOutlined","onClick","EyeOutlined","children","collapsible","ValueComponent","value","timezone","before","after","precision","calendarmodel","time","lowerBound","upperBound","unit","amount","language","globe","latitude","longitude","JSON","stringify","StatementComponent","marginLeft","id2prop","qval","Text","italic","valueIndex","PropertyComponent","propDivider","height","color","visibleProperties","components","strong","direction","width","idx","PropertyFilterComponent","root","filteredProps","setFilteredProps","enable","setEnable","onChange","checked","mode","allowClear","optionFilterProp","onSelect","concat","onDeselect","PageEntityComponent","margin","minWidth","float","join","openPageEntityComponent","zIndex","content","Modal","info","icon","bodyStyle","okButtonProps","maskClosable","mask","top","PopoverEntityComponent","marginBottom","paddingTop","cursor","Number","fractionDigits","toFixed","CheckboxIcon","checkboxIcon","padding","selected","colorSelected","blue","colorUnselected","grey","stateSelected","setStateSelected","correctSelected","styles","correctCandidateEntity","candidateEntity","candidateEntitySeeMore","CandidateEntityListComponent","topK","showAllCandidateModals","setShowAllCandidateModals","candidateLst","slice","faCheck","faCheckDouble","probability","findIndex","candidate","score","onOk","onCancel","textDecoration","noEntityLink","CellComponent","cell","flatMap","prefix","end","linksurface","onCtrlClick","infix","url","dangerouslySetInnerHTML","__html","trim","verticalAlign","TableComponent","toolBarRender","col","context","webpage","TableInformation","contentHierarchy","hierarchy","repeat","heading","contentBefore","contentAfter","drawText","group","wordwrap","units","xoffset","yoffset","cfg","stroke","x","y","addShape","attrs","fontFamily","fill","lineWidth","draggable","registerCircleNode","defaultWidth","getApproximateWidth","G6","registerNode","draw","labelOffset","labelCfg","wrapText","r","cacheFn","fn","cache","args","key","ParagraphOptimizer","paragraph","getDesiredLineLength","cacheLineLengths","cacheLineDemerits","cacheParagraphDemerits","cacheParagraphBreakpoints","optimize","optimizeParagraph","nPreviousLines","lineAdjustment","computeLineAdjustment","breakpoints","demerits","computeLineDemerits","optimalSplit","caret","Infinity","prevParagraphBreakpoints","nextParagraphBreakpoints","computeLineLength","len","computeLineElastic","stretchability","shrinkability","item","stretch","shrink","lineNumber","desiredLength","elastic","computeLineBadness","lastLineItem","linePenalty","cost","lineBadness","computeParagraphDemerits","getLineLength","Paragraph","lineLengths","spaceWidth","groupByLine","breaklines","lines","line","layout","lineHeight","cssLineHeight","fontSize","align","autoLength","renderingUnits","reduce","desiredLens","maxLen","Math","max","desiredLen","nGlues","glueWidth","abs","renderingUnit","renderedWidth","renderedUnit","isArray","measureFn","hyphenateFn","separable","penaltyCost","chunks","split","w","re","RegExp","match","hyphenWidth","isSpace","word","test","charAt","g","flagged","c","b","hyphen","WordWrap","fontCfg","layoutCfg","measureCtx","circleLayout","hypher","font","desiredLineLengths","getUnitsFromText","measureText","hyphenate","wrapTextCircle","maxRadius","acceptableError","radius","findRadius","getLayout","nLines","deltaX","deltaY","nWords","canvas","document","createElement","getContext","Hypher","enUsPatterns","CircleLayout","getCssFont","container","getComputedStyle","fontStyle","fontVariant","parseFloat","lineBreak","radius2layout","textLength","lowerbound","ceil","l","totalLength","computeHalfNumberOfLines","linesY","computeCentralLineLength","centralLine","floor","sqrt","G6Graph","fitCenter","setDataAndRender","onFinish","clear","updateLayout","updateContainerSize","center","resetMatrix","bbox","getCanvasBBox","graphHeight","graphWidth","clientWidth","extraHeight","viewportOffset","getBoundingClientRect","documentScrollY","scrollY","documentElement","clientHeight","offsetHeight","changeSize","moveTo","leftOffset","topOffset","untilLayoutStable","maxTries","delay","significantChange","prevBBox","setTimeout","nextBBox","wp","paddingWidth","hp","paddingHeight","setState","_cfg","model","states","labelStyles","prop","state","registerRectNode","modes","enableActivateRelations","resetSelected","Graph","scrollWidth","initHeight","preventOverlap","linkDistance","nodeSpacing","defaultEdge","endArrow","Arrow","triangle","background","default","edit","nodeStateStyles","active","opacity","inactive","edgeStateStyles","onNodeClick","on","event","onEdgeClick","newNodes","u","labelStyle","uniq","console","newEdges","uv","hasParallelEdges","pair","Util","processParallelEdges","position","toolbar","left","GraphLayout","Force","Dagre","rankdir","nodesep","ranksep","GraphComponent","forwardRef","ref","renderingAdjustedHeight","layouts","useRef","useImperativeHandle","recenter","transformData","toolbarElement","GraphToolbar","autoHide","isHover","setIsHover","setLayout","onMouseEnter","onMouseLeave","changeLayout","FullscreenOutlined","overlay","LayoutOutlined","DownOutlined","SemanticGraphComponent","graphContainer","sms","graphRef","currentIndex","setCurrentIndex","sm","isSmDraft","draftModel","getCreateDraft","column","setCreateDraft","green","gold","datatype","purple","centering","useHotkeys","smLists","borderColor","smListComponent","log","TablePage","marginRight","fetchedSms","setFetchedSms","PREFETCH_LIMIT","queryParams","useQueryParams","b64query","tableQueryConditions","decodeWhereQuery","hasPrev","hasNext","allLeft","allRight","sortedIndex","all","fields","op","gtr","ltr","newState","move","nextTableId","open","toPreviousTable","toNextTable","navState","useTableNavigation","hasByTable","rtable","semComponent","queryRow","row","v","btns","disabled","extraSubTitle","TableNavBar","onBack","history","getURL","extra","NoQueryArgsPathDef","urlSchema","component","pathDef","PathDef","querySchema","settings","NoArgsPathDef","exact","upload","projects","home","_routes","applyLayout","element","menus","src","logo","alt","ProjectOutlined","CloudUploadOutlined","SettingOutlined","isFirstItemLogo","ReactDOM","Provider","enUSLocale","getElementById"],"mappings":"+JAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wCCHDQ,GAHXC,mIAAYC,mBAIuB,WAAnCD,mIAAYC,mBACPD,mIAAYE,qBACb,ICAOC,EAOX,WAAmBC,EAAYC,EAAcC,GAAsB,yBANnEF,QAMkE,OAJlEC,UAIkE,OAFlEC,iBAEkE,EAChEC,KAAKH,GAAKA,EACVG,KAAKF,KAAOA,EACZE,KAAKD,YAAcA,EAEnBE,YAAeD,KAAM,CACnBH,GAAIK,IACJJ,KAAMI,IACNH,YAAaG,OAiCNC,EAAb,kDAME,aAAe,iDACJX,EADG,qBACmBY,GAAW,GAP9C,+CAUE,SAAmBC,GACjB,OAAO,IAAIT,EAAQS,EAAOR,GAAIQ,EAAOP,KAAMO,EAAON,eAXtD,kCAcE,SAA4BM,GAC1B,MAAO,CACLR,GAAIQ,EAAOP,KACXA,KAAMO,EAAOP,KACbC,YAAaM,EAAON,eAlB1B,kCAsBE,SAA4BM,GAC1B,MAAO,CAAEP,KAAMO,EAAOP,KAAMC,YAAaM,EAAON,iBAvBpD,GAAkCO,K,gBCrDrBC,EAAb,kDAIE,aAAe,IAAD,8BACZ,wBAASf,EAAT,sBAAgCY,GAAW,IAJnCI,WACR,IAAIC,IAAoB,QAAS,SAErB,EAYdC,YAAc,SAACC,EAAiBC,EAAeC,GAC7C,IAAMC,EAAM,EAAKN,WAAWO,MAAMC,IAAIL,GACtC,QAAYP,IAARU,EAAmB,MAAO,GAG9B,IADA,IAAMG,EAAS,GACNC,EAAI,EAAGA,EAAIL,EAAIK,IAAK,CAC3B,IAAMC,EAAQL,EAAIE,IAAIE,EAAIN,GAC1B,QAAcR,IAAVe,EACF,MAEFF,EAAOG,KAAK,EAAKC,QAAQL,IAAIG,IAE/B,OAAOF,GAxBK,EAJhB,yCA+BE,SAAgBZ,GACdL,KAAKQ,WAAWc,IAAIjB,KAhCxB,yBAmCE,SAAmBA,GAejB,OAdAkB,OAAOC,OAAOnB,EAAOoB,OAAOC,SAAQ,SAACD,GACnCA,EAAMC,SAAQ,SAACC,GACO,OAAhBA,EAAKC,SACPD,EAAKE,SAAWF,EAAKC,QAEvBD,EAAKG,mBAAmBJ,SAAQ,SAACK,GAC/BA,EAAGF,SAAWE,EAAGH,cACVG,EAAGH,UAEZD,EAAKK,kBAAoBL,EAAKG,0BACvBH,EAAKM,iBACLN,EAAKG,yBAGTzB,MAlDX,GAAmC6B,KCAtBC,EAAb,kDAKE,aAAe,IAAD,8BACZ,wBAAS3C,EAAT,mBAA6BY,GAAW,IALhCgC,aAA+C,IAAIC,IAC3D,WAGY,EAWdC,cAAgB,SAACC,EAAmB3B,EAAgBC,GAClD,OAAO2B,MAAMC,KAAK,EAAKL,aAAarB,MAAMC,IAAIuB,IAAc,IAAIzB,KAC9D,SAACjB,GAAD,OAAQ,EAAKwB,QAAQL,IAAInB,OAbf,EALhB,+CAsBE,SAAmBQ,GAejB,OAdAA,EAAOqC,YAAcrC,EAAOsC,aAEH,OAAvBtC,EAAOqC,kBACgBtC,IAAvBC,EAAOqC,aACuB,OAA9BrC,EAAOqC,YAAYd,SAEnBvB,EAAOqC,YAAYb,SAAWxB,EAAOqC,YAAYd,cAC1CvB,EAAOqC,YAAYd,QAE5BvB,EAAOuC,cAAgBvC,EAAOwC,eAC9BxC,EAAOyC,YAAczC,EAAO0C,oBACrB1C,EAAO0C,oBACP1C,EAAOwC,sBACPxC,EAAOsC,aACPtC,IArCX,mBAwCE,SAAgBA,GACdL,KAAKoC,aAAad,IAAIjB,OAzC1B,GAAgC6B,K,wBC+CnBc,EAKX,WAAYC,GAAmB,IAAD,gCAHtBC,QAAqC,GAGf,KAFtBC,OAAmC,GAEb,KAY9BC,MAAQ,SAACC,GACP,MAAM,GAAN,OAAUA,EAAKD,MAAf,YAAwB,EAAKD,OAAOE,EAAKxD,MAbb,KAgB9ByD,UAAY,SAACC,EAAaH,GACxB,MAAM,GAAN,OAAUA,EAAV,YAAmB,EAAKF,QAAQK,IAAQ,IAjBZ,KAoB9BC,QAAU,SAACJ,GACT,OAAOA,EAAMK,UAAU,EAAGL,EAAMM,YAAY,OArBhB,KAwB9BpC,IAAM,SAAC+B,QAC0BjD,IAA3B,EAAK8C,QAAQG,EAAKE,OACpB,EAAKL,QAAQG,EAAKE,KAAO,GAE3B,EAAKJ,OAAOE,EAAKxD,IAAM,EAAKqD,QAAQG,EAAKE,KACzC,EAAKL,QAAQG,EAAKE,MAAQ,GA7BE,oBACXN,GAAS,IADE,IAC5B,2BAA8B,CAAC,IAAtBI,EAAqB,QACN,eAAlBA,EAAKM,gBAEsBvD,IAA3BJ,KAAKkD,QAAQG,EAAKE,OACpBvD,KAAKkD,QAAQG,EAAKE,KAAO,GAE3BvD,KAAKmD,OAAOE,EAAKxD,IAAMG,KAAKkD,QAAQG,EAAKE,KACzCvD,KAAKkD,QAAQG,EAAKE,MAAQ,IARA,gCAiCnBK,EAAb,WAUE,WAAY/D,EAAYoD,EAAiBY,GAAqB,IAAD,gCATtDhE,QASsD,OARtDiE,aAQsD,OAPtDb,WAOsD,OANtDY,WAMsD,OALtDE,WAKsD,OAJtDC,aAAyC,GAIa,KAHtDC,iBAAsD,GAGA,KAFtDC,cAEsD,OAiC7DC,OAAS,WACP,EAAKJ,OAAQ,GAlC8C,KAqC7DV,KAAO,SAACxD,GAAD,OAAgB,EAAKoD,MAAM,EAAKe,aAAanE,KArCS,KAsC7DuE,QAAU,SAACvE,GAAD,YAA0CO,IAA1B,EAAK4D,aAAanE,IAtCiB,KAuC7DwE,WAAa,SAACd,GAAD,OACX,EAAKN,MAAMqB,QACT,SAACjB,GAAD,MAA4B,eAAlBA,EAAKM,UAA6BN,EAAKE,MAAQA,MAzCA,KA2C7DgB,kBAAoB,SAAC1E,GAAD,OAAgB,EAAKoD,MAAM,EAAKgB,iBAAiBpE,KA3CR,KA6C7D2E,KAAO,SAACC,EAAgBC,GAAjB,OACL,EAAKb,MAAMS,QAAO,SAACK,GAAD,OAAOA,EAAEF,SAAWA,GAAUE,EAAED,SAAWA,KAAQ,IA9CV,KA+C7DE,QAAU,SAACH,EAAgBC,GAAjB,OACR,EAAKb,MAAMS,QAAO,SAACK,GAAD,OAAOA,EAAEF,SAAWA,GAAUE,EAAED,SAAWA,KAC1DG,OAAS,GAjD+C,KAkD7DC,cAAgB,SAACJ,GAAD,OACd,EAAKb,MAAMS,QAAO,SAACK,GAAD,OAAOA,EAAED,SAAWA,MAnDqB,KAoD7DK,cAAgB,SAACN,GAAD,OACd,EAAKZ,MAAMS,QAAO,SAACK,GAAD,OAAOA,EAAEF,SAAWA,MArDqB,KAuD7DO,WAAa,WACX,IAAK,IAAI9D,EAAI,EAAGA,EAAwB,IAApB,EAAK+B,MAAM4B,OAAc3D,IAAK,CAChD,IAAI+D,EAAG,YAAQ/D,GACf,QAA+Bd,IAA3B,EAAK4D,aAAaiB,GACpB,OAAOA,EAGX,MAAM,IAAIC,MAAM,kCA9D2C,KA0E7DC,iBAAmB,SACjBC,EACAC,GAEA,IAD8B,EAC1BC,EAAwC,GACxCC,EAAW,EAAKR,cAAcK,GAFJ,cAGVG,GAHU,IAG9B,2BAA8B,CAAC,IAAtBC,EAAqB,QAC5B,GAAIA,EAAQd,SAAWW,EAAvB,CAD4B,oBAMP,EAAKN,cAAcS,EAAQd,SANpB,IAM5B,2BAAyD,CAAC,IAAjDe,EAAgD,QACnDA,EAASf,SAAWW,GACtBC,EAAWlE,KAAK,CAACoE,EAASC,KARF,oCAE1BH,EAAWlE,KAAK,CAACoE,OAASpF,KALA,8BAgB9B,OAAOkF,GA7FoD,KAqG7DI,wBAA0B,SAACC,GACzB,IADqE,EACjEC,EAAU,EAAKd,cAAc,EAAKP,kBAAkBoB,GAAa9F,IADA,cAElD+F,GAFkD,IAErE,2BAA4B,CAAC,IAApBC,EAAmB,QAC1B,GAAmB,+CAAfA,EAAOtC,IAAsD,CAC/D,GAAIqC,EAAQf,OAAS,EACnB,MAAM,IAAIK,MACR,mEAGJ,OAAOW,EAAOpB,SATmD,gCArGV,KAoH7DqB,sBAAwB,SAACjG,GACvB,IADiE,EAC7DkG,EAAsC,GADuB,cAE7C,EAAKhB,cAAclF,IAF0B,IAEjE,2BAA4C,CAAC,IAApC2F,EAAmC,QACtCd,EAAS,EAAKrB,KAAKmC,EAAQd,QAC/B,GACsB,eAApBA,EAAOf,UACQ,wCAAfe,EAAOnB,IACP,CAAC,IAAD,gBACqB,EAAKwB,cAAcS,EAAQd,SADhD,IACA,2BAAyD,CAAC,IAAjDsB,EAAgD,QACvDD,EAAS3E,KAAK,CAACoE,EAASQ,KAF1B,oCAKAD,EAAS3E,KAAK,CAACoE,OAASpF,KAZqC,8BAejE,OAAO2F,GAnIoD,KAsbrDE,YAAc,SAACC,GACrB,QACgC9F,IAA9B,EAAK4D,aAAakC,SACwB9F,IAA1C,EAAK6C,MAAM,EAAKe,aAAakC,IAF/B,CAOA,IAAIC,EAAY,EAAKnC,aAAakC,GAC9B7C,EAAO,EAAKJ,MAAMkD,GAEtB,KACoB,cAAlB9C,EAAKM,UACc,iBAAlBN,EAAKM,UAA+BN,EAAK+C,aAF5C,CASC,EAAKnD,MAAMkD,QAAqB/F,EAGjC,IAvBwC,EAuBpCyD,EAAQ,EAAKA,MAAMS,QACrB,SAACE,GAAD,OAAUA,EAAKC,SAAWyB,GAAU1B,EAAKE,SAAWwB,KAxBd,cA0BvBrC,GA1BuB,IA0BxC,2BAAwB,CAAC,IAAhBW,EAAe,QACtB,EAAK6B,YAAY7B,EAAKC,OAAQD,EAAKE,SA3BG,kCAtbmB,KAwdrD2B,YAAc,SAACjB,EAAkBC,GAKvC,IAJA,IAAIiB,OAAYlG,EACZmG,EAAe,EACfC,EAAe,EAEVtF,EAAI,EAAGA,EAAI,EAAK2C,MAAMgB,OAAQ3D,IAAK,CAC1C,IAAIsD,EAAO,EAAKX,MAAM3C,GAClBsD,EAAKC,SAAWW,GAAYZ,EAAKE,SAAWW,IAC9CiB,EAAYpF,GAEVsD,EAAKC,SAAWW,GAAYZ,EAAKE,SAAWU,IAC9CmB,GAAgB,GAEd/B,EAAKC,SAAWY,GAAYb,EAAKE,SAAWW,IAC9CmB,GAAgB,QAIFpG,IAAdkG,IAKJ,EAAKzC,MAAM4C,OAAOH,EAAW,GAIR,IAAjBC,GACF,EAAKN,YAAYb,GAEE,IAAjBoB,GACF,EAAKP,YAAYZ,KAvfwC,KA2frDqB,WAAa,WACnB,EAAK1C,aAAe,GACpB,EAAKC,iBAAmB,GAExB,IAAK,IAAI/C,EAAI,EAAGA,EAAI,EAAK+B,MAAM4B,OAAQ3D,IAAK,CAC1C,IAAIyF,EAAI,EAAK1D,MAAM/B,GACnB,EAAK8C,aAAa2C,EAAE9G,IAAMqB,EACP,cAAfyF,EAAEhD,UAA8C,OAAlBgD,EAAEhB,cAClC,EAAK1B,iBAAiB0C,EAAEhB,aAAezE,KAlgB3ClB,KAAKH,GAAKA,EACVG,KAAK8D,QAAU,EACf9D,KAAKiD,MAAQA,EACbjD,KAAK6D,MAAQA,EACb7D,KAAK+D,OAAQ,EAEb/D,KAAK0G,aACL1G,KAAKkE,SAAW,IAAIlB,EAAShD,KAAKiD,OAElChD,YAAeD,KAAM,CACnB8D,QAAS5D,IACT+C,MAAO/C,IACP2D,MAAO3D,IACP6D,MAAO7D,IACP8D,aAAc9D,IACd+D,iBAAkB/D,IAClBgE,SAAUhE,IACV0G,sBAAuBC,IACvBC,iBAAkBD,IAClBE,mBAAoBF,IACpBG,aAAcH,IACdI,eAAgBJ,IAChBK,WAAYL,IACZM,gBAAiBN,IACjBO,eAAgBP,IAChBQ,kBAAmBR,IACnBS,QAAST,IACTU,WAAYV,IACZW,WAAYX,MAvClB,wCA2EE,WACE,MAAO,CACL5D,MAAOwE,YAAKzH,KAAKiD,OACjBY,MAAO4D,YAAKzH,KAAK6D,OACjBG,aAAcyD,YAAKzH,KAAKgE,iBA/E9B,mCA8JE,SACE0D,EACAC,EACAC,GAEA,IAAInD,EAASzE,KAAKuE,kBAAkBmD,GAChChD,EAAS1E,KAAKuE,kBAAkBoD,GAEhCE,EAAsB7H,KAAK8E,cAAcL,EAAO5E,IACpD,GAAmC,IAA/BgI,EAAoBhD,OACtB,MAAM,IAAIK,MAAM,oDAElB,GAAmC,IAA/B2C,EAAoBhD,OACtB,MAAM,IAAIK,MACR,iGAIJ,IAAI4C,EAAsB9H,KAAK8E,cAAcJ,EAAO7E,IACpD,GAAIiI,EAAoBjD,OAAS,EAC/B,MAAM,IAAIK,MACR,iGAIJ,IAAI6C,EAAaF,EAAoB,GAAGpD,OACpCuD,EAC6B,IAA/BF,EAAoBjD,OAChBH,EAAO7E,GACPiI,EAAoB,GAAGrD,OAE7BzE,KAAKsH,QAAL,2BACKM,GADL,IAEEnD,OAAQsD,EACRrD,OAAQsD,OAhMd,8BA2ME,SAAwBrC,EAAqBlB,GAC3C,IAAIC,EAAS1E,KAAKuE,kBAAkBoB,GAChCmC,EAAsB9H,KAAK8E,cAAcJ,EAAO7E,IAEpD,GAAIiI,EAAoBjD,OAAS,EAC/B,MAAM,IAAIK,MACR,0FAIJ,GAAmC,IAA/B4C,EAAoBjD,OAAc,CACpC,IAAIO,EAAWpF,KAAKgF,aACpBhF,KAAKgH,aAAL,2BACKvC,GADL,IAEE5E,GAAIuF,KAGNpF,KAAKsH,QAAQ,CACX7C,OAAQW,EACRV,OAAQA,EAAO7E,GACf0D,IAAK,6CACLH,MAAO,aACP6E,eAAe,QAEZ,CACL,IAAIzD,EAAOsD,EAAoB,GAC/B9H,KAAKmH,gBAAgB3C,EAAKC,OAAQA,GACjB,+CAAbD,EAAKjB,KAEPvD,KAAKwH,WAAWhD,EAAKC,OAAQD,EAAKE,OAAQ,CACxCnB,IAAK,6CACLH,MAAO,aACP6E,cAAezD,EAAKyD,mBA3O9B,gCA6PE,SACE7C,EACAC,EACA6C,EACAC,GAKA,IAAI7C,EAAatF,KAAKmF,iBAAiBC,EAAUC,GAEjD,GAA0B,IAAtBC,EAAWT,OAAf,CAsCA,GAAIS,EAAWT,OAAS,EACtB,MAAM,IAAIK,MACR,iFAIJ,kBAAqBI,EAAW,GAAhC,GAAK8C,EAAL,KAAYC,EAAZ,KACArI,KAAKwH,WAAWY,EAAM3D,OAAQ2D,EAAM1D,OAAQ,CAC1CnB,IAAK2E,EAAM3E,IACXH,MAAO8E,EAAM9E,MACb6E,eAAe,SAEH7H,IAAViI,GAEFrI,KAAKwH,WAAWa,EAAM5D,OAAQ4D,EAAM3D,OAAQ,CAC1CnB,IAAK4E,EAAM5E,IACXH,MAAO+E,EAAM/E,MACb6E,eAAe,SArDjB,GAAIC,EAAM3E,MAAQ4E,EAAM5E,IAEtBvD,KAAKsH,QAAQ,CACX7C,OAAQW,EACRV,OAAQW,EACR9B,IAAK2E,EAAM3E,IACXH,MAAO8E,EAAM9E,MACb6E,eAAe,QAEZ,CACL,IAAIK,EAAStI,KAAKgF,aAClBhF,KAAKgH,aAAa,CAChBnH,GAAIyI,EACJ/E,IAAK,sCACLH,MAAO,qBACP6E,eAAe,EACftE,SAAU,eAEZ3D,KAAKsH,QAAQ,CACX7C,OAAQW,EACRV,OAAQ4D,EACR/E,IAAK2E,EAAM3E,IACXH,MAAO8E,EAAM9E,MACb6E,eAAe,IAEjBjI,KAAKsH,QAAQ,CACX7C,OAAQ6D,EACR5D,OAAQW,EACR9B,IAAK4E,EAAM5E,IACXH,MAAO+E,EAAM/E,MACb6E,eAAe,OAxSzB,0BAuUE,SAAoB5E,GAClB,QAAmCjD,IAA/BJ,KAAKgE,aAAaX,EAAKxD,IACzB,MAAM,IAAIqF,MAAM,iBAElBlF,KAAKgE,aAAaX,EAAKxD,IAAMG,KAAKiD,MAAM4B,OACxC7E,KAAKiD,MAAM7B,KAAKiC,GAChBrD,KAAKkE,SAAS5C,IAAI+B,GAClBrD,KAAK8D,SAAW,EAChB9D,KAAK+D,OAAQ,IA/UjB,4BAqVE,SAAsBV,GACpB,QAAmCjD,IAA/BJ,KAAKgE,aAAaX,EAAKxD,IACzB,MAAM,IAAIqF,MAAM,iBAElBlF,KAAKgE,aAAaX,EAAKxD,IAAMG,KAAKiD,MAAM4B,OACxC7E,KAAKiD,MAAM7B,KAAKiC,GAChBrD,KAAK8D,SAAW,EAChB9D,KAAK+D,OAAQ,IA5VjB,wBA+VE,SAAkBmC,GAChBlG,KAAKiG,YAAYC,GACjBlG,KAAKiD,MAAQjD,KAAKiD,MAAMqB,QAAO,SAACqC,GAAD,YAAavG,IAANuG,KACtC3G,KAAK0G,aACL1G,KAAK8D,SAAW,EAChB9D,KAAK+D,OAAQ,EACb/D,KAAKkE,SAAW,IAAIlB,EAAShD,KAAKiD,SArWtC,6BAwWE,SAAuBiD,EAAgBqC,GACrC,IAAIpC,EAAYnG,KAAKgE,aAAakC,GAC9B7C,EAAOrD,KAAKiD,MAAMkD,GAEtB,GAAsB,eAAlB9C,EAAKM,SACP,MAAM,IAAIuB,MAAJ,yDAC8C7B,EAAKM,WAG3DpC,OAAOiH,OAAOnF,EAAMkF,GACpBvI,KAAK8D,SAAW,EAChB9D,KAAK+D,OAAQ,OACK3D,IAAdmI,EAAMhF,MACRvD,KAAKkE,SAAW,IAAIlB,EAAShD,KAAKiD,UArXxC,+BAyXE,SAAyBiD,EAAgBqC,GACvC,IAAIpC,EAAYnG,KAAKgE,aAAakC,GAC9B7C,EAAOrD,KAAKiD,MAAMkD,GAEtB,GAAsB,iBAAlB9C,EAAKM,SACP,MAAM,IAAIuB,MAAJ,2DACgD7B,EAAKM,WAG7DpC,OAAOiH,OAAOnF,EAAMkF,GACpBvI,KAAK8D,SAAW,EAChB9D,KAAK+D,OAAQ,IApYjB,4BAuYE,SAAsBmC,EAAgBqC,GACpC,IAAIpC,EAAYnG,KAAKgE,aAAakC,GAC9B7C,EAAOrD,KAAKiD,MAAMkD,GAEtB,GAAsB,cAAlB9C,EAAKM,SACP,MAAM,IAAIuB,MAAJ,wDAC6C7B,EAAKM,WAG1DpC,OAAOiH,OAAOnF,EAAMkF,GACpBvI,KAAK8D,SAAW,EAChB9D,KAAK+D,OAAQ,IAlZjB,qBAqZE,SAAeS,GACb,GACExE,KAAK6D,MAAMS,QACT,SAACK,GAAD,OAAOA,EAAEF,SAAWD,EAAKC,QAAUE,EAAED,SAAWF,EAAKE,UACrDG,OAAS,EAEX,MAAM,IAAIK,MAAM,sDAGlBlF,KAAK6D,MAAMzC,KAAKoD,GAChBxE,KAAK8D,SAAW,EAChB9D,KAAK+D,OAAQ,IAhajB,wBAmaE,SAAkBqB,EAAkBC,GAClC,IAAIoD,EAAOzI,KAAKiD,MAAM4B,OACtB7E,KAAKqG,YAAYjB,EAAUC,GAC3BrF,KAAKiD,MAAQjD,KAAKiD,MAAMqB,QAAO,SAACqC,GAAD,YAAavG,IAANuG,KAElC3G,KAAKiD,MAAM4B,SAAW4D,IACxBzI,KAAK0G,aACL1G,KAAKkE,SAAW,IAAIlB,EAAShD,KAAKiD,QAEpCjD,KAAK8D,SAAW,EAChB9D,KAAK+D,OAAQ,IA7ajB,wBAgbE,SAAkBU,EAAgBC,EAAgB6D,GAChD,IAAK,IAAIrH,EAAI,EAAGA,EAAIlB,KAAK6D,MAAMgB,OAAQ3D,IAAK,CAC1C,IAAIsD,EAAOxE,KAAK6D,MAAM3C,GAClBsD,EAAKC,SAAWA,GAAUD,EAAKE,SAAWA,IAC5C1E,KAAK6D,MAAM3C,GAAX,2BAAqBlB,KAAK6D,MAAM3C,IAAOqH,IAG3CvI,KAAK8D,SAAW9D,KAAK8D,SAAW,GAAK,EACrC9D,KAAK+D,OAAQ,MAxbjB,KC/Ea2E,EAAb,WAUE,WACE7I,EACAC,EACAC,EACA+D,EACA6E,EACAC,GACC,yBAdH/I,QAcE,OAbFC,UAaE,OAZFC,iBAYE,OAXF+D,aAWE,OAVF6E,WAUE,OATFC,WASE,EACA5I,KAAKH,GAAKA,EACVG,KAAKF,KAAOA,EACZE,KAAKD,YAAcA,EACnBC,KAAK8D,QAAUA,EACf9D,KAAK2I,MAAQA,EACb3I,KAAK4I,MAAQA,EAvBjB,yCA0BE,WACE,OAAO,IA3BX,uBA8BE,WACE5I,KAAK2I,MAAMxE,WA/Bf,qBAkCE,WACE,OAAOnE,SAnCX,KAuCa6I,EAAb,kDAME,WACEC,EACAhJ,EACAC,EACA+D,EACA6E,EACAC,GACC,IAAD,8BACA,eAAO,EAAG9I,EAAMC,EAAa+D,EAAS6E,EAAOC,IAV/CE,aASE,EAEA,EAAKA,QAAUA,EAFf,EAbJ,yCAkBE,WACE,OAAO,MAnBX,GACUJ,GAsBGK,EAAb,kDAUE,aAAe,IAAD,8BACZ,wBAASvJ,EAAT,2BAAqCY,GAAW,IALxCI,WAA6C,IAAI6B,IACzD,SAGY,EAVhB,+CAiBE,SAAmB1B,GAAmC,IAAD,OACnD,OAAO6B,MAAMC,KAAKzC,KAAKQ,WAAWO,MAAMC,IAAIL,IAAY,IAAIG,KAC1D,SAACjB,GAAD,OAAQ,EAAKwB,QAAQL,IAAInB,QAnB/B,wBAwBE,SAAkBc,GAChB,OAAOX,KAAKQ,WAAWO,MAAMiI,IAAIrI,KAzBrC,yBA4BE,SAAmBN,GACjB,IAAI4C,EAAQ5C,EAAO4I,KAAKhG,MAAMnC,KAAI,SAACuC,GACjC,IAAM6F,EAAmB7F,EAAK6F,KAU9B,cATO7F,EAAK6F,KACZ7F,EAAKM,SAAWuF,EACH,cAATA,GACF7F,EAAKsC,YAActC,EAAK8F,oBACjB9F,EAAK8F,cACM,iBAATD,IACT7F,EAAK+C,YAAc/C,EAAK+F,qBACjB/F,EAAK+F,eAEP/F,KAELsF,EAAQ,IAAI/E,EAAQvD,EAAOR,GAAGwJ,WAAYpG,EAAO5C,EAAO4I,KAAKpF,OACjE,OAAO,IAAI6E,EACTrI,EAAOR,GACPQ,EAAOP,KACPO,EAAON,YACPM,EAAOyD,QACP6E,EACAtI,EAAOuI,SAjDb,kCAqDE,SAA4BvI,GAC1B,MAAM,IAAI6E,MAAM,6BAtDpB,kCAyDE,SAA4B7E,GAC1B,MAAM,IAAI6E,MAAM,6BA1DpB,mBA6DE,SAAgB7E,GACdL,KAAKQ,WAAWc,IAAIjB,OA9DxB,GAAwCC,KCrE3BgJ,EAOX,WACEzJ,EACAuD,EACAmG,EACAxJ,EACAwI,GACC,yBAZI1I,QAYL,OAXKuD,WAWL,OAVKmG,aAUL,OATKxJ,iBASL,OARKyJ,gBAQL,EACAxJ,KAAKH,GAAKA,EACVG,KAAKoD,MAAQA,EACbpD,KAAKuJ,QAAUA,EACfvJ,KAAKD,YAAcA,EACnBC,KAAKwJ,WAAajB,EAElBtI,YAAeD,KAAM,CACnBH,GAAIK,IACJkD,MAAOlD,IACPqJ,QAASrJ,IACTH,YAAaG,IACbsJ,WAAYtJ,OAzBLoJ,EAiCJG,OAAS,SAAC5H,GACf,OAAQA,EAAS,IACf,IAAK,IACH,MAAM,iCAAN,OAAwCA,GAC1C,IAAK,IACH,MAAM,0CAAN,OAAiDA,GACnD,IAAK,IACH,MAAM,wCAAN,OAA+CA,GACjD,QACE,OAAOA,ICxCR,IAAM6H,EAAb,kDAME,aAAe,IAAD,8BACZ,wBAASlK,EAAT,sBAAgCY,GAAW,IANnCuJ,oBAKI,EAEZ,EAAKA,eAAiB,IAAIC,IAFd,EANhB,sDAkBE,SAA0B/J,GAA0C,IAAD,OACjE,OAAO,IAAIgK,SAAQ,SAACC,EAASC,GAC3B,IAAK,EAAKJ,eAAeX,IAAInJ,GAE3B,OADA,EAAK8J,eAAeK,IAAInK,EAAI,IACrB,EAAKoK,UAAUpK,GACnBqK,OAAM,SAACC,GAAW,IAAD,gBACO,EAAKR,eAAe3I,IAAInB,IAAO,IADtC,IAChB,2BAA0D,EACxDuK,EADwD,cAC/ChK,EAAW+J,IAFN,8BAKhB,MADA,EAAKR,eAAeU,OAAOxK,GACrBsK,KAEPjL,MAAK,SAAC0C,GAAW,oBAEO,EAAK+H,eAAe3I,IAAInB,IAAO,IAFtC,IAEhB,2BAA0D,EACxDuK,EADwD,SAC/CxI,IAHK,8BAMhB,OADA,EAAK+H,eAAeU,OAAOxK,GACpB+B,KAGX,EAAK+H,eAAe3I,IAAInB,GAAKuB,MAAK,SAACQ,EAAQuI,QAC3B/J,IAAV+J,EACFJ,EAAOI,GAEPL,EAAQlI,WA3CpB,yBAkDE,SAAmBvB,GACjB,cAAoBkB,OAAOC,OAAOnB,EAAOmJ,YAAzC,eAAsD,CAAjD,IAAiD,EAA3Cc,EAAK,KAAsC,cACnCA,GADmC,IACpD,2BAAiC,CAAC,IAAzBC,EAAwB,QAC/BA,EAAKC,gBAAkBD,EAAKE,wBACrBF,EAAKE,kBAHsC,+BAMtD,OAAOpK,MAzDX,GAAiC6B,KCQpBwI,EAAb,kDACE,aAAe,iDAERlL,EAFO,mBAGV,CAAEmL,cAAe,mBACjB,GALN,UAAmCzI,KCEtB0I,EAAS,CACpBC,aAAc,IAAI1K,EAClB2K,WAAY,IAAI3I,EAChB4I,cAAe,IAAIxK,EACnByK,mBAAoB,IAAIjC,EACxBkC,YAAa,IAAIvB,EACjBwB,cAAe,IAAIR,GAEpBS,OAAeC,QAAUR,EAGnB,IAAMS,EAAeC,wBAAsBV,GAE3C,SAASW,IACd,OAAOC,IAAMC,WAAWJ,G,kECtBbK,EAAWC,aAAS,WAC/B,IAAQd,EAAiBU,IAAjBV,aAMR,OAJAe,qBAAU,WACRf,EAAagB,MAAM,CAAEC,MAAO,IAAKC,OAAQ,MACxC,CAAClB,IAGF,cAAC,IAAMmB,SAAP,UACE,cAAC,IAAD,CAAKC,OAAQ,GAAb,SACE,eAAC,IAAD,CAAKC,UAAU,aAAaC,KAAM,GAAlC,UACE,cAAC,IAAWC,MAAZ,CAAkBC,MAAO,EAAzB,sBACA,cAAC,IAAD,CACE5D,KAAK,QACL6D,UAAU,EACVC,WAAW,aACXC,WAAY3B,EAAa4B,KACzBC,WAAY,SAACC,EAASzL,GAAV,OACV,cAAC,IAAK0L,KAAN,UACE,cAAC,IAAKA,KAAKC,KAAX,CACEC,OACE,cAAC,IAAD,CACEC,MAAM,SACNtE,KAAK,QACLuE,MAAO,CACLC,UAAW,EACXC,gBAAiB,CACf,UACA,UACA,UACA,WACAP,EAAQ7M,KAAKqN,WAAW,GAAK,IAVnC,SAaGR,EAAQ7M,KAAK,GAAGsN,gBAGrBC,MACE,cAAC,IAAD,CACEC,KAAMC,GAAOZ,QACba,QAAS,CAAEjL,UAAWoK,EAAQ9M,IAC9B4N,UAAW,GAHb,SAKGd,EAAQ7M,OAGbC,YAAa4M,EAAQ5M,6B,8DC1B1B2N,EAAcC,YAjBZ,CACb/E,MAAO,CACL,4BAA6B,CAC3BgF,OAAQ,iBACRC,aAAc,EACdC,WAAY,6BAEd,sBAAuB,CACrBC,YAAa,EACbC,aAAc,GAEhB,OAAQ,CACNC,WAAY,OAKSN,CACzBhC,aAAS,YAA6C,IAA1CuC,EAAyC,EAAzCA,QACJ3L,EAAYgL,GAAOZ,QAAQwB,eAAgB5L,UAEjD,EAAqCgJ,IAA7BV,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtBc,qBAAU,WACRf,EAAaZ,UAAU1H,KACtB,CAACsI,EAActI,IAElB,IAAMoK,EAAU9B,EAAa7J,IAAIuB,GACjC,QAAgBnC,IAAZuM,EACF,OAAO,cAAC,IAAD,IACF,GAAgB,OAAZA,EACT,OAAO,cAAC,IAAD,IAGT,IAAMyB,EAAU,CACd,CAAEC,UAAW,KAAMhB,MAAO,MAC1B,CACEgB,UAAW,OACXhB,MAAO,OACPiB,WAAY,SAACC,EAAcC,GACzB,OACE,cAAC,IAAD,CACElB,KAAMC,GAAO3E,MACb4E,QAAS,CAAE7M,QAAS6N,EAAI3O,IACxB4N,UAAW,CACTgB,MAAO3D,EAAW4D,iBAAiB,CAAE/B,QAASpK,KAJlD,SAOGiM,EAAI1O,SAKb,CAAEuO,UAAW,cAAehB,MAAO,gBAGrC,OACE,eAAC,IAAMrB,SAAP,WACE,eAAC,IAAWI,MAAZ,CAAkBC,MAAO,EAAzB,sBACYsC,IAAEC,WAAWjC,EAAQ7M,SAEjC,cAAC,IAAD,CACEoM,UAAWgC,EAAQtF,MACnBiG,YAAY,QACZvC,UAAU,EACVwC,QAAO,uCAAE,WAAOC,EAAQC,EAAM1K,GAArB,eAAA2K,EAAA,sEACYnE,EAAWe,MAAM,CAClCC,MAAOiD,EAAOG,SACdnD,QAASgD,EAAOI,QAAW,GAAKJ,EAAOG,SACvCE,WAAY,CAAEzC,QAASpK,KAJlB,cACH8M,EADG,yBAMA,CACLpG,KAAMoG,EAAOhO,QAAQP,IAAIwO,GACzBC,SAAS,EACTC,MAAOH,EAAOG,QATT,2CAAF,0DAYPC,QAAS,CACPC,QAAQ,GAEVC,YAAa,cAAC,IAAWvD,MAAZ,CAAkBC,MAAO,EAAzB,oBAEbqD,QAAQ,EACRE,WAAY,CACVV,SAAU,GACVW,gBAAiB,CAAC,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,SAE3DC,OAAO,KACP1B,QAASA,WAOnB,SAASkB,EAAUd,GACjB,MAAO,CACL3O,GAAI2O,EAAI3O,GACRC,KAAM0O,EAAI1O,KACVC,YAAayO,EAAIzO,a,0DC5Dd,SAASgQ,GAAoBnO,GAClC,IAAMoO,EAAUC,mBAAQ,WAEtB,IADA,IAAMC,EAAmB,IAAIC,IAC7B,MAA2B5O,OAAO6O,QAAQxO,EAAO4H,YAAjD,eAA8D,CAAzD,0BAAO6G,EAAP,KAAY/F,EAAZ,KACH4F,EAAI5O,IAAI+O,GADoD,oBAEzC/F,GAFyC,IAE5D,2BACE,IADyB,IAAhBC,EAAe,QACxB,MAAkBhJ,OAAO+O,KAAK/F,EAAKgG,YAAnC,eAAgD,CAA3C,IAAMC,EAAG,KACZN,EAAI5O,IAAIkP,IAJgD,+BAQ9D,OAAOhO,MAAMC,KAAKyN,KACjB,CAACtO,EAAO/B,KAEHqL,EAAkBK,IAAlBL,cAMR,OAJAU,qBAAU,WACRV,EAAcuF,WAAWT,KACxB,CAACpO,EAAO/B,KAEJ0B,OAAOmP,YACZV,EAAQlP,KAAI,SAACjB,GACX,IAAMQ,EAAS6K,EAAclK,IAAInB,GACjC,OAAIQ,EACK,CAACR,EAAIQ,GAEP,CAACR,EAAI,CAAEA,KAAI8Q,aAAyB,OAAXtQ,Q,2BCjEzBuQ,GAAwB,SAAC,GAOuC,IAN3EhP,EAM0E,EAN1EA,OAM0E,IAL1EiP,cAK0E,SAJvEC,EAIuE,mBAC1E,OAAID,EAEA,iDAAUC,GAAV,cACGlP,EAAOwB,MAAP,GADH,KACyBxB,EAAO/B,GADhC,QAOF,eAAC,IAAD,yBACEkR,KAAMzH,EAAOG,OAAO7H,EAAO/B,IAC3BmR,eAAe,GACXF,GAHN,cAKGlP,EAAOwB,MAAP,GALH,KAKyBxB,EAAO/B,GALhC,S,mDCnBSoR,GAAuBtF,aAClC,YAQO,IAPL9J,EAOI,EAPJA,SACAqP,EAMI,EANJA,OAMI,IALJC,oBAKI,SACIlG,EAAgBM,IAAhBN,YAERW,qBAAU,WACRX,EAAYmG,mBAAmBvP,KAC9B,CAACoJ,EAAapJ,IAEjB,IAAMD,EAASqJ,EAAYjK,IAAIa,GAE/B,YAAezB,IAAXwB,EACEuP,EACK,cAAC,IAAD,IAGF,+BAAOtP,IAGD,OAAXD,EAEA,cAAC,KAAD,CACEyP,OAAO,MACPhE,MAAM,MACNiE,SAAQ,iBAAYzP,EAAZ,qBAKPqP,EAAOtP,M,yBCjCL2P,GAA0B,SAAC,GAUjC,IATLC,EASI,EATJA,SASI,IARJX,cAQI,SAPDC,EAOC,mBACJ,YHmBqD1Q,IGnB7BoR,EHmBYb,aGlB9Ba,EAASb,aAET,gDAAUG,GAAV,aACE,0CAAaU,EAAS3R,GAAtB,uBAGKgR,EACF,iDAAUC,GAAV,kBAAuBU,EAAS3R,GAAhC,QAKL,eAAC,IAAD,yBAAckR,KAAM,GAAIC,eAAe,GAAUF,GAAjD,kBACIU,EAAS3R,GADb,QAOFgR,EAEA,iDAAUC,GAAV,cACGU,EAASpO,MADZ,KACqBoO,EAAS3R,GAD9B,QAOF,cAAC,IAAD,yBAAckR,KAAMS,EAASjO,IAAKyN,eAAe,GAAUF,GAA3D,aACGU,EAASpO,U,oBCzCHqO,GAAuB9D,YALrB,CACb+D,KAAM,CACJC,QAAS,SAGuBhE,EAClC,SACEpF,GAIA,MAA8BqJ,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAgB,WACpBD,GAAYD,IAERG,EAAMH,EACV,cAACI,GAAA,EAAD,CAAsBC,QAASH,IAE/B,cAACI,GAAA,EAAD,CAAaD,QAASH,IAGxB,OACE,gCACE,eAAC,IAAD,CAAOtJ,KAAM,EAAb,UACGF,EAAM6J,SACNJ,KAEH,qBAAK9F,UAAW2F,EAAU,GAAKtJ,EAAM2F,QAAQwD,KAA7C,SACGnJ,EAAM8J,oBCtBJC,GAAiB3E,YAFf,GAEeA,EAC5B,YAAkE,IAA/D4E,EAA8D,EAA9DA,MACD,MAAmB,aAAfA,EAAMrJ,KAEN,cAAC+H,GAAD,CACEpP,SAAU0Q,EAAMA,MAChBrB,OAAQ,SAACtP,GACP,OAAO,cAAC,GAAD,CAAuBA,OAAQA,OAM3B,SAAf2Q,EAAMrJ,KAEN,cAACuI,GAAD,CACEY,YACE,+BACE,+BACE,0CADF,IACoBE,EAAMA,MAAMC,YAEhC,+BACE,sCADF,IACgBD,EAAMA,MAAME,OAD5B,MACuCF,EAAMA,MAAMG,SAEnD,+BACE,2CADF,IACqBH,EAAMA,MAAMI,aAEjC,+BACE,gDAAuB,IACvB,cAAC,IAAD,CACE5B,KAAMwB,EAAMA,MAAMK,cAClB5B,eAAe,EAFjB,SAIGuB,EAAMA,MAAMK,sBAlBvB,SAwBGL,EAAMA,MAAMM,OAKA,aAAfN,EAAMrJ,KAEN,cAACuI,GAAD,CACEY,YACE,+BACE,+BACE,uCADF,IACiBE,EAAMA,MAAMO,WAD7B,KAC2C,IACxCP,EAAMA,MAAMQ,cAEf,+BACE,sCADF,IACgBR,EAAMA,MAAMS,WARlC,SAaGT,EAAMA,MAAMU,SAKA,oBAAfV,EAAMrJ,KAEN,iCACGqJ,EAAMA,MAAMhE,KADf,IACqB,kCAAKgE,EAAMA,MAAMW,eAKvB,oBAAfX,EAAMrJ,KAEN,cAACuI,GAAD,CACEY,YACE,+BACE,+BACE,2CADF,IACqBE,EAAMA,MAAMI,aAEjC,+BACE,uCAAc,IACd,cAAC,IAAD,CAAc5B,KAAMwB,EAAMA,MAAMY,MAAOnC,eAAe,EAAtD,SACGuB,EAAMA,MAAMY,cATvB,SAeE,eAAC,IAAD,CACEpC,KAAI,wCAAmCwB,EAAMA,MAAMa,SAA/C,YAA2Db,EAAMA,MAAMc,WAC3ErC,eAAe,EAFjB,UAIGuB,EAAMA,MAAMa,SAJf,MAI4Bb,EAAMA,MAAMc,UAJxC,UAWqB,kBAAhBd,EAAMA,MACR,+BAAOe,KAAKC,UAAUhB,EAAMA,SAG9B,+BAAOA,EAAMA,W,gCCtGXiB,GAAqB7F,YANnB,CACb4C,WAAY,CACVkD,WAAY,KAIkB9F,EAChC,YASuC,IAAD,EARpCpD,EAQoC,EARpCA,KACA2D,EAOoC,EAPpCA,QACAwF,EAMoC,EANpCA,QACG5C,EAKiC,mBAC9BP,EAAa,GADiB,cAElBhG,EAAKC,iBAFa,IAEpC,2BAAwC,CAAC,IAA9BgG,EAA6B,QAClCmD,OAAI,EAENA,EADkC,IAAhCpJ,EAAKgG,WAAWC,GAAK3L,OAErB,cAAC,IAAW+O,KAAZ,CAAiB1K,KAAK,YAAY2K,QAAQ,EAA1C,sBAKKtJ,EAAKgG,WAAWC,GAAK1P,KAAI,SAACyR,EAAOuB,GACtC,OACE,8BACE,cAACxB,GAAD,CAAgBC,MAAOA,KADfuB,MAOhBvD,EAAWnP,KACT,eAAC,IAAD,CAAK6K,OAAQ,EAAb,UACE,cAAC,IAAD,CAAKE,KAAM,EAAX,SACE,cAAC,GAAD,CAAyBqF,SAAUkC,EAAQlD,OAE7C,cAAC,IAAD,CAAKrE,KAAM,GAAX,SAAgBwH,MAJGnD,KArBW,8BA8BpC,OACE,gDAASM,GAAT,cACE,8BACE,cAACwB,GAAD,CAAgBC,MAAOhI,EAAKgI,UAE9B,qBAAKrG,UAAWgC,EAAQqC,WAAxB,SAAqCA,WCxChCwD,GAAoBpG,YATlB,CACbqG,YAAa,CACXC,OAAQ,EACRrG,OAAQ,OACRsG,MAAO,OACPhH,gBAAiB,SAIYS,CAC/BhC,aACE,YASmC,IARjC/J,EAQgC,EARhCA,OACA8R,EAOgC,EAPhCA,QACAS,EAMgC,EANhCA,kBACAjG,EAKgC,EALhCA,aAM0B9N,IAAtB+T,IACFA,EAAoB5S,OAAO+O,KAAK1O,EAAO4H,aAGzC,IALgC,EAK1B4K,EAAa,GALa,cAMdD,GANc,IAMhC,2BAAqC,CAAC,IAA3B9D,EAA0B,QAEnC,QAA+BjQ,IAA3BwB,EAAO4H,WAAW6G,GAAtB,CAEA,IAAM/F,EAAQ1I,EAAO4H,WAAW6G,GAC5B+D,EAAWvP,OAAS,GACtBuP,EAAWhT,KACT,oBAA2B8K,UAAWgC,EAAQ8F,aAA9C,kBAAoB3D,KAGxB+D,EAAWhT,KACT,eAAC,IAAD,CAAK6K,OAAQ,EAAb,UACE,cAAC,IAAD,CAAKE,KAAM,EAAX,SACE,cAAC,IAAWyH,KAAZ,CAAiBS,QAAQ,EAAzB,SACE,cAAC,GAAD,CAAyB7C,SAAUkC,EAAQrD,SAG/C,cAAC,IAAD,CAAKlE,KAAM,GAAX,SACE,cAAC,IAAD,CAAOmI,UAAU,WAAWtH,MAAO,CAAEuH,MAAO,QAA5C,SACGjK,EAAMxJ,KAAI,SAACyJ,EAAMiK,GAChB,OACE,cAAChB,GAAD,CAEEjJ,KAAMA,EACNmJ,QAASA,GAFJc,YAXInE,MAjBO,8BAwChC,OACE,cAAC,IAAD,CAAOiE,UAAU,WAAWtH,MAAO,CAAEuH,MAAO,QAAU9L,KAAM,EAA5D,SACG2L,Q,oBC3DEK,GAA0B9G,YANxB,CACb+G,KAAM,CACJH,MAAO,MAI4B5G,CACrChC,aACE,YAWmC,IAVjC/J,EAUgC,EAVhCA,OACA8R,EASgC,EAThCA,QACAiB,EAQgC,EARhCA,cACAC,EAOgC,EAPhCA,iBACA1G,EAMgC,EANhCA,QAOA,EAA4B0D,oBAAS,GAArC,mBAAOiD,EAAP,KAAeC,EAAf,KAEMvM,EAAQ0H,mBAAQ,WACpB,OAAO1O,OAAO+O,KAAK1O,EAAO4H,YAAY1I,KAAI,SAACuP,GAAD,MAAU,CAClDjN,MAAM,GAAD,OAAKsQ,EAAQrD,GAAKjN,MAAlB,aAA4BiN,EAA5B,KACLkC,MAAOlC,QAER,CAACqD,EAAS9R,EAAO/B,KAUpB,OACE,gCACE,cAAC,KAAD,CAAUkV,SAAU,kBAAMD,GAAWD,IAASG,QAASH,EAAvD,8BAGA,cAAC,KAAD,CACEI,KAAK,WACLC,YAAY,EACZzF,QAASlH,EACT4M,iBAAiB,QACjBjJ,UAAWgC,EAAQwG,KACnBnC,MAAOoC,EACPS,SApBW,SAAC7C,GAChBqC,EAAiBD,EAAcU,OAAO,CAAC9C,MAoBnC+C,WAjBa,SAAC/C,GAClBqC,EAAiBD,EAAcrQ,QAAO,SAAC+L,GAAD,OAASA,IAAQkC,gBCvBlDgD,GAAsB5H,YATpB,CACb+G,KAAM,CACJ,kBAAmB,CACjBc,OAAQ,GAEVC,SAAU,MAIqB9H,EACjC,YAAiE,IAA9D/L,EAA6D,EAA7DA,OACK8R,EAAU3D,GAAoBnO,GACpC,EAA0CgQ,mBAAmB,IAA7D,mBAAO+C,EAAP,KAAsBC,EAAtB,KAEA,OACE,gCACE,cAAC,IAAD,CAAO5H,MAAO,CAAE0I,MAAO,SAAvB,SACE,cAACjB,GAAD,CACE7S,OAAQA,EACR8R,QAASA,EACTiB,cAAeA,EACfC,iBAAkBA,MAGtB,6BACE,eAAC,IAAD,CAAc7D,KAAMzH,EAAOG,OAAO7H,EAAO/B,IAAzC,UACG,IACA+B,EAAOwB,MAAP,QAGL,4BACE,kCAAKxB,EAAO/B,GAAZ,SAEF,cAAC,IAAW+T,KAAZ,CAAiB1K,KAAK,YAAtB,SACGtH,EAAO2H,QAAP,GAAqBoM,KAAK,SAE7B,4BAAI/T,EAAO7B,YAAP,KACJ,uBACA,cAACgU,GAAD,CACEnS,OAAQA,EACR8R,QAASA,EACTS,kBACEQ,EAAc9P,OAAS,EAAI8P,OAAgBvU,UAShD,SAASwV,GACdhU,EACAiU,GAGA,IACIC,EAEFA,EAHiC,kBAAXlU,EAGZ,cAAC2T,GAAD,CAAqB3T,OAAQA,IAGrC,cAACqP,GAAD,CACEpP,SAAUD,EACVsP,OAAQ,SAACtP,GAAD,OAAoB,cAAC2T,GAAD,CAAqB3T,OAAQA,OAK/DmU,KAAMC,KAAK,CACTC,KAAM,KACNH,UACAI,UAAW,CAAEV,QAAS,EAAGvI,WAAY,IACrCkJ,cAAe,CAAEnJ,MAAO,CAAE2E,QAAS,SACnCyE,cAAc,EACdC,MAAM,EACNR,OAAQA,EACRtB,MAAO,qBACPvH,MAAO,CAAEsJ,IAAK,M,gDC/DLC,GAAyB5I,YAdvB,CACb+G,KAAM,CACJ,kBAAmB,CACjBc,OAAQ,GAEVC,SAAU,MASwB9H,EACpC,YAUiC,IAT/B/L,EAS8B,EAT9BA,OACAwQ,EAQ8B,EAR9BA,SACAlE,EAO8B,EAP9BA,QACA2H,EAM8B,EAN9BA,OACG/E,EAK2B,mBAGxB4C,EAAU3D,GAAoBnO,GAC9BkU,EACJ,gDAAShF,GAAT,IAAoB5E,UAAS,UAAKgC,EAAQwG,KAAb,YAAqB5D,EAAU5E,WAA5D,UACE,+BACE,eAAC,IAAD,CAAc6E,KAAMzH,EAAOG,OAAO7H,EAAO/B,IAAKmR,eAAe,EAA7D,UACG,IACApP,EAAOwB,MAAP,MAEH,cAAC,KAAD,CACE4J,MAAO,CAAEwJ,cAAe,EAAGC,WAAY,EAAGC,OAAQ,WAClDxE,QAAS,WACP0D,GACEhU,OACWxB,IAAXyV,EAAuBA,EAAS,OAAIzV,SAK5C,4BACE,kCAAKwB,EAAO/B,GAAZ,SAEF,cAAC,IAAW+T,KAAZ,CAAiB1K,KAAK,YAAtB,SACGtH,EAAO2H,QAAP,GAAqBoM,KAAK,SAE7B,4BAAI/T,EAAO7B,YAAP,KACJ,uBACA,cAACgU,GAAD,CACEL,QAASA,EACT9R,OAAQA,EACRuS,kBAAmB,CA9BN,aAmCnB,OACE,cAAC,KAAD,CAAS2B,QAASA,EAASD,OAAQA,EAAnC,SACGzD,O,iDCzEIuE,GAKT,SAAC,GAA6C,IAA3CpE,EAA0C,EAA1CA,MAAOqE,EAAmC,EAAnCA,eAAmB9F,EAAgB,mBAC/C,OACE,8CAAMzD,MAAOkF,EAAMlJ,YAAgByH,GAAnC,aACGyB,EAAMsE,QAAQD,O,UCMRE,GAAenJ,YARb,CACboJ,aAAc,CACZC,QAAS,EACTpJ,OAAQ,YACRC,aAAc,IAIUF,EAC1B,YAamC,IAZjCsI,EAYgC,EAZhCA,KACA/H,EAWgC,EAXhCA,QACA+I,EAUgC,EAVhCA,SACAlC,EASgC,EAThCA,SASgC,IARhCmC,qBAQgC,MARhBC,KAAK,GAQW,MAPhCC,uBAOgC,MAPdC,KAAK,GAOS,EAChC,EAA0CzF,oBAAS,GAAnD,mBAAO0F,EAAP,KAAsBC,EAAtB,KAQMC,OAA+BpX,IAAb6W,EAAyBK,EAAgBL,EAEjE,OACE,cAAC,KAAD,CACEhB,KAAMA,EACN/B,MAAOsD,EAAkBN,EAAgBE,EACzClL,UAAWgC,EAAQ6I,aACnB7E,QAdW,WACb,QAAiB9R,IAAb6W,QAAuC7W,IAAb2U,EAC5B,OAAOA,GAAUkC,GAEnBM,GAAkBD,SCpBlBG,GAAS,CACbC,uBAAwB,CACtBxD,MAAOiD,KAAK,IAEdQ,gBAAiB,CACfzD,MAAOmD,KAAK,GACZ,UAAW,CACTnD,MAAM,GAAD,OAAKmD,KAAK,GAAV,iBAGTO,uBAAwB,CACtB1D,MAAOmD,KAAK,GACZX,OAAQ,YAICmB,GAA+BlK,YAAW8J,GAAX9J,EAC1C,YASmC,IARjCtN,EAQgC,EARhCA,OACAU,EAOgC,EAPhCA,MACAmN,EAMgC,EANhCA,QAMgC,IALhC4J,YAKgC,MALzB,EAKyB,EAChC,EAA4DlG,oBAAS,GAArE,mBAAOmG,EAAP,KAA+BC,EAA/B,KAEMvW,EAAQpB,EAAOoB,MAAMV,IAAU,GAC/BkX,EAAe,GACrB,GAAIxW,EAAMoD,OAAS,EAAG,CAAC,IAAD,gBACQpD,EAAM,GAAGO,kBAAkBkW,MAAM,EAAGJ,IAD5C,yBACXH,EADW,QAEZzL,EACJyL,EAAgB9V,WAAaJ,EAAM,GAAGI,SAClCqM,EAAQwJ,uBACRxJ,EAAQyJ,gBAEdM,EAAa7W,KACX,8BACE,eAAC,IAAD,CAAOqH,KAAM,EAAb,UACE,cAACqO,GAAD,CAAcb,KAAMkC,OACpB,cAACrB,GAAD,CAAcb,KAAMmC,OACpB,cAACnH,GAAD,CACEpP,SAAU8V,EAAgB9V,SAC1BqP,OAAQ,SAACtP,GAAD,OACN,cAAC2U,GAAD,CAAwB3U,OAAQA,EAAhC,SACE,cAAC,GAAD,CACEiP,QAAQ,EACRjP,OAAQA,EACRsK,UAAWA,SAKnB,uBAAMA,UAAWA,EAAjB,cAEE,cAAC,GAAD,CACEqG,MAAOoF,EAAgBU,YACvBzB,eAAgB,IAJpB,WAhBMe,EAAgB9V,YAP9B,2BAAwE,IADpD,8BAuCpB,IAAM2S,EAAM/S,EAAM,GAAGO,kBAAkBsW,WACrC,SAACC,GAAD,OAAeA,EAAU1W,WAAaJ,EAAM,GAAGI,YAEjD,IAAa,IAAT2S,GAAcA,GAAOsD,EAAM,CAC7B,IAAMH,EAAkBlW,EAAM,GAAGO,kBAAkBwS,GACnDyD,EAAa7W,KACX,8BACE,eAAC,IAAD,CAAOqH,KAAM,EAAb,UACE,cAACqO,GAAD,CAAcb,KAAMkC,OACpB,cAACrB,GAAD,CAAcb,KAAMmC,OACpB,cAACnH,GAAD,CACEpP,SAAU8V,EAAgB9V,SAC1BqP,OAAQ,SAACtP,GAAD,OACN,uBAAMsK,UAAWgC,EAAQwJ,uBAAzB,cACIlD,EADJ,QAEE,cAAC+B,GAAD,CAAwB3U,OAAQA,EAAhC,SACE,cAAC,GAAD,CAAuBiP,QAAQ,EAAMjP,OAAQA,YAKrD,uBAAMsK,UAAWgC,EAAQwJ,uBAAzB,cAEE,cAAC,GAAD,CACEnF,MAAOoF,EAAgBU,YACvBzB,eAAgB,IAJpB,WAfMe,EAAgB9V,WA4B1BJ,EAAM,GAAGO,kBAAkB6C,OAASiT,GACtCG,EAAa7W,KACX,8BACE,cAAC,IAAWwS,KAAZ,CACE1H,UAAWgC,EAAQ0J,uBACnB1F,QAAS,kBAAM8F,GAA2BD,IAF5C,uBADO,aAYf,IAAM3J,EAAe,CACnB,CACEC,UAAW,KACXhB,MAAO,SACP6D,OAAQ,SAACrP,GACP,OACE,cAACoP,GAAD,CACEpP,SAAUA,EACVqP,OAAQ,SAACtP,GAAD,OACN,cAAC2U,GAAD,CAAwB3U,OAAQA,EAAhC,SACE,cAAC,GAAD,CAAuBiP,QAAQ,EAAMjP,OAAQA,WAOzD,CACEyM,UAAW,QACXhB,MAAO,QACP6D,OAAQ,SAACsH,GACP,OAAO,cAAC,GAAD,CAAQjG,MAAOiG,EAAO5B,eAAgB,MAGjD,CACEvJ,MAAO,SACP6D,OAAQ,WACN,OACE,cAAC,IAAD,CAAOzI,KAAM,EAAb,SACE,cAAC,IAAD,0BAOV,OACE,eAAC,IAAMuD,SAAP,WACGiM,EACD,cAAC,KAAD,CACE5K,MAAM,qBACNwE,QAASkG,EACT/K,MAAO,CAAEsJ,IAAK,IACdJ,UAAW,CAAEc,QAAS,GACtBzC,MAAO,MACPkE,KAAM,kBAAMT,GAA0B,IACtCU,SAAU,kBAAMV,GAA0B,IAP5C,SASE,cAAC,IAAD,CACEnJ,YAAY,QACZvC,UAAU,EACVoD,QAAQ,EACRE,WAAY,CACVV,SAAU,GACVW,gBAAiB,CAAC,KAAM,KAAM,MAAO,MAAO,MAAO,SAErDC,OAAO,KACP1B,QAASA,EACTU,QAAO,uCAAE,WAAOC,EAAQC,EAAM1K,GAArB,SAAA2K,EAAA,+EACApF,QAAQC,QAAQ,CACrB0F,MAAO/N,EAAMoD,OAAS,EAAIpD,EAAM,GAAGO,kBAAkB6C,OAAS,EAC9D0K,SAAS,EACTtG,KACmB,IAAjBxH,EAAMoD,OACF,GACApD,EAAM,GAAGO,kBACNkW,OACEnJ,EAAOI,QAAW,GAAKJ,EAAOG,SAC/BH,EAAOI,QAAWJ,EAAOG,UAE1BpO,KAAI,SAAC6W,EAAiB5W,GAAlB,MAA6B,CAChClB,GAAI8X,EAAgB9V,SACpB2W,MAAOb,EAAgBU,mBAd5B,2CAAF,oECnLbZ,GAAS,CACb9V,KAAM,CACJgX,eAAgB,aAElBC,aAAc,CACZ1E,MAAOmD,KAAK,KAIHwB,GAAgBlL,YAAW8J,GAAX9J,EAC3B,YAWmC,IAVjCmL,EAUgC,EAVhCA,KACAzY,EASgC,EAThCA,OACAU,EAQgC,EARhCA,MACAmN,EAOgC,EAPhCA,QAOgC,IANhC4J,YAMgC,MANzB,EAMyB,EAC1BrW,EAAQpB,EAAOoB,MAAMV,IAAU,GACjCqT,EAAa3S,EAAMsX,SAAQ,SAACpX,EAAMZ,GACpC,IAAIiY,EACQ,IAAVjY,EACI+X,EAAKrV,UAAU,EAAG9B,EAAKf,OACvBkY,EAAKrV,UAAUhC,EAAMV,EAAQ,GAAGkY,IAAKtX,EAAKf,OAC5CsY,EAAcJ,EAAKrV,UAAU9B,EAAKf,MAAOe,EAAKsX,KAC9CE,OAAc/Y,OACIA,IAAlBuB,EAAKE,WACPsX,EAAc,WACZvD,GAAwBjU,EAAKE,YAGjC,IAAMuX,EACJ,cAAC,IAAD,CAEErI,KAAMpP,EAAK0X,IACXrI,eAAe,EACfsI,wBAAyB,CACvBC,OAA+B,KAAvBL,EAAYM,OAAgB,UAAYN,GAElDhN,UACEgC,EAAQvM,WACWvB,IAAlBuB,EAAKE,SAAyB,IAAMqM,EAAQ0K,aAAe,IAE9D5L,MAAyB,OAAlBrL,EAAKE,SAAoB,CAAEqS,MAAO,QAAW,GACpDiF,YAAaA,GAXRpY,GAeT,YAAsBX,IAAlBuB,EAAKE,SACA,CAACmX,EAAQI,GAgBX,CAACJ,EAXN,cAAC/H,GAAD,CAEEpP,SAAUF,EAAKE,SACfqP,OAAQ,SAACtP,GAAD,OACN,cAAC2U,GAAD,CAAwB3U,OAAQA,EAAQiU,OAAQ,IAAhD,SACGuD,MAJArY,OAmBX,OANqB,IAAjBU,EAAMoD,OACRuP,EAAWhT,KAAK0X,GAEhB1E,EAAWhT,KAAK0X,EAAKrV,UAAUhC,EAAMA,EAAMoD,OAAS,GAAGoU,MAIvD,gCACG7E,EACD,cAACyD,GAAD,CACExX,OAAQA,EACRU,MAAOA,EACP+W,KAAMA,UCrFHL,GAAS,CACpB7O,MCVyB,CACzB2L,MAAO,OACP,4BAA6B,CAC3B3G,OAAQ,iBACRC,aAAc,EACdC,WAAY,6BAEd,sBAAuB,CACrBC,YAAa,EACbC,aAAc,GAEhB,OAAQ,CACNC,WAAY,KAEd,oBAAqB,CACnBwL,cAAe,SDFNC,GAAiB/L,YAAW8J,GAAX9J,EAC5B,YASmC,IARjC/E,EAQgC,EARhCA,MACA6F,EAOgC,EAPhCA,MACAP,EAMgC,EANhCA,QACAyL,EAKgC,EALhCA,cAMMvL,EAAUxF,EAAMwF,QAAQtN,KAAI,SAAC8Y,EAAKjU,GAAN,MAAuB,CACvD0I,UAAW,CAAC,MAAO1I,EAAa,SAChC0H,MAAOuM,EACP1I,OAAS,SAACqB,EAAelS,GACvB,OACE,cAACwY,GAAD,CAAeC,KAAMvG,EAAOlS,OAAQA,EAAQU,MAAO4E,SAKzD,OACE,eAAC,IAAMqG,SAAP,WACE,cAAC,IAAD,CACEE,UAAWgC,EAAQtF,MACnBiG,YAAY,QACZvC,UAAU,EACVwC,QAAO,uCAAE,WAAOC,EAAQC,EAAM1K,GAArB,eAAA2K,EAAA,sEACaR,EAClBM,EAAOG,UACNH,EAAOI,QAAW,GAAKJ,EAAOG,UAH1B,cACH7N,EADG,yBAKA,CACL4H,KAAM5H,EACNkO,SAAS,EACTC,MAAO5G,EAAMH,OARR,2CAAF,0DAWPiH,QAAQ,EACRE,WAAY,CACVV,SAAU,EACVW,gBAAiB,CACf,IACA,KACA,KACA,KACA,MACA,MACA,MACA,SAGJF,iBAC4BvP,IAA1BwI,EAAMiR,QAAQC,QACZ,cAAC,IAAD,CAAc/I,KAAMnI,EAAMiR,QAAQC,QAAS9I,eAAe,EAA1D,SACGpI,EAAM9I,OAGT8I,EAAM9I,KAGV6Z,cAAeA,EACf7J,OAAO,QACP1B,QAASA,IAEX,cAAC,GAAD,CAAkBxF,MAAOA,UAMpBmR,GAER,SAAC,GAAe,IAAbnR,EAAY,EAAZA,MACAoN,EAAoC,CACxC,CAAC,cAAepN,EAAM7I,mBAGMK,IAA1BwI,EAAMiR,QAAQC,QAChB9D,EAAK5U,KAAK,CACR,eACA,cAAC,IAAD,CAAc2P,KAAMnI,EAAMiR,QAAQC,QAAS9I,eAAe,EAA1D,SACGpI,EAAMiR,QAAQxM,UAInB2I,EAAK5U,KAAK,CAAC,eAAgB,QAE7B4U,EAAK5U,KAAK,CACR,yBAC2BhB,IAA3BwI,EAAMiR,QAAQhY,SACZ,cAACoP,GAAD,CACEpP,SAAU+G,EAAMiR,QAAQhY,SACxBqP,OAAQ,SAACtP,GAAD,OAAY,cAAC,GAAD,CAAuBA,OAAQA,OAGrD,QAIJ,IAAIkU,GAAWlN,EAAMiR,QAAQG,kBAAoB,IAAIlZ,KACnD,SAACmZ,EAAWlZ,GACV,OACE,gCACE,8BACG,IAAImZ,OAAOD,EAAU5N,OADxB,IACiC4N,EAAUE,WAE3C,4BAAIF,EAAUG,gBACd,4BAAIH,EAAUI,iBALNtZ,MAYhB,OAFAiV,EAAK5U,KAAK,CAAC,oBAAqB0U,EAAQjR,OAAS,EAAIiR,EAAU,QAG7D,cAAC,KAAD,CAAczI,MAAM,aAAa5E,KAAK,QAAtC,SACGuN,EAAKlV,KAAI,mCAAEsC,EAAF,KAASmP,EAAT,YACR,cAAC,KAAa3F,KAAd,CAA+BxJ,MAAOA,EAAtC,SACGmP,GADqBnP,S,uHEzHzB,SAASkX,GACdC,EACAC,EACAC,EAHK,GAgBM,IAXTC,EAWQ,EAXRA,QACAC,EAUQ,EAVRA,QACAC,EASQ,EATRA,IACAC,EAQQ,EARRA,OAgCF,OAvBAH,OAAsBta,IAAZsa,EAAwB,EAAIA,EACtCC,OAAsBva,IAAZua,EAAwB,EAAIA,OAEvBva,IAAXya,GACFJ,EAAM3Z,KAAI,YAAqB,IAAlByN,EAAiB,EAAjBA,KAAMuM,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EACpBR,EAAOS,SAAS,OAAQ,CACtBC,MAAM,yBACJ1M,OACAuM,EAAGA,EAAIJ,EACPK,EAAGA,EAAIJ,EACPO,WAAYV,EAASU,YAClBN,GALA,IAOHO,KAAMN,EAAO3G,MACb2G,OAAQA,EAAO3G,MACfkH,UAAWP,EAAOtG,QAEpBzU,KAAM,UACNub,WAAW,OAKVZ,EAAM3Z,KAAI,YAAqB,IAAlByN,EAAiB,EAAjBA,KAAMuM,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EAC3B,OAAOR,EAAOS,SAAS,OAAQ,CAC7BC,MAAM,aACJ1M,OACA4M,KAAM,QACNL,EAAGA,EAAIJ,EACPK,EAAGA,EAAIJ,EACPO,WAAYV,EAASU,YAClBN,GAEL9a,KAAM,OACNub,WAAW,OCtCV,SAASC,GAAmBd,GACjC,IAAMe,EAAef,EAASgB,oBAAoB,GA+DlD,OAVAC,KAAGC,aACD,cACA,CACEC,KAAM,SAACf,EAAmBL,GACxB,OAvDO,SAACK,EAAmBL,GACfK,EAAI5N,MAAMgK,QADgC,IAAD,IAGnD4E,GAAc,UAAAhB,EAAIiB,gBAAJ,eAAc9P,SAAU,EAuB5C,EAAyByO,EAASsB,SAChClB,EAAIxX,MACJmY,EACA,UAHMd,EAAR,EAAQA,MAAOlG,EAAf,EAAeA,MAMTxH,EAAQwN,EAAOS,SAAS,SAAU,CACtCC,MAAM,aAGJc,EALkB,IAMfnB,EAAI5N,OAETlN,KAAM,WASR,OANAwa,GAASC,EAAOC,EAAUC,EAAO,CAC/BC,SAAUnG,EAAQ,EAClBoG,QAboB,GAaKiB,EACzBhB,IAAG,OAAEA,QAAF,IAAEA,GAAF,UAAEA,EAAKiB,gBAAP,aAAE,EAAe7O,MACpB6N,OAAQ,CAAE3G,MAAO,QAASK,MAAO,KAE5BxH,EAOI4O,CAAKf,EAAsBL,KAGtC,eAGKC,E,8CCtFHwB,GAAU,SACdC,EACAC,GAEA,OAAQ,WAAmB,IAAD,uBAAdC,EAAc,yBAAdA,EAAc,gBACxB,IAAMC,EAAMD,EAAKxG,KAAK,KAItB,YAHmBvV,IAAf8b,EAAME,KACRF,EAAME,GAAOH,EAAE,WAAF,EAAME,IAEdD,EAAME,KAcJC,GAUX,WAAYC,GAAuB,IAAD,gCATxBA,eASwB,OARxBC,0BAQwB,OAPxBC,iBAA8C,GAOtB,KANxBC,kBAA+C,GAMvB,KALxBC,uBAAoD,GAK5B,KAJxBC,0BAEN,GAE8B,KAqBlCC,SAAW,WACT,OAAO,EAAKC,kBAAkB,EAAG,EAAKP,UAAUzX,OAAS,EAAG,IAtB5B,KAqClCgY,kBAAoBb,IAClB,SACEpb,EACAqY,EACA6D,GAEA,IAAMC,EAAiB,EAAKC,sBAC1Bpc,EACAqY,EACA6D,GAEF,QAAuB1c,IAAnB2c,GAAgCA,GAAkB,EAEpD,MAAO,CACLE,YAAa,GACbC,SAAU,EAAKC,oBAAoBvc,EAAOqY,EAAK6D,IAWnD,IAPA,IAAMM,EAAe,CACnBC,OAAQ,EACRH,SAAUI,IACVL,YAAa,IAINI,EAAQpE,EAAM,EAAGoE,EAAQzc,EAAOyc,IACvC,GAAmC,QAA/B,EAAKf,UAAUe,GAAOnU,KAA1B,CAEA,IAAMqU,EAA2B,EAAKV,kBACpCjc,EACAyc,EACAP,GAEIU,EAA2B,EAAKX,kBACpCQ,EAAQ,EACRpE,EACA6D,GACGS,EAAyBN,YAAYpY,OAAS,EAC3C0Y,EAAyBN,YAAYpY,OAAS,EAC9C,IAIN0Y,EAAyBL,SACvBM,EAAyBN,SAC3BE,EAAaF,WAEbE,EAAaC,MAAQA,EACrBD,EAAaF,SACXK,EAAyBL,SACzBM,EAAyBN,SAC3BE,EAAaH,YACXM,EAAyBN,YAAY/E,QACvCkF,EAAaH,YAAY7b,KAAKic,GAC9BD,EAAaH,YAAcG,EAAaH,YAAY5H,OAClDmI,EAAyBP,cAK/B,MAAO,CACLA,YAAaG,EAAaH,YAC1BC,SAAUE,EAAaF,YAG3Bld,KAAK2c,2BAvG2B,KAkHlCc,kBAAoBzB,IAAQ,SAACpb,EAAeqY,GAE1C,IADA,IAAIyE,EAAM,EACDxc,EAAIN,EAAOM,EAAI+X,EAAK/X,IACI,YAA3B,EAAKob,UAAUpb,GAAGgI,OAEtBwU,GAAO,EAAKpB,UAAUpb,GAAGqT,OAQ3B,MAJiC,YAA7B,EAAK+H,UAAUrD,GAAK/P,OAEtBwU,GAAO,EAAKpB,UAAUrD,GAAK1E,OAEtBmJ,IACN1d,KAAKwc,kBAhI0B,KAuIlCmB,mBAAqB,SAAC/c,EAAeqY,GAInC,IAHA,IAAI2E,EAAiB,EACjBC,EAAgB,EAEX3c,EAAIN,EAAOM,GAAK+X,EAAK/X,IAAK,CACjC,IAAM4c,EAAO,EAAKxB,UAAUpb,GACV,SAAd4c,EAAK5U,OACP0U,GAAkBE,EAAKC,QACvBF,GAAiBC,EAAKE,QAI1B,MAAO,CAAEJ,iBAAgBC,kBAnJO,KA8JlCb,sBAAwB,SAACpc,EAAeqY,EAAagF,GACnD,IAAMP,EAAM,EAAKD,kBAAkB7c,EAAOqY,GACpCiF,EAAgB,EAAK3B,qBAAqB0B,GAEhD,GAAIP,IAAQQ,EACV,OAAO,EAGT,IAAMC,EAAU,EAAKR,mBAAmB/c,EAAOqY,GAC/C,GAAIyE,EAAMQ,EAAe,CACvB,GAAIC,EAAQP,eAAiB,EAC3B,OAGF,OAA+B,IAA3BO,EAAQP,gBACFM,EAAgBR,GAAO,IAEzBQ,EAAgBR,GAAOS,EAAQP,eAEzC,OAAIO,EAAQN,eAAiB,OAA7B,GAGQK,EAAgBR,GAAOS,EAAQN,eApLP,KAuLlCO,mBAAqB,SAACxd,EAAeqY,EAAagF,GAChD,IAAMlC,EAAI,EAAKiB,sBAAsBpc,EAAOqY,EAAKgF,GACjD,YAAU7d,IAAN2b,GAAmBA,GAAK,GAClBuB,IAGH,KAAP,IAAOvB,EAAK,IA7LoB,KAgMlCoB,oBAAsBnB,IACpB,SAACpb,EAAeqY,EAAagF,GAC3B,IAAMI,EAAe,EAAK/B,UAAUrD,GAC9BqF,EACkB,YAAtBD,EAAanV,KAAqBmV,EAAaE,KAAO,EAClDC,EAAc,EAAKJ,mBAAmBxd,EAAOqY,EAAKgF,GAGxD,OAAIK,GAAe,EACV,SAAC,EAAIE,EAAcF,EAAgB,GAHlB,EAIfA,KAAiBhB,IACnB,SAAC,EAAIkB,EAAgB,GALJ,EAOjB,SAAC,EAAIA,EAAgB,GAArB,SAAyBF,EAAe,GAPvB,IAU5Bte,KAAKyc,mBAhN2B,KAmNlCgC,yBAA2B,SACzB7d,EACAqY,EACAgE,EACAH,GAIA,IAFA,IAAIO,EAAQzc,EACRsc,EAAW,EACNhc,EAAI,EAAGA,EAAI+b,EAAYpY,OAAQ3D,IACtCgc,GAAY,EAAKC,oBACfE,EACAJ,EAAY/b,GACZ4b,EAAiB5b,GAEnBmc,EAAQJ,EAAY/b,GAAK,EAQ3B,OANAgc,GAAY,EAAKC,oBACfE,EACApE,EACA6D,GAAkBG,EAAYpY,OAAS,EAAIoY,EAAYpY,OAAS,EAAI,KArOtE7E,KAAKsc,UAAYA,EAAU7B,MAAM3Z,KAAI,SAACgd,GAOpC,OANAA,EAAOvc,OAAOiH,OAAO,GAAIsV,IACpBvJ,MAAQuJ,EAAKvJ,MAAQ,GACR,SAAduJ,EAAK5U,OACP4U,EAAKC,QAAUD,EAAKC,QAAU,GAC9BD,EAAKE,OAASF,EAAKE,OAAS,IAEvBF,KAET9d,KAAKuc,qBAAuB,SAACrb,GAAD,OAAeob,EAAUoC,cAAcxd,GAAK,KCoC/Dyd,GAAb,WAME,WAAYlE,EAAwBmE,GAAiC,IAAD,gCALpDC,gBAKoD,OAJpDpE,WAIoD,OAHpDmE,iBAGoD,OAFpDF,mBAEoD,OAwHpEI,YAAc,SAACC,GACb,IAAMC,EAAQ,GACVpe,EAAQ,GAEZme,EAAaA,EAAW7G,SACb9W,KAAK,EAAKqZ,MAAM5V,OAAS,GALmB,oBAOrCka,GAPqC,IAOvD,2BAA8B,CAAC,IAAD,EAAnB9F,EAAmB,QACtBwB,EAAQ,EAAKA,MAAMvC,MAAMtX,EAAOqY,GAChCgG,EAAO,GAFe,cAKTxE,GALS,IAK5B,2BAA0B,CAAC,IAAhBzH,EAAe,QACN,YAAdA,EAAK9J,OAKO,QAAd8J,EAAK9J,MACL+V,EAAKpa,OAAS,GACiB,QAA/Boa,EAAKA,EAAKpa,OAAS,GAAGqE,MAGtB+V,EAAKA,EAAKpa,OAAS,GAAG0J,MAAQyE,EAAKzE,KACnC0Q,EAAKA,EAAKpa,OAAS,GAAG0P,OAASvB,EAAKuB,OAItC0K,EAAK7d,KAAKG,OAAOiH,OAAO,GAAIwK,MArBF,8BAyBD,YAAzB,EAAKyH,MAAMxB,GAAK/P,MAChB,EAAKuR,MAAMxB,GAAK1K,KAAK1J,OAAS,GAE9Boa,EAAK7d,KAAK,EAAKqZ,MAAMxB,IAGvBrY,EAAQqY,EAAM,EACd+F,EAAM5d,KAAK6d,IAvC0C,8BA0CvD,OAAOD,GAlK2D,KAsKpEE,OAAS,SACPF,EADO,GAUwD,IAP7DG,EAO4D,EAP5DA,WACAC,EAM4D,EAN5DA,cACAC,EAK4D,EAL5DA,SACAC,EAI4D,EAJ5DA,MAEAC,GAE4D,EAH5D9F,cAG4D,EAF5D8F,YAGIC,EAAiB,GACjBZ,EAAcI,EAAMle,KAAI,SAACme,GAAD,OAC5BA,EAAKQ,QAAO,SAACxQ,EAAG6L,GAAJ,OAAU7L,EAAI6L,EAAEvG,QAAO,MAE/BmL,EAAcV,EAAMle,KAAI,SAACme,EAAM/d,GAAP,OAAa,EAAKwd,cAAcxd,MAE9D,GAAIqe,EAEF,IADA,IAAMI,EAASC,KAAKC,IAAL,MAAAD,KAAI,aAAQhB,IAClB1d,EAAI,EAAGA,EAAIwe,EAAY7a,OAAQ3D,IAClCwe,EAAYxe,GAAKye,IACnBD,EAAYxe,GAAKye,GAKvB,IAAK,IAAIze,EAAI,EAAGA,EAAI8d,EAAMna,OAAQ3D,IAAK,CACrC,IAAM+d,EAAOD,EAAM9d,GAGbwc,EAAMkB,EAAY1d,GAClB4e,EAAaJ,EAAYxe,GACzB6e,EAASd,EAAK3a,QAAO,SAACwW,GAAD,MAAkB,SAAXA,EAAE5R,QAAiBrE,OAC/Cmb,EACJtC,EAAMoC,GAAwB,YAAVR,EAChB,EAAKT,WACLe,KAAKK,IAAIH,EAAapC,GAAOqC,EAAS,EAAKlB,WAG3C9D,GAAK7Z,EAAI,GAAKie,EAAcE,GAAYD,EAAgB,GAAM,EAChEtE,EAAI,EAQR,GANc,WAAVwE,EACFxE,IAAMgF,EAAapC,GAAO,EACP,UAAV4B,IACTxE,GAAKgF,EAAapC,GAGhBsC,IAAc,EAAKnB,WAAY,CACjC,IAAMqB,EAAgB3e,OAAOiH,OAC3B,CACEsS,IACAC,IACAoF,cAAezC,EACfO,WAAY/c,GAEd+d,EAAK,IAEPiB,EAAc3R,KAAO0Q,EAAKne,KAAI,SAACga,GAAD,OAAOA,EAAEvM,QAAMoH,KAAK,IAClD6J,EAAepe,KAAK8e,OACf,CAAC,IAAD,gBACcjB,GADd,IACL,2BAAyB,CAAC,IAAfjM,EAAc,QACjBmN,EAA8B,SAAdnN,EAAK9J,KAAkB8W,EAAYhN,EAAKuB,MACxD6L,EAAe7e,OAAOiH,OAC1B,CACEsS,IACAC,IACAoF,gBACAlC,WAAY/c,GAEd8R,GAGF8H,GAAKqF,EACLX,EAAepe,KAAKgf,IAdjB,gCAmBT,MAAO,CAAE3F,MAAO+E,EAAgBZ,gBApPhC5e,KAAKya,MAAQA,EACbza,KAAK4e,YAAcA,EAEfpc,MAAM6d,QAAQzB,GAChB5e,KAAK0e,cAAgB,SAACxd,GAAD,OACnBA,EAAI0d,EAAY/Z,OACZ+Z,EAAY1d,GACZ0d,EAAYA,EAAY/Z,OAAS,IAEvC7E,KAAK0e,cAAgB,SAACxd,GAAD,OAAe0d,GAGtC5e,KAAK6e,WAAa,EAbgD,oBAc/CpE,GAd+C,IAclE,2BAA0B,CAAC,IAAhBzH,EAAe,QACxB,GAAkB,SAAdA,EAAK9J,KAAiB,CACxBlJ,KAAK6e,WAAa7L,EAAKuB,MACvB,QAjB8D,+BANtE,yDAsCE,SACEhG,EACA+R,EACAC,EACAC,GAEkB,IADlBC,EACiB,uDADK,IAEhBhG,EAAyB,GAE3BiG,EAASnS,EAAKoS,MAAM,SAASrc,QAAO,SAACsc,GAAD,OAAOA,EAAE/b,OAAS,KAC1D,QAAkBzE,IAAdogB,GAA2BA,EAAU3b,OAAS,EAAG,CACnD,IAAMgc,EAAK,IAAIC,OAAJ,cAAkBN,EAAU7K,KAAK,IAAjC,QAA4C,KACvD+K,EAASA,EAAO3H,SAAQ,SAAC6H,GAAD,OAAOA,EAAEG,MAAMF,MAKzC,IAAMhC,EAAayB,EAAU,KACvBU,EAAcV,EAAU,KACxBW,EAAU,SAACC,GAAD,MAAkB,KAAKC,KAAKD,EAAKE,OAAO,KAGlDrD,EAAUc,EAAa,EACvBb,EAASa,EAAa,EAwD5B,OAtDA6B,EAAOhf,SAAQ,SAACkf,GACd,GAAIK,EAAQL,GAAZ,CACE,IAAMS,EAAU,CACdnY,KAAM,OACNqL,MAAOsK,EACPb,SACAD,UACAxP,KAAMqS,GAERnG,EAAMrZ,KAAKigB,QAeb,GAVI5G,EAAM5V,OAAS,GAAsC,QAAjC4V,EAAMA,EAAM5V,OAAS,GAAGqE,MAC9CuR,EAAMrZ,KAAK,CACT8H,KAAM,UACNqL,MAAO,EACPgK,KAAM,EACN+C,SAAS,EACT/S,KAAM,KAINgS,EAAa,CACf,IAAMG,EAASH,EAAYK,GAC3BF,EAAOhf,SAAQ,SAAC6f,EAAGrgB,GACjB,IAAMsgB,EAAS,CAAEtY,KAAM,MAAOqL,MAAO+L,EAAUiB,GAAIhT,KAAMgT,GAEzD,GADA9G,EAAMrZ,KAAKogB,GACPtgB,EAAIwf,EAAO7b,OAAS,EAAG,CACzB,IAAM4c,EAAkB,CACtBvY,KAAM,UACNqF,KAAM,IACNgG,MAAOyM,EACPzC,KAAMkC,EACNa,SAAS,GAEX7G,EAAMrZ,KAAKqgB,WAGV,CACL,IAAMD,EAAS,CAAEtY,KAAM,MAAOqL,MAAO+L,EAAUM,GAAIrS,KAAMqS,GACzDnG,EAAMrZ,KAAKogB,OAIf/G,EAAMrZ,KAAK,CACT8H,KAAM,OACNqL,MAAO,EACPwJ,QAAS,IACTC,OAAQ,EACRzP,KAAM,KAGDkM,MArHX,KCtEaiH,GAuBX,WACEC,EACAC,GACC,IAAD,gCAzBQC,gBAyBR,OAxBQC,kBAwBR,OAvBQC,YAuBR,OArBcC,UAqBd,OApBc9G,gBAoBd,OAnBcmE,cAmBd,OAlBcD,cAAwB,MAkBtC,KAhBcD,gBAgBd,OAfcN,gBAed,OAdc2B,UAAsB,CACpC,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAMA,KA0BF1E,SAAW,SACTvN,EACA0T,GAMI,IALJ3C,EAKG,uDAL8C,UAM3ChD,EAAY,IAAIqC,GACpBA,GAAUuD,iBACR3T,EACA,EAAK4T,YACL,EAAKC,UACL,EAAK5B,WAEPyB,GAUIhF,EAAc,IAAIZ,GAAmBC,GAAWM,WACnDK,YACH,EAA+BX,EAAU4C,OACvC5C,EAAUwC,YAAY7B,GACtB,CACEqC,QACAF,cAAe,EAAKA,cACpBC,SAAU,EAAKA,SACfF,WAAY,EAAKA,WACjB1F,cAAe,SACf8F,YAAY,IARR9E,EAAR,EAAQA,MAAOmE,EAAf,EAAeA,YAYTrK,EAAQqL,KAAKC,IAAL,MAAAD,KAAI,aAAQhB,IACpB3K,GAAUgJ,EAAYpY,OAAS,GAAK,EAAKsa,WAE/C,MAAO,CAAE1E,MAAOA,EAAOlG,QAAON,WArE9B,KAyEFoO,eAAiB,SACf9T,GAMI,IAAD,EALH+T,EAKG,uDALiB,KACpBC,EAIG,uDAJuB,GAKtBC,EACF,EAAKV,aAAaW,WAChB,EAAKN,YAAY5T,GACjB+T,EACAC,GACE,GACAT,EAAe,EAAKA,aAAaY,UAAUF,GAExC5D,EAGLkD,EAHF9C,MAIF,EAAyB,EAAKlD,SAC5BvN,EACAqQ,EAAY1G,MAAM,EAAG,GACrB,UAHMuC,EAAR,EAAQA,MAAOlG,EAAf,EAAeA,MAKToO,EAAS/C,KAAKC,IAAL,MAAAD,KAAI,aAAQnF,EAAM3Z,KAAI,SAACgd,GAAD,OAAUA,EAAKG,gBAAe,EAI7D2E,IADNJ,EAASjO,EAAQ,GAEXsO,IACFF,EAAS,IAAM,GAAKA,EAAS,GAAK,EAAIA,EAAS,GAAK,EAAKxD,WAC3D,EAAKA,WAAa,EAzBjB,cA2BoB1E,GA3BpB,IA2BH,2BAA8B,CAAC,IAAtBlO,EAAqB,QAC5BA,EAAWuO,GAAK8H,EAChBrW,EAAWwO,GAAK8H,GA7Bf,8BAgCH,MAAO,CACLpI,MAAOA,EACP+H,WAlHF,KAuHFJ,UAAY,SAAClB,GACX,OAAOA,EAAKrc,OAAS,EAAI,EAAKkd,OAAOK,UAAUlB,GAAQ,CAACA,IAxHxD,KA4HF1F,oBAAsB,SAACsH,GACrB,OAAOA,EAAS,EAAKX,YAAY,WA7HjC,KAgJFA,YAAc,SAAC5T,GACb,OAAO,EAAKsT,WAAWM,YAAY5T,GAAMgG,OAhJzC,IAAMwO,EAASC,SAASC,cAAc,UACtCjjB,KAAK6hB,WAAakB,EAAOG,WAAW,MACpCljB,KAAK6e,WAAa7e,KAAKmiB,YAAY,KAEnCniB,KAAKgiB,KAAOL,EAAQK,MAAR,UAAmBL,EAAQtC,SAA3B,cAAyCsC,EAAQzG,YAC7Dlb,KAAKkb,WAAayG,EAAQzG,WAC1Blb,KAAKqf,SAAWsC,EAAQtC,SACxBrf,KAAK6hB,WAAWG,KAAOhiB,KAAKgiB,KAE5BhiB,KAAK+hB,OAAS,IAAIoB,KAAOC,WAEPhjB,IAAdwhB,SAC2BxhB,IAAzBwhB,EAAUzC,aACZnf,KAAKof,cAAgBwC,EAAUzC,iBAEL/e,IAAxBwhB,EAAUpB,YACZxgB,KAAKwgB,UAAYoB,EAAUpB,YAI/BxgB,KAAKmf,WAAanf,KAAKqf,SAAWrf,KAAKof,cACvCpf,KAAK8hB,aAAe,IAAIuB,GAAarjB,OAhD5B0hB,GA6JJ4B,WAAa,SAACC,GACnB,IAAMvW,EAAQwW,iBAAiBD,GACvBE,EAA6DzW,EAA7DyW,UAAWC,EAAkD1W,EAAlD0W,YAAazV,EAAqCjB,EAArCiB,WAAYoR,EAAyBrS,EAAzBqS,SAAUnE,EAAelO,EAAfkO,WACtD,MAAO,CACL8G,KAAK,GAAD,OAAKyB,EAAL,YAAmBC,EAAnB,YAAmCzV,EAAnC,YAAkDoR,EAAlD,YAA+DnE,GACnEmE,SAAUsE,WAAWtE,GACrBnE,eAYC,IAAMmI,GAYX,WAAYO,GAAsB,IAAD,gCAXvBA,eAWuB,OAVvBzE,gBAUuB,OATvB0E,mBASuB,OAMjCpB,WAAa,SACXqB,GAOA,IAJY,IAFZxB,EAEW,uDAFS,KACpBC,EACW,uDADe,GAGrB3hB,EAAe,EAARqY,EAAWqJ,EACnByB,OAAa3jB,EACRc,EAAI,EAAGA,EAAIohB,EAAWphB,IAAK,CAClC,GAAI+X,EAAMrY,IAAU,EAAG,CACrBmjB,EAAa9K,EACb,MAGF,IAAMuJ,EAAS5C,KAAKoE,MAAMpjB,EAAQqY,GAAO,GACnCgL,EAAI,EAAKvB,UAAUF,GAAQ0B,YAEjC,GAAID,EAAIH,EACNljB,EAAQ4hB,MADV,CAKA,KAAIyB,EAAIH,EAAavB,GAArB,CAIAwB,EAAavB,EACb,MAJEvJ,EAAMuJ,GAOV,QAAmBpiB,IAAf2jB,EACF,MAAM,IAAI7e,MAAJ,sBACW4e,EADX,2EACwFxB,EADxF,cAEF,EAAKI,UAAUJ,GAAW4B,cAOhC,OAAOH,GA9CwB,KAkDjCrB,UAAY,SAACF,GACX,QAAmCpiB,IAA/B,EAAKyjB,cAAcrB,GAAuB,CAK5C,IAJA,IAAM7b,EAAI,EAAKwd,yBAAyB3B,GAElCxD,EAAQ,GACRoF,EAAS,GACNljB,EAAIyF,EAAGzF,EAAI,EAAGA,IACrB8d,EAAM5d,KAAK,EAAKqc,kBAAkBvc,EAAGshB,IACrC4B,EAAOhjB,KAAKohB,EAAS,EAAKrD,YAAcje,EAAI,KAE9C8d,EAAM5d,KAAK,EAAKijB,yBAAyB7B,IACzC4B,EAAOhjB,KAAKohB,EAAS,EAAKrD,WAAa,GACvC,IAAK,IAAIje,EAAIyF,EAAI,EAAGzF,GAAK,EAAGA,IAC1B8d,EAAM5d,KAAK4d,EAAM9d,IACjBkjB,EAAOhjB,KAAKohB,EAAS,EAAKrD,YAAcje,EAAI,KAG9C,EAAK2iB,cAAcrB,GAAU,CAC3BxD,QACAoF,SACAE,YAAatF,EAAMrY,GACnBud,YAAalF,EAAMS,QAAO,SAACxQ,EAAGuS,GAAJ,OAAUvS,EAAIuS,MAI5C,OAAO,EAAKqC,cAAcrB,IA3EK,KA+EjC2B,yBAA2B,SAAC3B,GAC1B,OAAO5C,KAAK2E,OAAO/B,EAAS,EAAKrD,WAAa,GAAK,EAAKA,aAhFzB,KAoFjC1B,kBAAoB,SAAC1c,EAAeyhB,GAClC,OAAiE,EAA1D5C,KAAK4E,KAAK,SAAAhC,EAAU,GAAV,SAAe,EAAKrD,WAAape,EAAU,KArF7B,KAwFjCsjB,yBAA2B,SAAC7B,GAC1B,OAA6D,EAAtD5C,KAAK4E,KAAK,SAAAhC,EAAU,GAAV,SAAe,EAAKrD,WAAa,EAAM,KAxFxDnf,KAAK4jB,UAAYA,EACjB5jB,KAAKmf,WAAayE,EAAUzE,WAC5Bnf,KAAK6jB,cAAgB,IC1JZY,GAAb,WAQE,WAAYlB,EAA2Bhb,GAAsB,IAAD,gCAPpDzE,aAOoD,OANpDyf,eAMoD,OALrD5a,WAKqD,OAJpDM,UAIoD,OAHpDV,WAGoD,OAFpDiS,cAEoD,OAyL5DkK,UAAY,WACV,EAAK/b,MAAM+b,aA1L+C,KA8L5DC,iBAAmB,SAAC1b,EAAiB2b,GAC/B,EAAK9gB,QAAU,GACjB,EAAK6E,MAAMkc,QAEb,EAAK5b,KAAOA,EACZ,EAAKN,MAAMM,KAAK,CAAEhG,MAAOgG,EAAKhG,MAAOY,MAAOoF,EAAKpF,QACjD,EAAK8E,MAAMuI,SACX,EAAKpN,SAAW,OAEC1D,IAAbwkB,GACFA,KAxMwD,KA6M5DE,aAAe,SAAClD,GACd,EAAKjZ,MAAMmc,aAAalD,GACxB,EAAKjZ,MAAMuW,UA/M+C,KAwN5D6F,oBAAsB,YAQN,IAPdC,EAOa,EAPbA,OACA/Q,EAMa,EANbA,OAQIsG,EAAQ,EAAK5R,MAAM3H,IAAI,SAC3BuZ,EAAM0K,cACN,IAAIC,EAAO3K,EAAM4K,gBACjB,GAAqB,IAAfD,EAAK3Q,OAA+B,IAAhB2Q,EAAKjR,OAAe,CAE5C,IAEImR,EAFAC,EAAa,EAAK9B,UAAU+B,YAGhC,OAAQrR,EAAO/K,MACb,IAAK,YACHkc,EAAcF,EAAKjR,OAASA,EAAOsR,YACnC,MACF,IAAK,uBACH,IAAIC,EAAiB,EAAKjC,UAAUkC,wBAAwBnP,IACxDoP,EAAkBva,OAAOwa,QAE7BP,EADqBpC,SAAS4C,gBAAgBC,cAG3CL,EAAiBE,GAClBzR,EAAO6R,aAGb,EAAKnd,MAAMod,WAAWV,EAAYD,IACnB,IAAXJ,EACF,EAAKrc,MAAMqd,OACTX,EAAa,EAAIH,EAAK3Q,MAAQ,EAC9B6Q,EAAc,EAAIF,EAAKjR,OAAS,GAGlC,EAAKtL,MAAMqd,OACT,EAAKzd,MAAM0d,YAAc,EACzB,EAAK1d,MAAM2d,WAAa,GAI9B,OAAOhB,GArQmD,KA0R5DiB,kBAAoB,SAClBC,EACAC,EACApK,EACAE,EACAyI,EACA0B,EACAC,GAEA,GAAIH,GAAY,EAMd,OAJAnK,EAAE,WAAF,eAAME,cACW/b,IAAbwkB,GACFA,KAKJ,IACMM,EADQ,EAAKvc,MAAM3H,IAAI,SACVmkB,gBAInB,GAFAmB,EAAoBA,GAAqB,QAExBlmB,IAAbmmB,EAAwB,CAC1B,GACE3G,KAAKK,IAAIsG,EAAShS,MAAQ2Q,EAAK3Q,OAAS+R,GACxC1G,KAAKK,IAAIsG,EAAStS,OAASiR,EAAKjR,QAAUqS,EA8B1C,YAzBAE,YAAW,WACT,IACMC,EADQ,EAAK9d,MAAM3H,IAAI,SACNmkB,gBAGrBvF,KAAKK,IAAIiF,EAAK3Q,MAAQkS,EAASlS,QAAU+R,GACzC1G,KAAKK,IAAIiF,EAAKjR,OAASwS,EAASxS,SAAWqS,EAG3C,EAAKH,kBACHC,EAAW,EACXC,EACApK,EACAE,EACAyI,EACA0B,EACAG,IAGFxK,EAAE,WAAF,eAAME,SACW/b,IAAbwkB,GACFA,OAGHyB,GAGHG,YAAW,WACT,EAAKL,kBACHC,EAAW,EACXC,EACApK,EACAE,EACAyI,EACA0B,EACApB,KAEDmB,QAGLG,YAAW,WACT,EAAKL,kBACHC,EACAC,EACApK,EACAE,EACAyI,EACA0B,EACApB,KAEDmB,IA1WLrmB,KAAK8D,QAAU,EACf9D,KAAKuI,MAAQA,EACbvI,KAAKujB,UAAYA,EACjBvjB,KAAKiJ,KAAO,CACVhG,MAAO,GACPY,MAAO,IAQT7D,KAAKwa,SAAW,IAAIkH,GALR,CACVxG,WACE,wLACFmE,SAAU,KLeT,SAA0B7E,GAC/B,IAAMe,EAAef,EAASgB,oBAAoB,GAE5CG,EAAO,SAACf,EAAiBL,GAA2B,IAAD,EACjDmM,EAAK9L,EAAI5N,MAAM2Z,cAAgB,EAC/BC,EAAKhM,EAAI5N,MAAM6Z,eAAiB,EACtC,EAAiCrM,EAASsB,SACxClB,EAAIxX,MACJwX,EAAInS,MAAQ8S,EACZ,UAHMd,EAAR,EAAQA,MAAOlG,EAAf,EAAeA,MAAON,EAAtB,EAAsBA,OAOhBlH,EAAQwN,EAAOS,SAAS,OAAQ,CACpCC,MAAM,aAGJ1G,MAAOA,EAAa,EAALmS,EACfzS,OAAQA,EAAc,EAAL2S,GACdhM,EAAI5N,OAETlN,KAAM,SASR,OALAwa,GAASC,EAAOC,EAAUC,EAAO,CAC/BC,QAASgM,EACT/L,QAASiM,EACThM,IAAG,UAAEA,EAAIiB,gBAAN,aAAE,EAAc7O,QAEdD,GAGT0O,KAAGC,aACD,YACA,CACEC,KAAM,SAACf,EAAmBL,GACxB,OAAOoB,EAAKf,EAAoBL,IAKlCuM,SAPF,SAOWhnB,EAAMyS,EAAOlP,GAOpB,IAP2B,IAAD,EACpBuX,EAAMvX,EAAM0jB,KACZC,EAAQpM,EAAIoM,MACZC,EAASrM,EAAIqM,OACfxP,EAAc,GACdyP,EAAW,yBAAQF,EAAMnL,gBAAd,aAAQ,EAAgB7O,OAEvC,MAA2BzL,OAAO6O,QAAQ4W,EAAMha,OAAhD,eAAyD,CAApD,0BAAOlN,EAAP,KAAaqnB,EAAb,KACiB,kBAATA,IAGX1P,EAAO3X,GAAQqnB,GAXS,oBAaNF,GAbM,IAa1B,2BACE,IAD2B,IAAlBG,EAAiB,QAC1B,MAA2B7lB,OAAO6O,QAChCwK,EAAInD,OAAQ2P,IADd,eAEG,CAFE,0BAAOtnB,EAAP,KAAaqnB,EAAb,KAGU,UAATrnB,EACFyB,OAAOiH,OAAO0e,EAAaC,GAE3B1P,EAAO3X,GAAQqnB,GApBK,8BAyB1B,IAAM5M,EAAQK,EAAIL,MAClBA,EAAMsK,QACNlJ,EACE,CACEvY,MAAO4jB,EAAM5jB,MACbqF,KAAMue,EAAMve,KACZuE,MAAOyK,EACPoE,SAAU,CAAE7O,MAAOka,IAErB3M,KAIN,eK5FA8M,CAAiBrnB,KAAKwa,UACtBc,GAAmBtb,KAAKwa,UAExB,IAAM8M,EAAe,CAAC,cAAe,aAEjC/e,EAAMgf,yBACRD,EAAMlmB,KAAK,CACT8H,KAAM,qBACNse,eAAe,IAInBxnB,KAAK2I,MAAQ,IAAI8S,KAAGgM,MAAM,CACxBlE,UAAWA,EACXhP,MAAOgP,EAAUmE,YACjBzT,OAAQ1L,EAAMof,WACdzI,OAAQ3W,EAAM2W,QAAU,CACtBhW,KAAM,QACN0e,gBAAgB,EAChBC,aAAc,GACdC,YAAa,IAEfC,YAAa,CACX7e,KAAM,YACN8D,MAAO,CACL6N,OAAQ,QACRmN,SAAU,CACR7M,KAAM,QACN7N,KAAMmO,KAAGwM,MAAMC,SAAS,EAAG,KAG/BrM,SAAU,CACR7O,MAAO,CACLmO,KAAM,QACNgN,WAAY,CACVhN,KAAM,UACNN,OAAQ,UACR7D,QAAS,CAAC,EAAG,EAAG,EAAG,GACnBwL,OAAQ,MAKhB8E,MAAO,CACLc,QAASd,EACTe,KAAM,CAAC,iBAITC,gBAAiB,CACfC,OAAQ,CACNC,QAAS,EAGTplB,MAAO,CACLolB,QAAS,IAGbC,SAAU,CACRD,QAAS,GAGTplB,MAAO,CACLolB,QAAS,MAIfE,gBAAiB,CACfH,OAAQ,CACN1N,OAAQ,QACR2N,QAAS,GAEXC,SAAU,CACRD,QAAS,GACTja,KAAM,CACJia,QAAS,aAMSpoB,IAAtBmI,EAAMogB,aACR3oB,KAAK2I,MAAMigB,GAAG,cAAc,SAACC,GAC3BtgB,EAAMogB,YAAaE,EAAM/K,KAAKiJ,KAAKC,MAAMnnB,YAInBO,IAAtBmI,EAAMugB,aACR9oB,KAAK2I,MAAMigB,GAAG,cAAc,SAACC,GAC3BtgB,EAAMugB,YAAaD,EAAM/K,KAAKiJ,KAAKC,UAhH3C,sDAsHE,SAAqB/jB,EAAoBY,GAMvC,IAAIklB,EAAW9lB,EAAMnC,KAAI,SAACkoB,EAAG9nB,GAC3B,IAAIgI,EAGAA,EAFA8f,EAAE5lB,MAAMoW,OAAO3U,OAAS,IACV,SAAZmkB,EAAEjc,OAAgC,WAAZic,EAAEjc,OACnBic,EAAEjc,MAAQ,QAKZic,EAAEjc,MAGX,IAAM1J,EAAmB,CACvBxD,GAAImpB,EAAEnpB,GACNuD,MAAO4lB,EAAE5lB,MACT8F,KAAMA,EACN8D,MAAM,2BACDgc,EAAEhc,OADF,IAEHwV,OAAQ,EACRqE,cAAe,EACfF,aAAc,IAEhB9K,SAAU,CACR7O,MAAOgc,EAAEC,aAMb,MAHgB,SAAZD,EAAEjc,QACJ1J,EAAK2J,MAAOwV,OAAS,GAEhBnf,KAILsL,IAAEua,KAAKrlB,EAAM/C,KAAI,SAACkoB,GAAD,OAAOA,EAAEnpB,OAAKgF,SAAWhB,EAAMgB,QAClDskB,QAAQhf,MACN,+CACAtG,EAAM/C,KAAI,SAACkoB,GAAD,OAAOA,EAAEnpB,OAIvB,IA9CsE,EA8ClEupB,EAAWvlB,EAAM/C,KAAI,SAAC6D,GAAD,MAAQ,CAC/B9E,GAAI8E,EAAE9E,GACN4E,OAAQE,EAAEF,OACVC,OAAQC,EAAED,OACVtB,MAAOuB,EAAEvB,UAILimB,EAAK,IAAIlZ,IACXmZ,GAAmB,EAvD+C,cAwDnDzlB,GAxDmD,IAwDtE,2BAA0B,CAAC,IAAhBW,EAAe,QAClB+kB,EAAI,UAAM/kB,EAAKC,OAAX,YAAqBD,EAAKE,QACpC,GAAI2kB,EAAGrgB,IAAIugB,GAAO,CAChBD,GAAmB,EACnB,MAEFD,EAAG/nB,IAAIioB,IA9D6D,8BAoEtE,OAJID,GACF7N,KAAG+N,KAAKC,qBAAqBL,GAGxB,CAAEnmB,MAAO8lB,EAAUllB,MAAOulB,OA1LrC,KC7BM3R,GAAS,CACb/F,KAAM,CACJC,QAAS,QAEXhJ,MAAO,CACL+gB,SAAU,WACVnV,MAAO,QAIToV,QAAS,CACPD,SAAU,WACVpT,IAAK,EACLsT,KAAM,EACN,gBAAiB,CACf/b,aAAc,EACdE,YAAa,EACbC,aAAc,GAEhB,gBAAiB,CACfH,aAAc,EACdmJ,QAAS,EACT,QAAS,CACPqI,SAAU,MAIhB/S,SAAU,CACRsB,OAAQ,iBACRC,aAAc,GAEhB0V,UAAW,CAEThP,MAAO,OACP,WAAY,CACV5C,QAAS,WAKTkY,GAAc,CAClBC,MAAO,CACL5gB,KAAM,QACN0e,gBAAgB,EAChBC,aAAc,GACdC,YAAa,IAEfiC,MAAO,CACL7gB,KAAM,QACN8gB,QAAS,KACTC,QAAS,GACTC,QAAS,KASAC,GAAiBxc,YAAW8J,GAAX9J,CAC5Byc,sBACE,WA2BEC,GACI,IA1BFxqB,EA0BC,EA1BDA,GACAiE,EAyBC,EAzBDA,QACAb,EAwBC,EAxBDA,MACAY,EAuBC,EAvBDA,MACAqK,EAsBC,EAtBDA,QACA3F,EAqBC,EArBDA,MACA2D,EAoBC,EApBDA,UAoBC,IAnBDoe,+BAmBC,MAnByB,CAAEphB,KAAM,YAAaqc,YAAa,GAmB3D,MAlBDoE,eAkBC,aAjBDrd,gBAiBC,aAhBDie,eAgBC,MAhBSV,GAgBT,EACGtG,EAAYiH,iBAAO,MACnB7hB,EAAQ6hB,sBAA4BpqB,GAE1CqqB,8BACEJ,GACA,iBAA2B,CACzB1hB,MAAO,kBAAMA,EAAMwG,SACnBub,SAAU,WACR,YAAsBtqB,IAAlBuI,EAAMwG,UACVxG,EAAMwG,QAAQ4V,oBAAoB,CAChCC,QAAQ,EACR/Q,OAAQqW,KAEH,QAKb1e,qBAAU,WACR,GAA0B,OAAtB2X,EAAUpU,QAAd,MACsB/O,IAAlBuI,EAAMwG,UACRxG,EAAMwG,QAAU,IAAIsV,GAClBlB,EAAUpU,QACV5G,GAAS,CACPof,WAAY,OAKlB,IAAMtG,EAAI1Y,EAAMwG,QAChBkS,EAAEsD,iBAAiBF,GAAQkG,cAAc1nB,EAAOY,IAAQ,WACrDsH,OAAekW,EAAIA,EAEpBA,EAAE8E,kBACA,GACA,GACA9E,EAAE0D,oBACF,CAAC,CAAEC,QAAQ,EAAM/Q,OAAQqW,KACzB,qBAGH,CAACzqB,EAAIiE,EAASb,EAAOY,EAAO0E,EAAO+hB,IAEtC,IAAMM,GACQ,IAAZjB,EAAoB,KAClB,cAACkB,GAAD,CACEC,SAAsB,cAAZnB,EACVhhB,MAAOA,EACP4hB,QAASA,IAIf,OACE,sBAAKre,UAAWA,EAAhB,UACE,qBAAKA,UAAWgC,EAAQwD,KAAxB,SAA+B5N,IAC/B,sBAAKoI,UAAWgC,EAAQvF,MAAxB,UACGiiB,EACD,qBACEP,IAAK9G,EACLrX,UACEgC,EAAQqV,WAAajX,EAAW,IAAM4B,EAAQ5B,SAAW,gBAU5Due,GAAeld,YAAW8J,GAAX9J,EAC1B,YASmC,IAAD,IARhCmd,gBAQgC,SAPhCniB,EAOgC,EAPhCA,MACAuF,EAMgC,EANhCA,QACAqc,EAKgC,EALhCA,QAMA,EAA8B3Y,oBAAS,GAAvC,mBAAOmZ,EAAP,KAAgBC,EAAhB,KACA,EAA4BpZ,mBAAS,SAArC,mBAAOsN,EAAP,KAAe+L,EAAf,KAEMC,EAAe,WACfJ,GAAUE,GAAW,IAErBG,EAAe,WACfL,GAAUE,GAAW,IAG3B,GAAIF,IAAaC,EACf,OACE,qBACE7e,UAAWgC,EAAQyb,QACnBuB,aAAcA,EACdC,aAAcA,EAHhB,SAKE,cAAC,IAAD,CAAQjf,UAAU,OAAlB,SACE,cAAC,KAAD,QAMR,IAIMkf,EAAe,SAACtrB,GAAoC,IAAD,EACvDmrB,EAAUnrB,GACV,UAAA6I,EAAMwG,eAAN,SAAe2V,aAAayF,EAAQzqB,KAYtC,OACE,qBACEoM,UAAWgC,EAAQyb,QACnBuB,aAAcA,EACdC,aAAcA,EAHhB,SAKE,eAAC,IAAD,CAAO1iB,KAAM,EAAb,UACE,cAAC,KAAD,CAAS4E,MAAM,mBAAf,SACE,cAAC,IAAD,CAAQnB,UAAU,OAAOgG,QA1Bb,WAAO,IAAD,EACxB,UAAAvJ,EAAMwG,eAAN,SAAexG,MAAM+b,aAyBf,SACE,cAAC,KAAD,QAGJ,cAAC,KAAD,CAASrX,MAAM,6BAAf,SACE,cAAC,IAAD,CAAQnB,UAAU,OAAlB,SACE,cAACmf,GAAA,EAAD,QAGJ,cAAC,KAAD,CAAShe,MAAM,sBAAf,SACE,cAAC,KAAD,CACEie,QACE,cAAC,KAAD,CAAMpZ,QAxBS,SAACvN,GAC1BymB,EAAazmB,EAAEyX,MAuBL,SACG7a,OAAO+O,KAAKuZ,IAAa/oB,KAAI,SAACoe,GAAD,OAC5B,cAAC,KAAKtS,KAAN,UAAyBsS,GAATA,QAJxB,SASE,eAAC,IAAD,CACEhT,UAAU,OACV+J,KAAM,cAACsV,GAAA,EAAD,IACNrZ,QAvCQ,WACH,UAAXgN,GAAoBkM,EAAa,SACtB,UAAXlM,GAAoBkM,EAAa,UAkC7B,UAKGlM,EALH,IAKW,cAACsM,GAAA,EAAD,mBC3OZC,GAAyB9d,YATvB,CACb+D,KAAM,CACJC,QAAS,QAEX+Z,eAAgB,CACdze,UAAW,IAIuBU,CACpChC,aACE,YAI2E,IAHzEggB,EAGwE,EAHxEA,IACAzd,EAEwE,EAFxEA,QACAtF,EACwE,EADxEA,MAEMgjB,EAAWpB,sBAAuCpqB,GACxD,EAAwCwR,mBAAS,GAAjD,mBAAOia,EAAP,KAAqBC,EAArB,KACQ9gB,EAAuBO,IAAvBP,mBACJ+gB,EAAKJ,EAAIE,GACTG,GAAY,EAEhB,GAAIH,GAAgBF,EAAI9mB,OAAQ,CAG9B,IAAMhF,EAAE,UAAM+I,EAAM/I,GAAZ,UACJosB,EAAajhB,EAAmBkhB,eAAersB,QAChCO,IAAf6rB,IACFA,EAAa,IAAIpjB,EACfhJ,EADW,aAEL8rB,EAAI9mB,QACV,GACA,EACA,IAAIjB,EACF/D,EACA+I,EAAMwF,QAAQtN,KAAI,SAACqrB,EAAQprB,GAAT,MAAoB,CACpClB,GAAG,OAAD,OAASkB,GACXqC,MAAO+oB,EACPxmB,YAAa5E,EACb4C,SAAU,gBAEZ,IAEFiF,EAAM/I,IAERmL,EAAmBohB,eAAeH,IAEpCF,EAAKE,EACLD,GAAY,EAGd,MAAuB/b,mBAAQ,WA4C7B,MAAO,CA3CO8b,EAAGpjB,MAAM1F,MAAMnC,KAAI,SAACuC,GAChC,IAAI0J,EAA2BC,EAC/B,OAAQ3J,EAAKM,UACX,IAAK,aACHoJ,EAAQ,SACRC,EAAQ,CAAEmO,KAAMkR,KAAM,GAAIxR,OAAQwR,KAAM,IACxC,MACF,IAAK,YACHtf,EAAQ,OACRC,EAAQ,CAAEmO,KAAMmR,KAAK,GAAIzR,OAAQyR,KAAK,IACtC,MACF,IAAK,eAEDvf,EADoB,cAAlB1J,EAAKkpB,SACC,SAEA,OAGRvf,EADE3J,EAAK+C,YACC,CAAE+U,KAAM,UAAWN,OAAQ,WAE3B,CAAEM,KAAMqR,KAAO,GAAI3R,OAAQ,WAErC,MACF,QACE,MAAM,IAAI3V,MAAJ,gBAGV,MAAO,CACLrF,GAAIwD,EAAKxD,GACTuD,MAAOC,EAAKD,MACZ4J,QACAD,YAGUgf,EAAGpjB,MAAM9E,MAAM/C,KAAI,SAAC0D,GAChC,MAAO,CACL3E,GAAG,GAAD,OAAK2E,EAAKC,OAAV,YAAoBD,EAAKE,OAAzB,YAAmCF,EAAKjB,KAC1CkB,OAAQD,EAAKC,OACbC,OAAQF,EAAKE,OACbtB,MAAOoB,EAAKpB,aAMf,CAAC2oB,EAAGlsB,GAAIksB,EAAGjoB,UA9Cd,mBAAOb,EAAP,KAAcY,EAAd,KAgDM4oB,EAAY,gBACSrsB,IAArBwrB,EAASzc,SAGbyc,EAASzc,QAAQub,YAEnBgC,YAAW,IAAKD,EAAW,CAACV,EAAGlsB,QAAiBO,IAAbwrB,IAEnC,IA5FwE,EA4FlEe,EAAU,GA5FwD,cA6F9ChB,EAAIvb,WA7F0C,kDA6F5DoE,EA7F4D,KA6FvDsJ,EA7FuD,KA8FtE6O,EAAQvrB,KACN,cAAC,IAAD,CACEqH,KAAK,QAELS,KAAM4U,EAAKje,KAAOksB,EAAGlsB,GAAK,UAAY,UACtCqS,QAAS,kBAAM4Z,EAAgBtX,IAJjC,SAMGsJ,EAAKhe,MAJDge,EAAKje,MAJhB,2BAA0C,IA7F8B,8BA0GpEmsB,GACFW,EAAQvrB,KACN,cAAC,IAAD,CACEqH,KAAK,QAELS,KAAK,UACL8D,MAAO,CAAEE,gBAAiBof,KAAK,GAAIM,YAAaN,KAAK,IAJvD,SAMGP,EAAGjsB,MAJA,UAWV,IAAI+sB,OAAkBzsB,EAUtB,OATuB,IAAnBusB,EAAQ9nB,QAAgBmnB,KAC1Ba,EACE,eAAC,IAAD,CAAO7f,MAAO,CAAE0I,MAAO,SAAvB,UACE,oDACCiX,MAML,gCACGE,EACD,eAAC,IAAD,WACE,cAAC,IAAD,CAAQpkB,KAAK,QAAQyJ,QAASua,EAA9B,8BAGA,cAAC,IAAD,CAAQhkB,KAAK,QAAb,uBACA,cAAC,IAAD,CAAQA,KAAK,QAAb,sBACA,cAAC,IAAD,CAAQA,KAAK,QAAb,yBAEF,cAAC0hB,GAAD,CACEE,IAAKuB,EACL1f,UAAWgC,EAAQwd,eACnB7rB,GAAIksB,EAAGlsB,GACPiE,QAASioB,EAAGjoB,QACZb,MAAOA,EACPY,MAAOA,EACP8lB,SAAS,EACTW,wBAAyB,CAAEphB,KAAM,YAAaqc,YAAa,IAC3Dhd,MAAO,CACLof,WAAY,IACZzI,OAAQ,CACNhW,KAAM,QACN8gB,QAAS,KACTC,QAAS,GACTC,QAAS,IAEXvB,YAAa,SAACziB,GACZijB,QAAQ2D,IAAI,aAAc5mB,IAE5B4iB,YAAa,SAACtkB,GACZ2kB,QAAQ2D,IAAI,aAActoB,cCnK7BuoB,GAAYpf,YAfV,CACb/E,MAAO,CACLqE,UAAW,EACX,4BAA6B,CAC3BW,OAAQ,iBACRC,aAAc,EACdC,WAAY,8BAGhByV,UAAW,CACT9P,WAAY,GACZuZ,YAAa,KAIQrf,CACvBhC,aAAS,YAA6C,IAA1CuC,EAAyC,EAAzCA,QAEV,EACE3C,IADMV,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAAYC,EAAlC,EAAkCA,cAAeC,EAAjD,EAAiDA,mBAEjD,EAAoC4G,oBAAS,GAA7C,mBAAOqb,EAAP,KAAmBC,EAAnB,KAGMvsB,EAAU4M,GAAO3E,MAAMuF,eAAgBxN,QAC7C,EA6HJ,SAA4BwB,EAA4BxB,GACtD,IAAMwsB,EAAiB,GACjBC,EAAc7f,GAAO3E,MAAMykB,iBAC3BC,EAA2B,OAAhBF,EAAuB,GAAKA,EAAY3e,MACnD8e,EAAuBtd,mBAC3B,iBAAoB,KAAbqd,EAAkBnrB,EAAWqrB,iBAAiBF,GAAY,KACjE,CAACnrB,EAAYmrB,IAKf,EAA0B1b,mBAAS,CACjCjR,SAAU,EACVH,YAAa,EACbiO,MAAO,GACPpN,QAAS,GACT4kB,WAAY,EACZzW,MAAO,EACPie,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,UAAU,EACV9pB,QAAS,IAXX,mBAAOsjB,EAAP,KAAcN,EAAd,KAcAlb,qBAAU,WACR,IAAMqQ,EAAE,uCAAG,4CAAAhN,EAAA,yDAGHuF,EAAM7F,IAAEkf,YAAYzG,EAAM/lB,QAASV,KAC1BymB,EAAM3Y,QAAU6e,GAAYlG,EAAM/lB,QAAQmT,KAAS7T,GAJzD,iCAQkBkJ,QAAQikB,IAAI,CACnC3rB,EAAWsM,MAAM,CACf3C,MAAOqhB,EACPphB,OAAQ,EACRgiB,OAAQ,CAAC,MACT3e,WAAW,2BACNme,GADK,IAER1tB,GAAI,CAAEmuB,GAAI,MAAOzb,MAAO5R,OAG5BwB,EAAWsM,MAAM,CACf3C,MAAOqhB,EACPphB,OAAQ,EACRgiB,OAAQ,CAAC,MACT3e,WAAW,2BACNme,GADK,IAER1tB,GAAI,CAAEmuB,GAAI,KAAMzb,MAAO5R,SAxBtB,mCAQAstB,EARA,KAQKC,EARL,KA6BD7sB,EAAU6sB,EAAI7sB,QACjBP,KAAI,SAAC0N,GAAD,OAASA,EAAI3O,MACjBwV,OAAO4Y,EAAI5sB,QAAQP,KAAI,SAAC0N,GAAD,OAASA,EAAI3O,OACvCsuB,EAAW,CACT3tB,WAAY0tB,EAAI7sB,QAAQwD,OACxBxD,UACAmO,MAAO0e,EAAI1e,MAAQye,EAAIze,MACvByW,WAAYiI,EAAI1e,MAAQ0e,EAAI7sB,QAAQwD,OACpC8oB,QAASO,EAAI1e,OAAS2d,EACtBS,SAAUK,EAAIze,OAAS2d,EACvBM,QAASS,EAAI7sB,QAAQwD,OAAS,EAC9B6oB,QAASO,EAAI5sB,QAAQwD,OAAS,GAxCzB,2BA4CK,IAAR2P,GAAc4S,EAAMuG,QA5CjB,kCA6CaxrB,EAAWsM,MAAM,CACjC3C,MAAOqhB,EACPphB,OAAQ,EACRgiB,OAAQ,CAAC,MACT3e,WAAW,2BACNme,GADK,IAER1tB,GAAI,CAAEmuB,GAAI,KAAMzb,MAAO5R,OAnDtB,QA6CCutB,EA7CD,OAsDLC,EAAW,CACT3tB,WAAY0tB,EAAI7sB,QAAQwD,OACxBohB,WAAYiI,EAAI1e,MAAQ0e,EAAI7sB,QAAQwD,OACpCxD,QAAS6sB,EAAI7sB,QAAQP,KAAI,SAAC0N,GAAD,OAASA,EAAI3O,MAAIwV,OAAO+R,EAAM/lB,SACvDssB,QAASO,EAAI1e,OAAS2d,EACtBM,QAASS,EAAI7sB,QAAQwD,OAAS,GA3D3B,2BA6DI2P,IAAQ4S,EAAM/lB,QAAQwD,OAAS,GAAMuiB,EAAMwG,SA7D/C,kCA8DazrB,EAAWsM,MAAM,CACjC3C,MAAOqhB,EACPphB,OAAQ,EACRgiB,OAAQ,CAAC,MACT3e,WAAW,2BACNme,GADK,IAER1tB,GAAI,CAAEmuB,GAAI,KAAMzb,MAAO5R,OApEtB,QA8DCstB,EA9DD,OAuELE,EAAW,CACT3tB,WAAYgU,EACZnT,QAAS+lB,EAAM/lB,QAAQgU,OAAO4Y,EAAI5sB,QAAQP,KAAI,SAAC0N,GAAD,OAASA,EAAI3O,OAC3D+tB,SAAUK,EAAIze,OAAS2d,EACvBO,QAASO,EAAI5sB,QAAQwD,OAAS,GA3E3B,wBA8ELspB,EAAW,CACT3tB,WAAYgU,EACZkZ,QAASlZ,EAAM4S,EAAM/lB,QAAQwD,OAAS,EACtC4oB,QAASjZ,EAAM,GAjFZ,QAqFTsS,EAAS,uCACJM,GACA+G,GAFG,IAGNrqB,QAASsjB,EAAMtjB,QAAU,EACzB2K,MAAO6e,EACP3sB,aA1FO,4CAAH,qDA6FRsb,MAEC,CAACtb,EAAS2sB,IAGb,IAAMc,EAAO,SAACriB,GACZ,GAAIpL,IAAYymB,EAAMzmB,QAAtB,CAKA,IAAM0tB,EAAcjH,EAAM/lB,QAAQ+lB,EAAM5mB,WAAauL,QACjC3L,IAAhBiuB,GACF9gB,GAAO3E,MAAM0E,KAAK,CAAE3M,QAAS0tB,GAAe,CAAE5f,MAAO6e,IAAYgB,SAIrE,MAAO,CAELC,gBAAiB,WACfH,GAAM,IAERI,YAAa,WACXJ,EAAK,IAEPK,SAAUrH,GA7QyCsH,CACjD5jB,EACAnK,GAFM8tB,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,YAAaD,EAA/B,EAA+BA,gBAK/B3iB,qBAAU,WAERd,EAAWb,UAAUtJ,GAASzB,MAAK,SAAC0J,QACpBxI,IAAVwI,GACFiC,EAAaZ,UAAUrB,EAAM+D,YAK5B3B,EAAmB2jB,WAAWhuB,KACjCqK,EAAmBa,MAAM,CACvBC,MAAO,IACPC,OAAQ,EACRqD,WAAY,CACVxG,MAAOjI,KAGXusB,GAAc,MAEf,CAACpiB,EAAYD,EAAcG,EAAoBrK,IAElD+rB,YAAW,IAAK6B,EAAiB,CAACE,EAAS3qB,UAC3C4oB,YAAW,IAAK8B,EAAa,CAACC,EAAS3qB,UAEvC,IAAM8E,EAAQkC,EAAW9J,IAAIL,GACvBiuB,EAAmC3e,mBAAQ,WAAO,IAAD,MAC/CrH,EAAQkC,EAAW9J,IAAIL,GAC7B,QAAcP,IAAVwI,GAAiC,OAAVA,EAI3B,MAAO,CACL9I,KAAM8I,EAAM9I,KACZC,YAAa6I,EAAM7I,YACnBqO,QAASxF,EAAMwF,QACf3F,KAAMG,EAAMH,KACZoR,QAAS,CACPC,QAAO,UAAElR,EAAMlG,mBAAR,aAAE,EAAmB2W,IAC5BhM,MAAK,UAAEzE,EAAMlG,mBAAR,aAAE,EAAmB2K,MAC1BxL,SAAQ,UAAE+G,EAAMlG,mBAAR,aAAE,EAAmBb,SAC7BmY,iBAAkBpR,EAAM9F,gBAI3B,CAACnC,OAAmBP,IAAVwI,IAEb,GAAc,OAAVA,EACF,OAAO,cAAC,IAAD,IACF,QAAcxI,IAAVwI,EACT,OAAO,cAAC,IAAD,IAGT,IAAIimB,EAAe,KACnB,GAAK7jB,EAAmB2jB,WAAWhuB,IAAassB,EAEzC,CACL,IAAMtB,EAAM3gB,EAAmBtK,YAAYC,GAC3CkuB,EAAe,cAACpD,GAAD,CAAwBE,IAAKA,EAAK/iB,MAAOA,SAHxDimB,EAAe,cAAC,IAAD,CAAaviB,UAAU,IAMxC,IAAMwiB,EAAQ,uCAAG,WAAOhjB,EAAeC,GAAtB,eAAAkD,EAAA,sEACIlE,EAAcc,MAAM,CACrCC,QACAC,SACAqD,WAAY,CAAExG,MAAOA,EAAM/I,MAJd,cACXwP,EADW,yBAMRA,EAAOhO,QAAQP,KAAI,SAACiuB,GAAD,MAAU,CAClChuB,MAAOguB,EAAIhuB,MACXguB,IAAKA,EAAIA,IAAIjuB,KAAI,SAACkuB,GAAD,MAAQ,CAAEzc,MAAOyc,MAClCvtB,MAAOstB,EAAIttB,WATE,2CAAH,wDAad,OACE,eAAC,IAAMuK,SAAP,WACE,cAAC,GAAD,CACEW,QAAS9B,EAAa7J,IAAI4H,EAAM+D,SAChC/D,MAAOA,EACPqmB,KAAM,CACJ,cAAC,IAAD,CAEE/c,QAASqc,EACTW,UAAWT,EAAShB,QAHtB,+BACM,QAMN,cAAC,IAAD,CAEEvb,QAASsc,EACTU,UAAWT,EAASf,QAHtB,2BACM,SAORyB,cACE,uBAAMjjB,UAAU,OAAhB,sBACY,IACV,8BACG,IACAuiB,EAASxI,WAAawI,EAASjuB,WAAa,EAF/C,IAEmDiuB,EAASjf,cAKlE,qBAAKtD,UAAWgC,EAAQqV,UAAxB,SACE,eAAC,IAAD,CAAOjP,UAAU,WAAW7L,KAAM,EAAlC,UACGomB,EACD,cAACnV,GAAD,CAEEC,eAAe,EACf/Q,MAAOgmB,EACPngB,MAAOqgB,GAHFnuB,eAgKnB,IAAMyuB,GAAc,SAAC7mB,GAMnB,IAAIoE,EAAUpE,EAAMoE,SAAW,IAAI/M,EAAQ,EAAG,GAAI,IAClD,OACE,cAAC,IAAD,CACEyvB,OAAQ,kBACNC,IAAQluB,KACNmM,GAAOZ,QAAQ4iB,OAAO,CACpBhtB,UAAWgG,EAAMK,MAAM+D,YAI7BU,MACE,eAAC,IAAD,WACE,sBAAML,MAAO,CAAEiB,WAAY,KAA3B,oBACA,sBAAMjB,MAAO,CAAEkH,MAAO,UAAWyE,eAAgB,aAAjD,SACGpQ,EAAMK,MAAM9I,UAInBwR,SACE,eAAC,IAAD,WACE,6CACW,4BAAI3E,EAAQ7M,OADvB,OAGCyI,EAAM4mB,iBAGXK,MAAOjnB,EAAM0mB,QC7VJ,OAA0B,iC,8BCoD5B1hB,GAAS,CACpBZ,QAAS,IAAI8iB,IAAmB,CAC9BC,UAAW,CAAEntB,UAAW,UACxBotB,UAAWjiB,EACXkiB,QAAS,yBAEXhnB,MAAO,IAAIinB,IAAQ,CACjBH,UAAW,CAAE/uB,QAAS,UACtBmvB,YAAa,CAAErhB,MAAO,UACtBkhB,UAAW5C,GACX6C,QAAS,qBAEXG,SAAU,IAAIC,IAAc,CAC1BL,UC/DuB,WACzB,OACE,cAAC,IAAD,CAAK1jB,OAAQ,GAAb,SACE,cAAC,IAAD,CAAKC,UAAU,aAAaC,KAAM,QD6DpCyjB,QAAS,YACTK,OAAO,IAETC,OAAQ,IAAIF,IAAc,CACxBL,UAAWjkB,EACXkkB,QAAS,UACTK,OAAO,IAETE,SAAU,IAAIH,IAAc,CAC1BL,UAAWjkB,EACXkkB,QAAS,YACTK,OAAO,IAETG,KAAM,IAAIJ,IAAc,CAAEL,UAAWjkB,EAAUkkB,QAAS,IAAKK,OAAO,KAErE9kB,OAAeklB,QAAU9iB,GAG1B+iB,YAAY/iB,IA9DU,SACpBoiB,GAEA,OAAO,SAACpnB,GACN,IAAMgoB,EAAU/kB,IAAMyX,cAAc0M,EAAWpnB,GAC/C,OACE,eAAC,IAAD,CAAO+L,UAAU,WAAWtH,MAAO,CAAEuH,MAAO,QAA5C,UACE,cAAC,IAAD,CACEic,MAAO,CACLJ,KAAM,qBAAKK,IAAKC,GAAMC,IAAI,SAC1BR,SAAU,CAAEla,KAAM,cAAC2a,GAAA,EAAD,IAAqBxe,SAAU,YACjD8d,OAAQ,CAAEja,KAAM,cAAC4a,GAAA,EAAD,IAAyBze,SAAU,UACnD2d,SAAU,CAAE9Z,KAAM,cAAC6a,GAAA,EAAD,IAAqB1e,SAAU,aAEnD7E,OAAQA,GACRwjB,iBAAiB,IAEnB,qBAAK7kB,UAAU,iBAAf,SAAiCqkB,UA6Cb,CAAC,UE7E7BS,IAAS9f,OACP,cAAC7F,EAAa4lB,SAAd,CAAuB1e,MAAO3H,EAA9B,SACE,cAAC,IAAD,CAAKsmB,YAAY,EAAM3jB,OAAQA,OAEjCyV,SAASmO,eAAe,SAM1BpyB,M","file":"static/js/main.d7288ae1.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const THEME: \"dark\" | \"light\" = \"light\";\n\nexport const PLATFORM: \"native\" | \"web\" =\n  process.env.REACT_APP_PLATFORM === \"native\" ? \"native\" : \"web\";\n\n// url of the API server\nexport const SERVER: string =\n  process.env.REACT_APP_PLATFORM === \"native\"\n    ? (process.env.REACT_APP_API_SERVER as string)\n    : \"\";\n\n// path to the static directory for serving either local or remote css/js/assets\nexport const PUBLIC_URL: string = process.env.PUBLIC_URL;\n","import { makeObservable, observable } from \"mobx\";\nimport { SERVER } from \"../env\";\nimport {\n  Record,\n  DraftUpdateRecord,\n  DraftCreateRecord,\n  CRUDStore,\n} from \"rma-baseapp\";\n\nexport class Project implements Record<number> {\n  id: number;\n  // name of the project\n  name: string;\n  // project's description\n  description: string;\n\n  public constructor(id: number, name: string, description: string) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n\n    makeObservable(this, {\n      id: observable,\n      name: observable,\n      description: observable,\n    });\n  }\n}\n\nexport class DraftUpdateProject\n  extends Project\n  implements DraftUpdateRecord<number, Project>\n{\n  static fromProject(project: Project) {\n    return new DraftUpdateProject(\n      project.id,\n      project.name,\n      project.description\n    );\n  }\n\n  markSaved() {}\n\n  toModel(): Project | undefined {\n    return new Project(this.id, this.name, this.description);\n  }\n}\n\nexport class DraftCreateProject extends Project implements DraftCreateRecord {\n  public draftID: string;\n\n  constructor(draftID: string) {\n    super(0, \"\", \"\");\n    this.draftID = draftID;\n  }\n}\n\nexport class ProjectStore extends CRUDStore<\n  number,\n  DraftCreateProject,\n  DraftUpdateProject,\n  Project\n> {\n  constructor() {\n    super(`${SERVER}/api/project`, undefined, false);\n  }\n\n  public deserialize(record: any): Project {\n    return new Project(record.id, record.name, record.description);\n  }\n\n  public serializeUpdateDraft(record: DraftUpdateProject): object {\n    return {\n      id: record.name,\n      name: record.name,\n      description: record.description,\n    };\n  }\n\n  public serializeCreateDraft(record: DraftCreateProject): object {\n    return { name: record.name, description: record.description };\n  }\n}\n","import { SERVER } from \"../../env\";\nimport { PairKeysUniqueIndex, RStore } from \"rma-baseapp\";\nimport { TableRow } from \"./Table\";\n\nexport class TableRowStore extends RStore<number, TableRow> {\n  protected tableIndex: PairKeysUniqueIndex<number, number, number> =\n    new PairKeysUniqueIndex(\"table\", \"index\");\n\n  constructor() {\n    super(`${SERVER}/api/tablerow`, undefined, false);\n  }\n\n  /**\n   * Find rows of the table\n   *\n   * @param tableId\n   * @param start the start row\n   * @param no number of rows to return\n   * @returns\n   */\n  findByTable = (tableId: number, start: number, no: number): TableRow[] => {\n    const map = this.tableIndex.index.get(tableId);\n    if (map === undefined) return [];\n\n    const output = [];\n    for (let i = 0; i < no; i++) {\n      const rowId = map.get(i + start);\n      if (rowId === undefined) {\n        break;\n      }\n      output.push(this.records.get(rowId)!);\n    }\n    return output;\n  };\n\n  protected index(record: TableRow) {\n    this.tableIndex.add(record);\n  }\n\n  public deserialize(record: any): TableRow {\n    Object.values(record.links).forEach((links: any) => {\n      links.forEach((link: any) => {\n        if (link.entity !== null) {\n          link.entityId = link.entity;\n        }\n        link.candidate_entities.forEach((ce: any) => {\n          ce.entityId = ce.entity;\n          delete ce.entity;\n        });\n        link.candidateEntities = link.candidate_entities;\n        delete link.entity_id;\n        delete link.candidate_entities;\n      });\n    });\n    return record;\n  }\n}\n","import { SERVER } from \"../../env\";\nimport { SingleKeyIndex, RStore } from \"rma-baseapp\";\nimport { Table } from \"./Table\";\n\nexport class TableStore extends RStore<number, Table> {\n  protected projectIndex: SingleKeyIndex<number, number> = new SingleKeyIndex(\n    \"project\"\n  );\n\n  constructor() {\n    super(`${SERVER}/api/table`, undefined, false);\n  }\n\n  /**\n   * Find tables in a project\n   *\n   * @param projectId\n   * @param start\n   * @param no number of tables to return\n   */\n  findByProject = (projectId: number, start?: number, no?: number): Table[] => {\n    return Array.from(this.projectIndex.index.get(projectId) || []).map(\n      (id) => this.records.get(id)!\n    );\n  };\n\n  public deserialize(record: any): Table {\n    record.contextPage = record.context_page;\n    if (\n      record.contextPage !== null &&\n      record.contextPage !== undefined &&\n      record.contextPage.entity !== null\n    ) {\n      record.contextPage.entityId = record.contextPage.entity;\n      delete record.contextPage.entity;\n    }\n    record.contextValues = record.context_values;\n    record.contextTree = record.context_tree;\n    delete record.context_tree;\n    delete record.context_values;\n    delete record.context_page;\n    return record;\n  }\n\n  protected index(record: Table) {\n    this.projectIndex.add(record);\n  }\n}\n","import { observable, toJS, action, makeObservable } from \"mobx\";\nimport { Resource } from \"../entity\";\n\nexport interface ClassNode {\n  id: string;\n  uri: string;\n  // for class node only, telling if the class is an approximation\n  approximation: boolean;\n  // readable label in form of `{label} ({qnode id})`; not obtaining from URICount.\n  label: string;\n  readonly nodetype: \"class_node\";\n}\n\nexport interface DataNode {\n  id: string;\n  // column name\n  label: string;\n  columnIndex: number;\n  readonly nodetype: \"data_node\";\n}\n\nexport type LiteralDataType = \"entity-id\" | \"string\";\n\nexport interface LiteralNode {\n  id: string;\n  /**\n   * ID for entity, otherwise string literal\n   */\n  value: string;\n  // column name\n  label: string;\n  /**\n   * DataType of the literal node\n   */\n  datatype: LiteralDataType;\n  // whether this is a node in the context, apply for literal node only\n  readonly isInContext: boolean;\n  readonly nodetype: \"literal_node\";\n}\n\nexport type SMNode = ClassNode | DataNode | LiteralNode;\nexport type SMNodeType = \"class_node\" | \"data_node\" | \"literal_node\";\n\nexport interface GraphEdge {\n  source: string;\n  target: string;\n  uri: string;\n  approximation: boolean;\n  label: string;\n}\n\nexport class URICount {\n  // a map from uri of nodes to the next available number\n  private counter: { [uri: string]: number } = {};\n  private id2num: { [id: string]: number } = {};\n\n  constructor(nodes?: SMNode[]) {\n    for (let node of nodes || []) {\n      if (node.nodetype !== \"class_node\") continue;\n\n      if (this.counter[node.uri] === undefined) {\n        this.counter[node.uri] = 1;\n      }\n      this.id2num[node.id] = this.counter[node.uri];\n      this.counter[node.uri] += 1;\n    }\n  }\n\n  label = (node: SMNode) => {\n    return `${node.label} ${this.id2num[node.id]}`;\n  };\n\n  nextLabel = (uri: string, label: string) => {\n    return `${label} ${this.counter[uri] || 1}`;\n  };\n\n  unlabel = (label: string) => {\n    return label.substring(0, label.lastIndexOf(\" \"));\n  };\n\n  add = (node: ClassNode) => {\n    if (this.counter[node.uri] === undefined) {\n      this.counter[node.uri] = 1;\n    }\n    this.id2num[node.id] = this.counter[node.uri];\n    this.counter[node.uri] += 1;\n  };\n}\n\nexport class SMGraph {\n  public id: string;\n  public version: number;\n  public nodes: SMNode[];\n  public edges: GraphEdge[];\n  public stale: boolean; // if it is stale\n  public nodeId2Index: { [id: string]: number } = {};\n  public column2nodeIndex: { [columnIndex: number]: number } = {};\n  public uriCount: URICount;\n\n  constructor(id: string, nodes: SMNode[], edges: GraphEdge[]) {\n    this.id = id;\n    this.version = 0;\n    this.nodes = nodes;\n    this.edges = edges;\n    this.stale = false;\n\n    this.buildIndex();\n    this.uriCount = new URICount(this.nodes);\n\n    makeObservable(this, {\n      version: observable,\n      nodes: observable,\n      edges: observable,\n      stale: observable,\n      nodeId2Index: observable,\n      column2nodeIndex: observable,\n      uriCount: observable,\n      addColumnRelationship: action,\n      upsertColumnType: action,\n      upsertRelationship: action,\n      addClassNode: action,\n      addLiteralNode: action,\n      removeNode: action,\n      updateClassNode: action,\n      updateDataNode: action,\n      updateLiteralNode: action,\n      addEdge: action,\n      removeEdge: action,\n      updateEdge: action,\n    });\n  }\n\n  onSave = () => {\n    this.stale = false;\n  };\n\n  node = (id: string) => this.nodes[this.nodeId2Index[id]];\n  hasNode = (id: string) => this.nodeId2Index[id] !== undefined;\n  nodesByURI = (uri: string) =>\n    this.nodes.filter(\n      (node) => node.nodetype === \"class_node\" && node.uri === uri\n    );\n  nodeByColumnIndex = (id: number) => this.nodes[this.column2nodeIndex[id]];\n\n  edge = (source: string, target: string) =>\n    this.edges.filter((e) => e.source === source && e.target === target)[0];\n  hasEdge = (source: string, target: string) =>\n    this.edges.filter((e) => e.source === source && e.target === target)\n      .length > 0;\n  incomingEdges = (target: string) =>\n    this.edges.filter((e) => e.target === target);\n  outgoingEdges = (source: string) =>\n    this.edges.filter((e) => e.source === source);\n\n  nextNodeId = () => {\n    for (let i = 0; i < this.nodes.length * 100; i++) {\n      let nid = `c-${i}`;\n      if (this.nodeId2Index[nid] === undefined) {\n        return nid;\n      }\n    }\n    throw new Error(\"Cannot find new id for a node\");\n  };\n\n  public toJS() {\n    return {\n      nodes: toJS(this.nodes),\n      edges: toJS(this.edges),\n      nodeId2Index: toJS(this.nodeId2Index),\n    };\n  }\n\n  /** Find all paths (max 2 hops) that connect two nodes */\n  findPathMax2hops = (\n    sourceId: string,\n    targetId: string\n  ): [GraphEdge, GraphEdge?][] => {\n    let matchPaths: [GraphEdge, GraphEdge?][] = [];\n    let outedges = this.outgoingEdges(sourceId);\n    for (let outedge of outedges) {\n      if (outedge.target === targetId) {\n        matchPaths.push([outedge, undefined]);\n        continue;\n      }\n\n      for (let outedge2 of this.outgoingEdges(outedge.target)) {\n        if (outedge2.target === targetId) {\n          matchPaths.push([outedge, outedge2]);\n        }\n      }\n    }\n\n    return matchPaths;\n  };\n\n  /**\n   * Get the class node of an entity column. Undefined if the column is not an entity node\n   * @param columnIndex\n   * @returns\n   */\n  getClassIdOfColumnIndex = (columnIndex: number): string | undefined => {\n    let inedges = this.incomingEdges(this.nodeByColumnIndex(columnIndex).id);\n    for (let inedge of inedges) {\n      if (inedge.uri === \"http://www.w3.org/2000/01/rdf-schema#label\") {\n        if (inedges.length > 1) {\n          throw new Error(\n            \"Invalid semantic model. An entity column has two incoming edges\"\n          );\n        }\n        return inedge.source;\n      }\n    }\n    return undefined;\n  };\n\n  getOutgoingProperties = (id: string): [GraphEdge, GraphEdge?][] => {\n    let outprops: [GraphEdge, GraphEdge?][] = [];\n    for (let outedge of this.outgoingEdges(id)) {\n      let target = this.node(outedge.target);\n      if (\n        target.nodetype === \"class_node\" &&\n        target.uri === \"http://wikiba.se/ontology#Statement\"\n      ) {\n        for (let coutedge of this.outgoingEdges(outedge.target)) {\n          outprops.push([outedge, coutedge]);\n        }\n      } else {\n        outprops.push([outedge, undefined]);\n      }\n    }\n    return outprops;\n  };\n\n  /******************************************************************\n   * Below is a list of operators that modify the graph. The index is rebuilt/modify\n   * inside @action function\n   ******************************************************************\n   */\n\n  /**\n   * Add a link between two columns\n   *\n   * @deprecated\n   * @param sourceColumnIndex\n   * @param targetColumnIndex\n   * @param edgeData\n   */\n  public addColumnRelationship(\n    sourceColumnIndex: number,\n    targetColumnIndex: number,\n    edgeData: Omit<GraphEdge, \"source\" | \"target\">\n  ) {\n    let source = this.nodeByColumnIndex(sourceColumnIndex);\n    let target = this.nodeByColumnIndex(targetColumnIndex);\n\n    let sourceIncomingEdges = this.incomingEdges(source.id);\n    if (sourceIncomingEdges.length === 0) {\n      throw new Error(\"Cannot add link from a data node to another node\");\n    }\n    if (sourceIncomingEdges.length !== 1) {\n      throw new Error(\n        \"The source column connects to multiple class nodes! Don't know the exact class node to choose\"\n      );\n    }\n\n    let targetIncomingEdges = this.incomingEdges(target.id);\n    if (targetIncomingEdges.length > 1) {\n      throw new Error(\n        \"The target column connects to multiple class nodes! Don't know the exact class node to choose\"\n      );\n    }\n\n    let realSource = sourceIncomingEdges[0].source;\n    let realTarget =\n      targetIncomingEdges.length === 0\n        ? target.id\n        : targetIncomingEdges[0].source;\n\n    this.addEdge({\n      ...edgeData,\n      source: realSource,\n      target: realTarget,\n    });\n  }\n\n  /**\n   * Upsert the type of the column: replace the type if exist otherwise, create the type including the\n   * new class node.\n   *\n   * @param columnIndex\n   * @param source\n   */\n  public upsertColumnType(columnIndex: number, source: Omit<ClassNode, \"id\">) {\n    let target = this.nodeByColumnIndex(columnIndex);\n    let targetIncomingEdges = this.incomingEdges(target.id);\n\n    if (targetIncomingEdges.length > 1) {\n      throw new Error(\n        \"The column connects to multiple class nodes! Don't know the exact class node to choose\"\n      );\n    }\n\n    if (targetIncomingEdges.length === 0) {\n      let sourceId = this.nextNodeId();\n      this.addClassNode({\n        ...source,\n        id: sourceId,\n      });\n\n      this.addEdge({\n        source: sourceId,\n        target: target.id,\n        uri: \"http://www.w3.org/2000/01/rdf-schema#label\",\n        label: \"rdfs:label\",\n        approximation: false,\n      });\n    } else {\n      let edge = targetIncomingEdges[0];\n      this.updateClassNode(edge.source, source);\n      if (edge.uri !== \"http://www.w3.org/2000/01/rdf-schema#label\") {\n        // need to update the edge as well\n        this.updateEdge(edge.source, edge.target, {\n          uri: \"http://www.w3.org/2000/01/rdf-schema#label\",\n          label: \"rdfs:label\",\n          approximation: edge.approximation,\n        });\n      }\n    }\n  }\n\n  /**\n   * Upsert the relationship between two nodes: replace the type if exist otherwise create id.\n   *\n   * This is a special function as it tight the system to Wikidata with special node of\n   * wikibase:Statement & property/qualifier. Assuming that the source node and target node\n   * always exist.\n   *\n   * @param sourceId\n   * @param targetId\n   * @param pred1\n   * @param pred2\n   */\n  public upsertRelationship(\n    sourceId: string,\n    targetId: string,\n    pred1: Resource,\n    pred2: Resource\n  ) {\n    // let source = this.node(sourceId);\n    // let target = this.node(targetId);\n\n    let matchPaths = this.findPathMax2hops(sourceId, targetId);\n\n    if (matchPaths.length === 0) {\n      // no new node, so we need to create it\n      if (pred1.uri === pred2.uri) {\n        // we just need to create one link\n        this.addEdge({\n          source: sourceId,\n          target: targetId,\n          uri: pred1.uri,\n          label: pred1.label,\n          approximation: false,\n        });\n      } else {\n        let tempid = this.nextNodeId();\n        this.addClassNode({\n          id: tempid,\n          uri: \"http://wikiba.se/ontology#Statement\",\n          label: \"wikibase:Statement\",\n          approximation: false,\n          nodetype: \"class_node\",\n        });\n        this.addEdge({\n          source: sourceId,\n          target: tempid,\n          uri: pred1.uri,\n          label: pred1.label,\n          approximation: false,\n        });\n        this.addEdge({\n          source: tempid,\n          target: targetId,\n          uri: pred2.uri,\n          label: pred2.label,\n          approximation: false,\n        });\n      }\n      return;\n    }\n\n    if (matchPaths.length > 1) {\n      throw new Error(\n        \"There are more one path between two nodes. Don't know which path to update it\"\n      );\n    }\n\n    let [edge1, edge2] = matchPaths[0];\n    this.updateEdge(edge1.source, edge1.target, {\n      uri: pred1.uri,\n      label: pred1.label,\n      approximation: false,\n    });\n    if (edge2 !== undefined) {\n      // non direct property, we need to update it as well\n      this.updateEdge(edge2.source, edge2.target, {\n        uri: pred2.uri,\n        label: pred2.label,\n        approximation: false,\n      });\n    }\n  }\n\n  /**\n   * Add a class node to the model.\n   */\n  public addClassNode(node: ClassNode) {\n    if (this.nodeId2Index[node.id] !== undefined) {\n      throw new Error(\"Duplicated id\");\n    }\n    this.nodeId2Index[node.id] = this.nodes.length;\n    this.nodes.push(node);\n    this.uriCount.add(node);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  /**\n   * Add a literal node to the model\n   */\n  public addLiteralNode(node: LiteralNode) {\n    if (this.nodeId2Index[node.id] !== undefined) {\n      throw new Error(\"Duplicated id\");\n    }\n    this.nodeId2Index[node.id] = this.nodes.length;\n    this.nodes.push(node);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public removeNode(nodeId: string) {\n    this._removeNode(nodeId);\n    this.nodes = this.nodes.filter((n) => n !== undefined);\n    this.buildIndex();\n    this.version += 1;\n    this.stale = true;\n    this.uriCount = new URICount(this.nodes);\n  }\n\n  public updateClassNode(nodeId: string, props: Partial<ClassNode>) {\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (node.nodetype !== \"class_node\") {\n      throw new Error(\n        `Invalid node type. Expected class node but get ${node.nodetype}`\n      );\n    }\n    Object.assign(node, props);\n    this.version += 1;\n    this.stale = true;\n    if (props.uri !== undefined) {\n      this.uriCount = new URICount(this.nodes);\n    }\n  }\n\n  public updateLiteralNode(nodeId: string, props: Partial<LiteralNode>) {\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (node.nodetype !== \"literal_node\") {\n      throw new Error(\n        `Invalid node type. Expected literal node but get ${node.nodetype}`\n      );\n    }\n    Object.assign(node, props);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public updateDataNode(nodeId: string, props: Partial<DataNode>) {\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (node.nodetype !== \"data_node\") {\n      throw new Error(\n        `Invalid node type. Expected data node but get ${node.nodetype}`\n      );\n    }\n    Object.assign(node, props);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public addEdge(edge: GraphEdge) {\n    if (\n      this.edges.filter(\n        (e) => e.source === edge.source && e.target === edge.target\n      ).length > 0\n    ) {\n      throw new Error(\"Cannot have more than one edge between two classes\");\n    }\n\n    this.edges.push(edge);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public removeEdge(sourceId: string, targetId: string) {\n    let size = this.nodes.length;\n    this._removeEdge(sourceId, targetId);\n    this.nodes = this.nodes.filter((n) => n !== undefined);\n\n    if (this.nodes.length !== size) {\n      this.buildIndex();\n      this.uriCount = new URICount(this.nodes);\n    }\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public updateEdge(source: string, target: string, props: Partial<GraphEdge>) {\n    for (let i = 0; i < this.edges.length; i++) {\n      let edge = this.edges[i];\n      if (edge.source === source && edge.target === target) {\n        this.edges[i] = { ...this.edges[i], ...props };\n      }\n    }\n    this.version = (this.version || 0) + 1;\n    this.stale = true;\n  }\n\n  /**\n   * Cascading remove nodes in the graph. To avoid rebuilding the index\n   * everytime we delete a node, we replace the deleted node by undefined.\n   * A post process step is needed to filter out all undefined items in the list\n   */\n  private _removeNode = (nodeId: string) => {\n    if (\n      this.nodeId2Index[nodeId] === undefined ||\n      this.nodes[this.nodeId2Index[nodeId]] === undefined\n    ) {\n      return;\n    }\n\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (\n      node.nodetype === \"data_node\" ||\n      (node.nodetype === \"literal_node\" && node.isInContext)\n    ) {\n      // don't remove data nodes && context node;\n      return;\n    }\n\n    // remove node by mark it undefined\n    (this.nodes[nodeIndex] as any) = undefined;\n\n    // we need to remove other edges connected to this node\n    let edges = this.edges.filter(\n      (edge) => edge.source === nodeId || edge.target === nodeId\n    );\n    for (let edge of edges) {\n      this._removeEdge(edge.source, edge.target);\n    }\n  };\n\n  /**\n   * Cascading remove edges in the graph\n   */\n  private _removeEdge = (sourceId: string, targetId: string) => {\n    let edgeIndex = undefined;\n    let sourceDegree = 0;\n    let targetDegree = 0;\n\n    for (let i = 0; i < this.edges.length; i++) {\n      let edge = this.edges[i];\n      if (edge.source === sourceId && edge.target === targetId) {\n        edgeIndex = i;\n      }\n      if (edge.source === sourceId || edge.target === sourceId) {\n        sourceDegree += 1;\n      }\n      if (edge.source === targetId || edge.target === targetId) {\n        targetDegree += 1;\n      }\n    }\n\n    if (edgeIndex === undefined) {\n      return;\n    }\n\n    // remove edge\n    this.edges.splice(edgeIndex, 1);\n\n    // if a node only has one connection, so we delete it because now it is lonely, except if it is\n    // a data node\n    if (sourceDegree === 1) {\n      this._removeNode(sourceId);\n    }\n    if (targetDegree === 1) {\n      this._removeNode(targetId);\n    }\n  };\n\n  private buildIndex = () => {\n    this.nodeId2Index = {};\n    this.column2nodeIndex = {};\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      let n = this.nodes[i];\n      this.nodeId2Index[n.id] = i;\n      if (n.nodetype === \"data_node\" && n.columnIndex !== null) {\n        this.column2nodeIndex[n.columnIndex] = i;\n      }\n    }\n  };\n}\n","import {\n  CRUDStore,\n  DraftCreateRecord,\n  DraftUpdateRecord,\n  Record,\n  SingleKeyIndex,\n} from \"rma-baseapp\";\nimport { SERVER } from \"../../env\";\nimport { SMGraph, SMNodeType } from \"./SMGraph\";\n\nexport class SemanticModel\n  implements Record<number>, DraftUpdateRecord<number, SemanticModel>\n{\n  id: number;\n  name: string;\n  description: string;\n  version: number;\n  graph: SMGraph;\n  table: number;\n\n  constructor(\n    id: number,\n    name: string,\n    description: string,\n    version: number,\n    graph: SMGraph,\n    table: number\n  ) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n    this.version = version;\n    this.graph = graph;\n    this.table = table;\n  }\n\n  get isDraft() {\n    return false;\n  }\n\n  markSaved(): void {\n    this.graph.onSave();\n  }\n\n  toModel(): SemanticModel | undefined {\n    return this;\n  }\n}\n\nexport class DraftSemanticModel\n  extends SemanticModel\n  implements DraftCreateRecord\n{\n  draftID: string;\n\n  constructor(\n    draftID: string,\n    name: string,\n    description: string,\n    version: number,\n    graph: SMGraph,\n    table: number\n  ) {\n    super(-1, name, description, version, graph, table);\n    this.draftID = draftID;\n  }\n\n  get isDraft() {\n    return true;\n  }\n}\n\nexport class SemanticModelStore extends CRUDStore<\n  number,\n  DraftSemanticModel,\n  SemanticModel,\n  SemanticModel\n> {\n  protected tableIndex: SingleKeyIndex<number, number> = new SingleKeyIndex(\n    \"table\"\n  );\n\n  constructor() {\n    super(`${SERVER}/api/semanticmodel`, undefined, false);\n  }\n\n  /**\n   * Find semantic models of the given table.\n   */\n  public findByTable(tableId: number): SemanticModel[] {\n    return Array.from(this.tableIndex.index.get(tableId) || []).map(\n      (id) => this.records.get(id)!\n    );\n  }\n\n  /** Whether we have local copies of semantic models of a given table */\n  public hasByTable(tableId: number): boolean {\n    return this.tableIndex.index.has(tableId);\n  }\n\n  public deserialize(record: any): SemanticModel {\n    let nodes = record.data.nodes.map((node: any) => {\n      const type: SMNodeType = node.type;\n      delete node.type;\n      node.nodetype = type;\n      if (type === \"data_node\") {\n        node.columnIndex = node.column_index;\n        delete node.column_index;\n      } else if (type === \"literal_node\") {\n        node.isInContext = node.is_in_context;\n        delete node.is_in_context;\n      }\n      return node;\n    });\n    let graph = new SMGraph(record.id.toString(), nodes, record.data.edges);\n    return new SemanticModel(\n      record.id,\n      record.name,\n      record.description,\n      record.version,\n      graph,\n      record.table\n    );\n  }\n\n  public serializeUpdateDraft(record: any): object {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  public serializeCreateDraft(record: DraftSemanticModel): object {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  protected index(record: SemanticModel): void {\n    this.tableIndex.add(record);\n  }\n}\n","import { makeObservable, observable } from \"mobx\";\n\n/** An entity modeled according to Wikidata Qnode */\nexport class Entity {\n  public id: string;\n  public label: MultiLingualString;\n  public aliases: MultiLingualStringList;\n  public description: MultiLingualString;\n  public properties: { [prop: string]: Statement[] };\n\n  constructor(\n    id: string,\n    label: MultiLingualString,\n    aliases: MultiLingualStringList,\n    description: MultiLingualString,\n    props: { [prop: string]: Statement[] }\n  ) {\n    this.id = id;\n    this.label = label;\n    this.aliases = aliases;\n    this.description = description;\n    this.properties = props;\n\n    makeObservable(this, {\n      id: observable,\n      label: observable,\n      aliases: observable,\n      description: observable,\n      properties: observable,\n    });\n  }\n\n  /**\n   * Mapping from entity id to url to external KG\n   * @param entityId\n   */\n  static id2uri = (entityId: string): string => {\n    switch (entityId[0]) {\n      case \"Q\":\n        return `https://www.wikidata.org/wiki/${entityId}`;\n      case \"P\":\n        return `https://www.wikidata.org/wiki/Property:${entityId}`;\n      case \"L\":\n        return `https://www.wikidata.org/wiki/Lexeme:${entityId}`;\n      default:\n        return entityId;\n    }\n  };\n}\n\nexport type MultiLingualString = { [lang: string]: string };\nexport type MultiLingualStringList = { [lang: string]: string[] };\n\nexport interface Statement {\n  value: DataValue;\n  // mapping from qualifier id into data value\n  qualifiers: { [qualifier: string]: DataValue[] };\n  // order of qualifiers as dictionary lacks of order\n  qualifiersOrder: string[];\n}\n\nexport type DataValue =\n  | DataValueString\n  | DataValueTime\n  | DataValueQuantity\n  | DataValueGlobeCoordinate\n  | DataValueMonolingualText\n  | DataValueEntity;\n\nexport interface DataValueTime {\n  readonly type: \"time\";\n  value: {\n    time: string;\n    timezone: number;\n    before: number;\n    after: number;\n    precision: number;\n    calendarmodel: string;\n  };\n}\n\nexport interface DataValueQuantity {\n  readonly type: \"quantity\";\n  value: {\n    amount: string;\n    upperBound: string;\n    lowerBound: string;\n    unit: string;\n  };\n}\n\nexport interface DataValueMonolingualText {\n  readonly type: \"monolingualtext\";\n  value: {\n    text: string;\n    language: string;\n  };\n}\n\nexport interface DataValueGlobeCoordinate {\n  readonly type: \"globecoordinate\";\n  value: {\n    latitude: number;\n    longitude: number;\n    precision: number;\n    altitude: null;\n    globe: string;\n  };\n}\n\nexport interface DataValueEntity {\n  readonly type: \"entityid\";\n  value: string;\n}\n\nexport interface DataValueString {\n  readonly type: \"string\";\n  value: string;\n}\n","import { AxiosError } from \"axios\";\nimport { RStore } from \"rma-baseapp\";\nimport { SERVER } from \"../../env\";\nimport { Entity } from \"./Entity\";\n\nexport class EntityStore extends RStore<string, Entity> {\n  protected fetchByIdQueue: Map<\n    string,\n    ((entity?: Entity, error?: AxiosError<any>) => void)[]\n  >;\n\n  constructor() {\n    super(`${SERVER}/api/entities`, undefined, false);\n    this.fetchByIdQueue = new Map();\n  }\n\n  /**\n   * Fetch entity from server. However, only one request is sent out and the rest\n   * if coming too fast is going to use the response of the previous request\n   *\n   * @param id entity id\n   * @returns\n   */\n  public serializeFetchById(id: string): Promise<Entity | undefined> {\n    return new Promise((resolve, reject) => {\n      if (!this.fetchByIdQueue.has(id)) {\n        this.fetchByIdQueue.set(id, []);\n        return this.fetchById(id)\n          .catch((error) => {\n            for (const listener of this.fetchByIdQueue.get(id) || []) {\n              listener(undefined, error);\n            }\n            this.fetchByIdQueue.delete(id);\n            throw error;\n          })\n          .then((entity) => {\n            // release the rest of the queued requests\n            for (const listener of this.fetchByIdQueue.get(id) || []) {\n              listener(entity);\n            }\n            this.fetchByIdQueue.delete(id);\n            return entity;\n          });\n      } else {\n        this.fetchByIdQueue.get(id)!.push((entity, error) => {\n          if (error !== undefined) {\n            reject(error);\n          } else {\n            resolve(entity);\n          }\n        });\n      }\n    });\n  }\n\n  public deserialize(record: any): Entity {\n    for (const stmts of Object.values(record.properties)) {\n      for (let stmt of stmts as any[]) {\n        stmt.qualifiersOrder = stmt.qualifiers_order;\n        delete stmt.qualifiers_order;\n      }\n    }\n    return record;\n  }\n}\n","import { RStore } from \"rma-baseapp\";\nimport { SERVER } from \"../../env\";\n\nexport interface Property {\n  id: string;\n  uri: string;\n  label: string;\n  readableLabel: string;\n  aliases: string[];\n  description: string;\n  parents: string[];\n}\n\nexport class PropertyStore extends RStore<string, Property> {\n  constructor() {\n    super(\n      `${SERVER}/api/properties`,\n      { readableLabel: \"readable_label\" },\n      false\n    );\n  }\n}\n","import { Project, ProjectStore } from \"./Project\";\nimport { createContext } from \"react\";\n\nimport React from \"react\";\nimport { TableStore, TableRowStore } from \"./table\";\nimport {\n  DraftSemanticModel,\n  SemanticModel,\n  SMGraph,\n  URICount,\n  SemanticModelStore,\n} from \"./sm\";\nimport { Entity, EntityStore } from \"./entity\";\nimport { PropertyStore } from \"./ontology/PropertyStore\";\n\nexport const stores = {\n  projectStore: new ProjectStore(),\n  tableStore: new TableStore(),\n  tableRowStore: new TableRowStore(),\n  semanticModelStore: new SemanticModelStore(),\n  entityStore: new EntityStore(),\n  propertyStore: new PropertyStore(),\n};\n(window as any)._stores = stores;\nexport type IStore = Readonly<typeof stores>;\n\nexport const StoreContext = createContext<IStore>(stores);\n\nexport function useStores(): IStore {\n  return React.useContext(StoreContext);\n}\n\nexport {\n  ProjectStore,\n  TableStore,\n  TableRowStore,\n  Project,\n  SemanticModelStore,\n  DraftSemanticModel,\n  PropertyStore,\n  SemanticModel,\n  SMGraph,\n  URICount,\n  Entity,\n};\nexport type { Property } from \"./ontology/PropertyStore\";\nexport type { Table, TableRow } from \"./table\";\nexport type { GraphEdge, SMNode as GraphNode } from \"./sm/SMGraph\";\n","import { Avatar, Col, List, Row, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { InternalLink } from \"rma-baseapp\";\nimport { useStores } from \"../models\";\nimport { routes } from \"../routes\";\n\nexport const HomePage = observer(() => {\n  const { projectStore } = useStores();\n\n  useEffect(() => {\n    projectStore.fetch({ limit: 100, offset: 0 });\n  }, [projectStore]);\n\n  return (\n    <React.Fragment>\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={24}>\n          <Typography.Title level={3}>Projects</Typography.Title>\n          <List\n            size=\"small\"\n            bordered={true}\n            itemLayout=\"horizontal\"\n            dataSource={projectStore.list}\n            renderItem={(project, i) => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={\n                    <Avatar\n                      shape=\"square\"\n                      size=\"large\"\n                      style={{\n                        marginTop: 4,\n                        backgroundColor: [\n                          \"#f56a00\",\n                          \"#7265e6\",\n                          \"#1890ff\",\n                          \"#00a2ae\",\n                        ][project.name.charCodeAt(0) % 4],\n                      }}\n                    >\n                      {project.name[0].toUpperCase()}\n                    </Avatar>\n                  }\n                  title={\n                    <InternalLink\n                      path={routes.project}\n                      urlArgs={{ projectId: project.id }}\n                      queryArgs={{}}\n                    >\n                      {project.name}\n                    </InternalLink>\n                  }\n                  description={project.description}\n                />\n              </List.Item>\n            )}\n          />\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n});\n","import ProTable from \"@ant-design/pro-table\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Typography } from \"antd\";\nimport _ from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { InternalLink, LoadingPage, NotFoundPage } from \"rma-baseapp\";\nimport { Table, useStores } from \"../models\";\nimport { routes } from \"../routes\";\n\nconst styles = {\n  table: {\n    \"& div.ant-table-container\": {\n      border: \"1px solid #bbb\",\n      borderRadius: 4,\n      borderLeft: \"1px solid #bbb !important\",\n    },\n    \"& div.ant-card-body\": {\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    \"& th\": {\n      fontWeight: 600,\n    },\n  },\n};\n\nexport const ProjectPage = withStyles(styles)(\n  observer(({ classes }: WithStyles<typeof styles>) => {\n    const projectId = routes.project.useURLParams()!.projectId;\n\n    const { projectStore, tableStore } = useStores();\n    useEffect(() => {\n      projectStore.fetchById(projectId);\n    }, [projectStore, projectId]);\n\n    const project = projectStore.get(projectId);\n    if (project === undefined) {\n      return <LoadingPage />;\n    } else if (project === null) {\n      return <NotFoundPage />;\n    }\n\n    const columns = [\n      { dataIndex: \"id\", title: \"id\" },\n      {\n        dataIndex: \"name\",\n        title: \"name\",\n        renderText: (text: string, tbl: ReturnType<typeof table2row>) => {\n          return (\n            <InternalLink\n              path={routes.table}\n              urlArgs={{ tableId: tbl.id }}\n              queryArgs={{\n                query: tableStore.encodeWhereQuery({ project: projectId }),\n              }}\n            >\n              {tbl.name}\n            </InternalLink>\n          );\n        },\n      },\n      { dataIndex: \"description\", title: \"description\" },\n    ];\n\n    return (\n      <React.Fragment>\n        <Typography.Title level={3}>\n          Project: {_.upperFirst(project.name)}\n        </Typography.Title>\n        <ProTable<ReturnType<typeof table2row>>\n          className={classes.table}\n          defaultSize=\"small\"\n          bordered={true}\n          request={async (params, sort, filter) => {\n            let result = await tableStore.fetch({\n              limit: params.pageSize!,\n              offset: (params.current! - 1) * params.pageSize!,\n              conditions: { project: projectId },\n            });\n            return {\n              data: result.records.map(table2row),\n              success: true,\n              total: result.total,\n            };\n          }}\n          options={{\n            search: true,\n          }}\n          headerTitle={<Typography.Title level={4}>Tables</Typography.Title>}\n          // toolBarRender={false}\n          search={false}\n          pagination={{\n            pageSize: 10,\n            pageSizeOptions: [\"10\", \"20\", \"50\", \"100\", \"200\", \"500\", \"1000\"],\n          }}\n          rowKey=\"id\"\n          columns={columns}\n        />\n      </React.Fragment>\n    );\n  })\n);\n\nfunction table2row(tbl: Table) {\n  return {\n    id: tbl.id,\n    name: tbl.name,\n    description: tbl.description,\n  };\n}\n","import { useEffect, useMemo } from \"react\";\nimport { Property, useStores } from \"../../models\";\nimport { Entity } from \"../../models/entity\";\nexport { Entity } from \"../../models/entity\";\n\n/**\n * A placeholder for an entity that has not been loaded yet.\n */\nexport interface IncompleteEntity {\n  id: string;\n  // whether the value is still fetching or not\n  doesNotExist: boolean;\n}\n\n/**\n * Type guard to check if an entity is loaded (completed)\n */\nexport function isEntityComplete(\n  entity: Entity | IncompleteEntity\n): entity is Entity {\n  return (entity as IncompleteEntity).doesNotExist === undefined;\n}\n\n/**\n * A placeholder for a property that has not been loaded yet.\n */\nexport interface IncompleteProperty {\n  id: string;\n  // will just be the property id\n  label: string;\n  // whether the value is still fetching or not\n  doesNotExist: boolean;\n}\n\n/**\n * Type guard to check if a property is loaded (completed)\n */\nexport function isPropertyComplete(\n  prop: Property | IncompleteProperty\n): prop is Property {\n  return (prop as IncompleteProperty).doesNotExist === undefined;\n}\n\nexport type ID2Prop = Record<string, Property | IncompleteProperty>;\n\n/**\n * Gather properties of an entity.\n */\nexport function useEntityProperties(entity: Entity): ID2Prop {\n  const propIds = useMemo(() => {\n    const ids: Set<string> = new Set();\n    for (const [pid, stmts] of Object.entries(entity.properties)) {\n      ids.add(pid);\n      for (const stmt of stmts) {\n        for (const qid of Object.keys(stmt.qualifiers)) {\n          ids.add(qid);\n        }\n      }\n    }\n    return Array.from(ids);\n  }, [entity.id]);\n\n  const { propertyStore } = useStores();\n\n  useEffect(() => {\n    propertyStore.fetchByIds(propIds);\n  }, [entity.id]);\n\n  return Object.fromEntries(\n    propIds.map((id) => {\n      const record = propertyStore.get(id);\n      if (record) {\n        return [id, record];\n      }\n      return [id, { id, doesNotExist: record === null }];\n    })\n  );\n}\n","import { ExternalLink } from \"rma-baseapp\";\nimport { Entity } from \"./Entity\";\n\n/**\n * Render entity in a single line.\n *\n * @param entity the entity to render\n * @param noLink whether to render the entity as plain text (not clickable to open a page)\n */\nexport const InlineEntityComponent = ({\n  entity,\n  nolink = false,\n  ...restprops\n}: {\n  entity: Entity;\n  nolink?: boolean;\n} & Omit<React.HTMLProps<HTMLAnchorElement>, \"href\" | \"target\" | \"rel\">) => {\n  if (nolink) {\n    return (\n      <span {...restprops}>\n        {entity.label[\"en\"]} ({entity.id})\n      </span>\n    );\n  }\n\n  return (\n    <ExternalLink\n      href={Entity.id2uri(entity.id)}\n      openInNewPage={true}\n      {...restprops}\n    >\n      {entity.label[\"en\"]} ({entity.id})\n    </ExternalLink>\n  );\n};\n","import { Result } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { LoadingPage } from \"rma-baseapp\";\nimport { useStores } from \"../../models\";\nimport { Entity } from \"./Entity\";\n\nexport const FetchEntityComponent = observer(\n  ({\n    entityId,\n    render,\n    forceWaiting = false,\n  }: {\n    entityId: string;\n    forceWaiting?: boolean;\n    render: (entity: Entity) => React.ReactElement;\n  }) => {\n    const { entityStore } = useStores();\n\n    useEffect(() => {\n      entityStore.serializeFetchById(entityId);\n    }, [entityStore, entityId]);\n\n    const entity = entityStore.get(entityId);\n\n    if (entity === undefined) {\n      if (forceWaiting) {\n        return <LoadingPage />;\n      }\n\n      return <span>{entityId}</span>;\n    }\n\n    if (entity === null) {\n      return (\n        <Result\n          status=\"404\"\n          title=\"404\"\n          subTitle={`Entity ${entityId} does not exist`}\n        />\n      );\n    }\n\n    return render(entity);\n  }\n);\n","import { ExternalLink } from \"rma-baseapp\";\nimport { Property } from \"../../models\";\nimport { IncompleteProperty, isPropertyComplete } from \"./Entity\";\n\n/**\n * Render property in a single line.\n *\n * @param property the property to render\n * @param noLink whether to render the property as plain text (not clickable to open a page)\n */\nexport const InlinePropertyComponent = ({\n  property,\n  nolink = false,\n  ...restprops\n}: {\n  property: Property | IncompleteProperty;\n  nolink?: boolean;\n} & Omit<\n  React.HTMLProps<HTMLAnchorElement>,\n  \"href\" | \"target\" | \"rel\" | \"property\"\n>) => {\n  if (!isPropertyComplete(property)) {\n    if (property.doesNotExist) {\n      return (\n        <span {...restprops}>\n          <i>Property {property.id} doesn't exist</i>\n        </span>\n      );\n    } else if (nolink) {\n      return <span {...restprops}>({property.id})</span>;\n    } else {\n      // TODO: we need to have a way to handle id & uri properly\n      // create a local page for the property? for entity add uri to part of the entity\n      return (\n        <ExternalLink href={\"\"} openInNewPage={true} {...restprops}>\n          ({property.id})\n        </ExternalLink>\n      );\n    }\n  }\n\n  if (nolink) {\n    return (\n      <span {...restprops}>\n        {property.label} ({property.id})\n      </span>\n    );\n  }\n\n  return (\n    <ExternalLink href={property.uri} openInNewPage={true} {...restprops}>\n      {property.label}\n    </ExternalLink>\n  );\n};\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { EyeOutlined, EyeInvisibleOutlined } from \"@ant-design/icons\";\nimport { Space } from \"antd\";\n\nconst styles = {\n  hide: {\n    display: \"none\",\n  },\n};\nexport const CollapsibleComponent = withStyles(styles)(\n  (\n    props: React.PropsWithChildren<\n      { collapsible: React.ReactNode } & WithStyles<typeof styles>\n    >\n  ) => {\n    const [visible, setVisible] = useState(false);\n    const toggleVisible = () => {\n      setVisible(!visible);\n    };\n    const btn = visible ? (\n      <EyeInvisibleOutlined onClick={toggleVisible} />\n    ) : (\n      <EyeOutlined onClick={toggleVisible} />\n    );\n\n    return (\n      <div>\n        <Space size={4}>\n          {props.children}\n          {btn}\n        </Space>\n        <div className={visible ? \"\" : props.classes.hide}>\n          {props.collapsible}\n        </div>\n      </div>\n    );\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Typography } from \"antd\";\nimport { toJS } from \"mobx\";\nimport { ExternalLink } from \"rma-baseapp\";\nimport { FetchEntityComponent } from \"./FetchEntityComponent\";\nimport { InlineEntityComponent } from \"./InlineEntityComponent\";\nimport { DataValue } from \"../../models/entity\";\nimport { CollapsibleComponent } from \"../element/Collapse\";\n\nconst styles = {};\n\nexport const ValueComponent = withStyles(styles)(\n  ({ value }: { value: DataValue } & WithStyles<typeof styles>) => {\n    if (value.type === \"entityid\") {\n      return (\n        <FetchEntityComponent\n          entityId={value.value}\n          render={(entity) => {\n            return <InlineEntityComponent entity={entity} />;\n          }}\n        />\n      );\n    }\n\n    if (value.type === \"time\") {\n      return (\n        <CollapsibleComponent\n          collapsible={\n            <ul>\n              <li>\n                <b>Timezone:</b> {value.value.timezone}\n              </li>\n              <li>\n                <b>From:</b> {value.value.before} - {value.value.after}\n              </li>\n              <li>\n                <b>Precision:</b> {value.value.precision}\n              </li>\n              <li>\n                <b>Calendar Model:</b>{\" \"}\n                <ExternalLink\n                  href={value.value.calendarmodel}\n                  openInNewPage={true}\n                >\n                  {value.value.calendarmodel}\n                </ExternalLink>\n              </li>\n            </ul>\n          }\n        >\n          {value.value.time}\n        </CollapsibleComponent>\n      );\n    }\n\n    if (value.type === \"quantity\") {\n      return (\n        <CollapsibleComponent\n          collapsible={\n            <ul>\n              <li>\n                <b>Bound:</b> {value.value.lowerBound} -{\" \"}\n                {value.value.upperBound}\n              </li>\n              <li>\n                <b>Unit:</b> {value.value.unit}\n              </li>\n            </ul>\n          }\n        >\n          {value.value.amount}\n        </CollapsibleComponent>\n      );\n    }\n\n    if (value.type === \"monolingualtext\") {\n      return (\n        <span>\n          {value.value.text} <i>@{value.value.language}</i>\n        </span>\n      );\n    }\n\n    if (value.type === \"globecoordinate\") {\n      return (\n        <CollapsibleComponent\n          collapsible={\n            <ul>\n              <li>\n                <b>Precision:</b> {value.value.precision}\n              </li>\n              <li>\n                <b>Globe:</b>{\" \"}\n                <ExternalLink href={value.value.globe} openInNewPage={true}>\n                  {value.value.globe}\n                </ExternalLink>\n              </li>\n            </ul>\n          }\n        >\n          <ExternalLink\n            href={`http://maps.google.com/maps?q=${value.value.latitude},${value.value.longitude}`}\n            openInNewPage={true}\n          >\n            {value.value.latitude} N,{value.value.longitude} W\n          </ExternalLink>\n        </CollapsibleComponent>\n      );\n    }\n\n    // haven't handle these types\n    if (typeof value.value === \"object\") {\n      return <span>{JSON.stringify(value.value)}</span>;\n    }\n\n    return <span>{value.value}</span>;\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Col, Row, Typography } from \"antd\";\nimport { ID2Prop, IncompleteProperty } from \"./Entity\";\nimport { Statement } from \"../../models/entity\";\nimport { InlinePropertyComponent } from \"./InlinePropertyComponent\";\nimport { ValueComponent } from \"./ValueComponent\";\n\nconst styles = {\n  qualifiers: {\n    marginLeft: 24,\n  },\n};\n\nexport const StatementComponent = withStyles(styles)(\n  ({\n    stmt,\n    classes,\n    id2prop,\n    ...restprops\n  }: {\n    id2prop: ID2Prop;\n    stmt: Statement;\n  } & WithStyles<typeof styles> &\n    React.HTMLProps<HTMLDivElement>) => {\n    const qualifiers = [];\n    for (const qid of stmt.qualifiersOrder) {\n      let qval;\n      if (stmt.qualifiers[qid].length === 0) {\n        qval = (\n          <Typography.Text type=\"secondary\" italic={true}>\n            no value\n          </Typography.Text>\n        );\n      } else {\n        qval = stmt.qualifiers[qid].map((value, valueIndex) => {\n          return (\n            <div key={valueIndex}>\n              <ValueComponent value={value} />\n            </div>\n          );\n        });\n      }\n\n      qualifiers.push(\n        <Row gutter={8} key={qid}>\n          <Col span={6}>\n            <InlinePropertyComponent property={id2prop[qid]} />\n          </Col>\n          <Col span={18}>{qval}</Col>\n        </Row>\n      );\n    }\n\n    return (\n      <div {...restprops}>\n        <div>\n          <ValueComponent value={stmt.value} />\n        </div>\n        <div className={classes.qualifiers}>{qualifiers}</div>\n      </div>\n    );\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Col, Divider, Row, Space, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { ID2Prop, IncompleteProperty, useEntityProperties } from \".\";\nimport { Property } from \"../../models\";\nimport { Entity } from \"../../models/entity\";\nimport { InlinePropertyComponent } from \"./InlinePropertyComponent\";\nimport { StatementComponent } from \"./StatementComponent\";\n\nconst styles = {\n  propDivider: {\n    height: 1,\n    border: \"none\",\n    color: \"#ddd\",\n    backgroundColor: \"#ddd\",\n  },\n};\n\nexport const PropertyComponent = withStyles(styles)(\n  observer(\n    ({\n      entity,\n      id2prop,\n      visibleProperties,\n      classes,\n    }: {\n      entity: Entity;\n      id2prop: ID2Prop;\n      visibleProperties?: string[];\n    } & WithStyles<typeof styles>) => {\n      if (visibleProperties === undefined) {\n        visibleProperties = Object.keys(entity.properties);\n      }\n\n      const components = [];\n      for (const pid of visibleProperties) {\n        // we have undefined when entity does not have this property `pid`\n        if (entity.properties[pid] === undefined) continue;\n\n        const stmts = entity.properties[pid];\n        if (components.length > 0) {\n          components.push(\n            <hr key={`divider-${pid}`} className={classes.propDivider} />\n          );\n        }\n        components.push(\n          <Row gutter={8} key={pid}>\n            <Col span={6}>\n              <Typography.Text strong={true}>\n                <InlinePropertyComponent property={id2prop[pid]} />\n              </Typography.Text>\n            </Col>\n            <Col span={18}>\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                {stmts.map((stmt, idx) => {\n                  return (\n                    <StatementComponent\n                      key={idx}\n                      stmt={stmt}\n                      id2prop={id2prop}\n                    />\n                  );\n                })}\n              </Space>\n            </Col>\n          </Row>\n        );\n      }\n\n      return (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }} size={2}>\n          {components}\n        </Space>\n      );\n    }\n  )\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Checkbox, Select } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { forwardRef, useImperativeHandle, useMemo, useState } from \"react\";\nimport { Entity, ID2Prop } from \"./Entity\";\n\nconst styles = {\n  root: {\n    width: 240,\n  },\n};\n\nexport const PropertyFilterComponent = withStyles(styles)(\n  observer(\n    ({\n      entity,\n      id2prop,\n      filteredProps,\n      setFilteredProps,\n      classes,\n    }: {\n      entity: Entity;\n      id2prop: ID2Prop;\n      filteredProps: string[];\n      setFilteredProps: (props: string[]) => void;\n    } & WithStyles<typeof styles>) => {\n      const [enable, setEnable] = useState(true);\n\n      const props = useMemo(() => {\n        return Object.keys(entity.properties).map((pid) => ({\n          label: `${id2prop[pid].label} (${pid})`,\n          value: pid,\n        }));\n      }, [id2prop, entity.id]);\n\n      const onSelect = (value: string) => {\n        setFilteredProps(filteredProps.concat([value]));\n      };\n\n      const onDeselect = (value: string) => {\n        setFilteredProps(filteredProps.filter((pid) => pid !== value));\n      };\n\n      return (\n        <div>\n          <Checkbox onChange={() => setEnable(!enable)} checked={enable}>\n            Enable Filtering\n          </Checkbox>\n          <Select\n            mode=\"multiple\"\n            allowClear={true}\n            options={props}\n            optionFilterProp=\"label\"\n            className={classes.root}\n            value={filteredProps}\n            onSelect={onSelect}\n            onDeselect={onDeselect}\n          />\n        </div>\n      );\n    }\n  )\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Modal, Space, Typography } from \"antd\";\nimport { ExternalLink } from \"rma-baseapp\";\nimport { FetchEntityComponent } from \"./FetchEntityComponent\";\nimport { Entity, useEntityProperties } from \"./Entity\";\nimport { PropertyComponent } from \"./PropertyComponent\";\nimport { PropertyFilterComponent } from \"./PropertyFilterComponent\";\nimport { useState } from \"react\";\nconst styles = {\n  root: {\n    \"& > h2, p, span\": {\n      margin: 0,\n    },\n    minWidth: 360,\n  },\n};\n\nexport const PageEntityComponent = withStyles(styles)(\n  ({ entity }: { entity: Entity } & WithStyles<typeof styles>) => {\n    const id2prop = useEntityProperties(entity);\n    const [filteredProps, setFilteredProps] = useState<string[]>([]);\n\n    return (\n      <div>\n        <Space style={{ float: \"right\" }}>\n          <PropertyFilterComponent\n            entity={entity}\n            id2prop={id2prop}\n            filteredProps={filteredProps}\n            setFilteredProps={setFilteredProps}\n          />\n        </Space>\n        <h2>\n          <ExternalLink href={Entity.id2uri(entity.id)}>\n            {\" \"}\n            {entity.label[\"en\"]}\n          </ExternalLink>\n        </h2>\n        <p>\n          <i>({entity.id})</i>\n        </p>\n        <Typography.Text type=\"secondary\">\n          {entity.aliases[\"en\"].join(\" | \")}\n        </Typography.Text>\n        <p>{entity.description[\"en\"]}</p>\n        <hr />\n        <PropertyComponent\n          entity={entity}\n          id2prop={id2prop}\n          visibleProperties={\n            filteredProps.length > 0 ? filteredProps : undefined\n          }\n        />\n      </div>\n    );\n  }\n);\n\n/** Open a full page of entity as a modal */\nexport function openPageEntityComponent(\n  entity: Entity | string,\n  zIndex?: number\n) {\n  // avoid using instanceof Entity because it's going to be proxy object due to mobx\n  const isEntity = typeof entity !== \"string\";\n  let content;\n  if (isEntity) {\n    content = <PageEntityComponent entity={entity} />;\n  } else {\n    content = (\n      <FetchEntityComponent\n        entityId={entity}\n        render={(entity: Entity) => <PageEntityComponent entity={entity} />}\n      />\n    );\n  }\n\n  Modal.info({\n    icon: null,\n    content,\n    bodyStyle: { margin: -8, marginTop: -16 },\n    okButtonProps: { style: { display: \"none\" } },\n    maskClosable: true,\n    mask: true,\n    zIndex: zIndex,\n    width: \"calc(100% - 128px)\",\n    style: { top: 64 },\n  });\n}\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport UnfoldMoreIcon from \"@mui/icons-material/UnfoldMore\";\nimport { Popover, Typography } from \"antd\";\nimport React from \"react\";\nimport { ExternalLink } from \"rma-baseapp\";\nimport { Entity, useEntityProperties } from \"./Entity\";\nimport { openPageEntityComponent } from \"./PageEntityComponent\";\nimport { PropertyComponent } from \"./PropertyComponent\";\n\nconst styles = {\n  root: {\n    \"& > h2, p, span\": {\n      margin: 0,\n    },\n    minWidth: 600,\n  },\n};\n\n/**\n * Showing entity in popover mode.\n *\n * To control which one to show first, set the zIndex property of the popover.\n */\nexport const PopoverEntityComponent = withStyles(styles)(\n  ({\n    entity,\n    children,\n    classes,\n    zIndex,\n    ...restprops\n  }: {\n    entity: Entity;\n    zIndex?: number;\n  } & React.HTMLProps<HTMLDivElement> &\n    WithStyles<typeof styles>) => {\n    // TODO: find a way to remove this hard code\n    const instanceOf = \"P31\";\n    const id2prop = useEntityProperties(entity);\n    const content = (\n      <div {...restprops} className={`${classes.root} ${restprops.className}`}>\n        <h2>\n          <ExternalLink href={Entity.id2uri(entity.id)} openInNewPage={true}>\n            {\" \"}\n            {entity.label[\"en\"]}\n          </ExternalLink>\n          <UnfoldMoreIcon\n            style={{ marginBottom: -2, paddingTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              openPageEntityComponent(\n                entity,\n                zIndex !== undefined ? zIndex + 1 : undefined\n              );\n            }}\n          />\n        </h2>\n        <p>\n          <i>({entity.id})</i>\n        </p>\n        <Typography.Text type=\"secondary\">\n          {entity.aliases[\"en\"].join(\" | \")}\n        </Typography.Text>\n        <p>{entity.description[\"en\"]}</p>\n        <hr />\n        <PropertyComponent\n          id2prop={id2prop}\n          entity={entity}\n          visibleProperties={[instanceOf]}\n        />\n      </div>\n    );\n\n    return (\n      <Popover content={content} zIndex={zIndex}>\n        {children}\n      </Popover>\n    );\n  }\n);\n","export const Number: React.FunctionComponent<\n  {\n    value: number;\n    fractionDigits?: number;\n  } & Omit<React.HTMLProps<HTMLSpanElement>, \"title\">\n> = ({ value, fractionDigits, ...restprops }) => {\n  return (\n    <span title={value.toString()} {...restprops}>\n      {value.toFixed(fractionDigits)}\n    </span>\n  );\n};\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { blue, grey } from \"@ant-design/colors\";\nimport { useState } from \"react\";\n\nconst styles = {\n  checkboxIcon: {\n    padding: 1,\n    border: \"1px solid\",\n    borderRadius: 2,\n  },\n};\n\nexport const CheckboxIcon = withStyles(styles)(\n  ({\n    icon,\n    classes,\n    selected,\n    onChange,\n    colorSelected = blue[5],\n    colorUnselected = grey[5],\n  }: {\n    icon: IconProp;\n    selected?: boolean;\n    onChange?: (selected: boolean) => void;\n    colorSelected?: string;\n    colorUnselected?: string;\n  } & WithStyles<typeof styles>) => {\n    const [stateSelected, setStateSelected] = useState(false);\n    const toggle = () => {\n      if (selected !== undefined && onChange !== undefined) {\n        return onChange(!selected);\n      }\n      setStateSelected(!stateSelected);\n    };\n\n    const correctSelected = selected === undefined ? stateSelected : selected;\n\n    return (\n      <FontAwesomeIcon\n        icon={icon}\n        color={correctSelected ? colorSelected : colorUnselected}\n        className={classes.checkboxIcon}\n        onClick={toggle}\n      />\n    );\n  }\n);\n","import { blue, grey } from \"@ant-design/colors\";\nimport ProTable from \"@ant-design/pro-table\";\nimport { faCheck, faCheckDouble } from \"@fortawesome/free-solid-svg-icons\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Button, Modal, Space, Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { CheckboxIcon, Number } from \"../element\";\nimport {\n  FetchEntityComponent,\n  InlineEntityComponent,\n  PopoverEntityComponent,\n} from \"../entity\";\nimport * as RTable from \"./RelationalTable\";\n\nconst styles = {\n  correctCandidateEntity: {\n    color: blue[5],\n  },\n  candidateEntity: {\n    color: grey[5],\n    \"&:hover\": {\n      color: `${grey[5]} !important`,\n    },\n  },\n  candidateEntitySeeMore: {\n    color: grey[5],\n    cursor: \"pointer\",\n  },\n};\n\nexport const CandidateEntityListComponent = withStyles(styles)(\n  ({\n    record,\n    index,\n    classes,\n    topK = 3,\n  }: {\n    record: RTable.Row;\n    index: number;\n    topK?: number;\n  } & WithStyles<typeof styles>) => {\n    const [showAllCandidateModals, setShowAllCandidateModals] = useState(false);\n\n    const links = record.links[index] || [];\n    const candidateLst = [];\n    if (links.length > 0) {\n      for (let candidateEntity of links[0].candidateEntities.slice(0, topK)) {\n        const className =\n          candidateEntity.entityId === links[0].entityId\n            ? classes.correctCandidateEntity\n            : classes.candidateEntity;\n\n        candidateLst.push(\n          <div key={candidateEntity.entityId}>\n            <Space size={4}>\n              <CheckboxIcon icon={faCheck} />\n              <CheckboxIcon icon={faCheckDouble} />\n              <FetchEntityComponent\n                entityId={candidateEntity.entityId}\n                render={(entity) => (\n                  <PopoverEntityComponent entity={entity}>\n                    <InlineEntityComponent\n                      nolink={true}\n                      entity={entity}\n                      className={className}\n                    />\n                  </PopoverEntityComponent>\n                )}\n              />\n              <span className={className}>\n                (\n                <Number\n                  value={candidateEntity.probability}\n                  fractionDigits={3}\n                />\n                )\n              </span>\n            </Space>\n          </div>\n        );\n      }\n\n      // if there is a correct entity in top K, no need to highlight, otherwise,\n      // add them to the list\n      const idx = links[0].candidateEntities.findIndex(\n        (candidate) => candidate.entityId === links[0].entityId\n      );\n      if (idx !== -1 && idx >= topK) {\n        const candidateEntity = links[0].candidateEntities[idx];\n        candidateLst.push(\n          <div key={candidateEntity.entityId}>\n            <Space size={4}>\n              <CheckboxIcon icon={faCheck} />\n              <CheckboxIcon icon={faCheckDouble} />\n              <FetchEntityComponent\n                entityId={candidateEntity.entityId}\n                render={(entity) => (\n                  <span className={classes.correctCandidateEntity}>\n                    ({idx})&nbsp;\n                    <PopoverEntityComponent entity={entity}>\n                      <InlineEntityComponent nolink={true} entity={entity} />\n                    </PopoverEntityComponent>\n                  </span>\n                )}\n              />\n              <span className={classes.correctCandidateEntity}>\n                (\n                <Number\n                  value={candidateEntity.probability}\n                  fractionDigits={3}\n                />\n                )\n              </span>\n            </Space>\n          </div>\n        );\n      }\n\n      if (links[0].candidateEntities.length > topK) {\n        candidateLst.push(\n          <div key=\"see-more\">\n            <Typography.Text\n              className={classes.candidateEntitySeeMore}\n              onClick={() => setShowAllCandidateModals(!showAllCandidateModals)}\n            >\n              See more\n            </Typography.Text>\n          </div>\n        );\n      }\n    }\n\n    const columns: any = [\n      {\n        dataIndex: \"id\",\n        title: \"Entity\",\n        render: (entityId: string) => {\n          return (\n            <FetchEntityComponent\n              entityId={entityId}\n              render={(entity) => (\n                <PopoverEntityComponent entity={entity}>\n                  <InlineEntityComponent nolink={true} entity={entity} />\n                </PopoverEntityComponent>\n              )}\n            />\n          );\n        },\n      },\n      {\n        dataIndex: \"score\",\n        title: \"Score\",\n        render: (score: number) => {\n          return <Number value={score} fractionDigits={5} />;\n        },\n      },\n      {\n        title: \"action\",\n        render: () => {\n          return (\n            <Space size={4}>\n              <Button>Select</Button>\n            </Space>\n          );\n        },\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        {candidateLst}\n        <Modal\n          title=\"Candidate Entities\"\n          visible={showAllCandidateModals}\n          style={{ top: 20 }}\n          bodyStyle={{ padding: 0 }}\n          width={\"60%\"}\n          onOk={() => setShowAllCandidateModals(false)}\n          onCancel={() => setShowAllCandidateModals(false)}\n        >\n          <ProTable\n            defaultSize=\"small\"\n            bordered={true}\n            search={false}\n            pagination={{\n              pageSize: 20,\n              pageSizeOptions: [\"20\", \"50\", \"100\", \"200\", \"500\", \"1000\"],\n            }}\n            rowKey=\"id\"\n            columns={columns}\n            request={async (params, sort, filter) => {\n              return Promise.resolve({\n                total: links.length > 0 ? links[0].candidateEntities.length : 0,\n                success: true,\n                data:\n                  links.length === 0\n                    ? []\n                    : links[0].candidateEntities\n                        .slice(\n                          (params.current! - 1) * params.pageSize!,\n                          params.current! * params.pageSize!\n                        )\n                        .map((candidateEntity, index) => ({\n                          id: candidateEntity.entityId,\n                          score: candidateEntity.probability,\n                        })),\n              });\n            }}\n          ></ProTable>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n);\n","import * as RTable from \"./RelationalTable\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport {\n  FetchEntityComponent,\n  openPageEntityComponent,\n  PopoverEntityComponent,\n} from \"../entity\";\nimport { grey } from \"@ant-design/colors\";\nimport { CandidateEntityListComponent } from \"./CandidateEntityListComponent\";\nimport { ExternalLink } from \"rma-baseapp\";\n\nconst styles = {\n  link: {\n    textDecoration: \"underline\",\n  },\n  noEntityLink: {\n    color: grey[5],\n  },\n};\n\nexport const CellComponent = withStyles(styles)(\n  ({\n    cell,\n    record,\n    index,\n    classes,\n    topK = 3,\n  }: {\n    cell: string;\n    record: RTable.Row;\n    index: number;\n    topK?: number;\n  } & WithStyles<typeof styles>) => {\n    const links = record.links[index] || [];\n    let components = links.flatMap((link, index) => {\n      let prefix =\n        index === 0\n          ? cell.substring(0, link.start)\n          : cell.substring(links[index - 1].end, link.start);\n      let linksurface = cell.substring(link.start, link.end);\n      let onCtrlClick = undefined;\n      if (link.entityId !== undefined) {\n        onCtrlClick = () => {\n          openPageEntityComponent(link.entityId!);\n        };\n      }\n      const infix = (\n        <ExternalLink\n          key={index}\n          href={link.url}\n          openInNewPage={true}\n          dangerouslySetInnerHTML={{\n            __html: linksurface.trim() === \"\" ? \"&blank;\" : linksurface,\n          }}\n          className={\n            classes.link +\n            (link.entityId === undefined ? \" \" + classes.noEntityLink : \"\")\n          }\n          style={link.entityId === null ? { color: \"#aaa\" } : {}}\n          onCtrlClick={onCtrlClick}\n        />\n      );\n\n      if (link.entityId === undefined) {\n        return [prefix, infix];\n      }\n\n      // reassign to infix somehow killing the application\n      const wrappedInfix = (\n        <FetchEntityComponent\n          key={index}\n          entityId={link.entityId}\n          render={(entity) => (\n            <PopoverEntityComponent entity={entity} zIndex={500}>\n              {infix}\n            </PopoverEntityComponent>\n          )}\n        />\n      );\n\n      return [prefix, wrappedInfix];\n    });\n\n    if (links.length === 0) {\n      components.push(cell);\n    } else {\n      components.push(cell.substring(links[links.length - 1].end));\n    }\n\n    return (\n      <div>\n        {components}\n        <CandidateEntityListComponent\n          record={record}\n          index={index}\n          topK={topK}\n        />\n      </div>\n    );\n  }\n);\n","import ProTable from \"@ant-design/pro-table\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Descriptions } from \"antd\";\nimport React from \"react\";\nimport { ExternalLink } from \"rma-baseapp\";\nimport { FetchEntityComponent, InlineEntityComponent } from \"../entity\";\nimport { CellComponent } from \"./CellComponent\";\nimport * as RTable from \"./RelationalTable\";\nimport { tableStyles } from \"./styles\";\n\nexport const styles = {\n  table: tableStyles,\n};\n\nexport const TableComponent = withStyles(styles)(\n  ({\n    table,\n    query,\n    classes,\n    toolBarRender,\n  }: {\n    table: RTable.Table;\n    query: (limit: number, offset: number) => Promise<RTable.Row[]>;\n    toolBarRender?: false;\n  } & WithStyles<typeof styles>) => {\n    const columns = table.columns.map((col, columnIndex) => ({\n      dataIndex: [\"row\", columnIndex, \"value\"],\n      title: col,\n      render: ((value: string, record: RTable.Row) => {\n        return (\n          <CellComponent cell={value} record={record} index={columnIndex} />\n        );\n      }) as any,\n    }));\n\n    return (\n      <React.Fragment>\n        <ProTable\n          className={classes.table}\n          defaultSize=\"small\"\n          bordered={true}\n          request={async (params, sort, filter) => {\n            let records = await query(\n              params.pageSize!,\n              (params.current! - 1) * params.pageSize!\n            );\n            return {\n              data: records,\n              success: true,\n              total: table.size,\n            };\n          }}\n          search={false}\n          pagination={{\n            pageSize: 5,\n            pageSizeOptions: [\n              \"5\",\n              \"10\",\n              \"20\",\n              \"50\",\n              \"100\",\n              \"200\",\n              \"500\",\n              \"1000\",\n            ],\n          }}\n          headerTitle={\n            table.context.webpage !== undefined ? (\n              <ExternalLink href={table.context.webpage} openInNewPage={true}>\n                {table.name}\n              </ExternalLink>\n            ) : (\n              table.name\n            )\n          }\n          toolBarRender={toolBarRender}\n          rowKey=\"index\"\n          columns={columns}\n        />\n        <TableInformation table={table} />\n      </React.Fragment>\n    );\n  }\n);\n\nexport const TableInformation: React.FunctionComponent<{\n  table: RTable.Table;\n}> = ({ table }) => {\n  const info: [string, React.ReactNode][] = [\n    [\"Description\", table.description],\n  ];\n\n  if (table.context.webpage !== undefined) {\n    info.push([\n      \"From website\",\n      <ExternalLink href={table.context.webpage} openInNewPage={true}>\n        {table.context.title}\n      </ExternalLink>,\n    ]);\n  } else {\n    info.push([\"From website\", \"N/A\"]);\n  }\n  info.push([\n    \"Associated Entity\",\n    table.context.entityId !== undefined ? (\n      <FetchEntityComponent\n        entityId={table.context.entityId}\n        render={(entity) => <InlineEntityComponent entity={entity} />}\n      />\n    ) : (\n      \"N/A\"\n    ),\n  ]);\n\n  let content = (table.context.contentHierarchy || []).map(\n    (hierarchy, index) => {\n      return (\n        <div key={index}>\n          <b>\n            {\"#\".repeat(hierarchy.level)} {hierarchy.heading}\n          </b>\n          <p>{hierarchy.contentBefore}</p>\n          <p>{hierarchy.contentAfter}</p>\n        </div>\n      );\n    }\n  );\n  info.push([\"Content Hierarchy\", content.length > 0 ? content : \"N/A\"]);\n\n  return (\n    <Descriptions title=\"Table Info\" size=\"small\">\n      {info.map(([label, value]) => (\n        <Descriptions.Item key={label} label={label}>\n          {value}\n        </Descriptions.Item>\n      ))}\n    </Descriptions>\n  );\n};\n","/** Table styles applied to all tables */\nexport const tableStyles = {\n  width: \"100%\",\n  \"& div.ant-table-container\": {\n    border: \"1px solid #bbb\",\n    borderRadius: 4,\n    borderLeft: \"1px solid #bbb !important\",\n  },\n  \"& div.ant-card-body\": {\n    paddingLeft: 0,\n    paddingRight: 0,\n  },\n  \"& th\": {\n    fontWeight: 600,\n  },\n  \"& .ant-table-cell\": {\n    verticalAlign: \"top\",\n  },\n};\n","import { WordWrap } from \"./wordwrap\";\nimport G6, {\n  ModelConfig,\n  ShapeStyle,\n  IGroup,\n  IShape,\n  LabelStyle,\n} from \"@antv/g6\";\nimport { ParagraphRenderedUnit } from \"./wordwrap/model\";\n\n/** Draw paragraph */\nexport function drawText(\n  group: IGroup,\n  wordwrap: WordWrap,\n  units: ParagraphRenderedUnit[],\n  {\n    xoffset,\n    yoffset,\n    cfg,\n    stroke,\n  }: {\n    xoffset?: number;\n    yoffset?: number;\n    cfg?: LabelStyle;\n    // whether to draw a small border around the text for better visibility\n    stroke?: { width: number; color: string };\n  }\n): IShape[] {\n  xoffset = xoffset === undefined ? 0 : xoffset;\n  yoffset = yoffset === undefined ? 0 : yoffset;\n\n  if (stroke !== undefined) {\n    units.map(({ text, x, y }) => {\n      group!.addShape(\"text\", {\n        attrs: {\n          text,\n          x: x + xoffset!,\n          y: y + yoffset!,\n          fontFamily: wordwrap.fontFamily,\n          ...cfg,\n          // override the three important styles to draw a border around the text\n          fill: stroke.color,\n          stroke: stroke.color,\n          lineWidth: stroke.width,\n        },\n        name: \"bg-text\",\n        draggable: true,\n      });\n    });\n  }\n\n  return units.map(({ text, x, y }) => {\n    return group!.addShape(\"text\", {\n      attrs: {\n        text,\n        fill: \"black\",\n        x: x + xoffset!,\n        y: y + yoffset!,\n        fontFamily: wordwrap.fontFamily,\n        ...cfg,\n      },\n      name: \"text\",\n      draggable: true,\n    });\n  });\n}\n\n/**\n * Type of each rect node.\n */\nexport interface RectConfig extends ModelConfig {\n  label: string;\n  // width of the rectangle\n  size: number;\n  style: ShapeStyle & {\n    // padding\n    paddingHeight?: number;\n    paddingWidth?: number;\n  };\n  labelCfg?: { style: LabelStyle };\n}\n\nexport function registerRectNode(wordwrap: WordWrap) {\n  const defaultWidth = wordwrap.getApproximateWidth(4);\n  // TODO: fix x and y as well as position of the text\n  const draw = (cfg: RectConfig, group: IGroup): IShape => {\n    const wp = cfg.style.paddingWidth || 0;\n    const hp = cfg.style.paddingHeight || 0;\n    const { units, width, height } = wordwrap.wrapText(\n      cfg.label,\n      cfg.size || defaultWidth,\n      \"center\"\n    );\n\n    // draw shape\n    const shape = group!.addShape(\"rect\", {\n      attrs: {\n        // x,\n        // y,\n        width: width + wp * 2,\n        height: height + hp * 2,\n        ...cfg.style,\n      },\n      name: \"rect\",\n    });\n\n    // draw text\n    drawText(group, wordwrap, units, {\n      xoffset: wp,\n      yoffset: hp,\n      cfg: cfg.labelCfg?.style,\n    });\n    return shape;\n  };\n\n  G6.registerNode(\n    \"rect-wrap\",\n    {\n      draw: (cfg?: ModelConfig, group?: IGroup) => {\n        return draw(cfg! as RectConfig, group!);\n      },\n\n      // call everything state is changed so we can update the shape\n      // currently clear and re-draw it, but we could do better\n      setState(name, value, node) {\n        const cfg = node!._cfg!;\n        const model = cfg.model!;\n        const states = cfg.states!;\n        let styles: any = {};\n        let labelStyles = { ...model.labelCfg?.style };\n\n        for (const [name, prop] of Object.entries(model.style!)) {\n          if (typeof prop === \"object\") {\n            continue;\n          }\n          styles[name] = prop;\n        }\n        for (const state of states) {\n          for (const [name, prop] of Object.entries(\n            cfg.styles![state] as object\n          )) {\n            if (name === \"label\") {\n              Object.assign(labelStyles, prop);\n            } else {\n              styles[name] = prop;\n            }\n          }\n        }\n\n        const group = cfg.group!;\n        group.clear();\n        draw(\n          {\n            label: model.label as string,\n            size: model.size as number,\n            style: styles,\n            labelCfg: { style: labelStyles },\n          },\n          group\n        );\n      },\n    },\n    \"single-node\"\n  );\n\n  return wordwrap;\n}\n","import G6, {\n  IGroup,\n  ILabelConfig,\n  IShape,\n  LabelStyle,\n  ModelConfig,\n  ShapeStyle,\n} from \"@antv/g6\";\nimport { drawText } from \"./RectNode\";\nimport { WordWrap } from \"./wordwrap\";\n\n/**\n * Type of each circle node.\n */\nexport interface CircleConfig {\n  label: string;\n  style: ShapeStyle & {\n    padding?: number;\n    paddingWidth?: number;\n    paddingHeight?: number;\n  };\n  labelCfg?: { offset: number; style: LabelStyle };\n}\n\nexport function registerCircleNode(wordwrap: WordWrap) {\n  const defaultWidth = wordwrap.getApproximateWidth(4);\n\n  const draw = (cfg: CircleConfig, group: IGroup): IShape => {\n    const padding = cfg.style.padding || 8;\n    const labelPosition: string = \"below\";\n    const labelOffset = cfg.labelCfg?.offset || 0;\n\n    if (labelPosition === \"inside\") {\n      // render text inside circle\n      const { units, radius } = wordwrap.wrapTextCircle(cfg.label, 256);\n      const shape = group!.addShape(\"circle\", {\n        attrs: {\n          // x: cfg.x,\n          // y: cfg.y,\n          r: radius + padding,\n          ...cfg.style,\n        },\n        name: \"circle\",\n      });\n      drawText(group, wordwrap, units, {\n        xoffset: 0,\n        yoffset: 0,\n        cfg: cfg.labelCfg?.style,\n      });\n      return shape;\n    }\n\n    // render text below circle\n    const { units, width } = wordwrap.wrapText(\n      cfg.label as string,\n      defaultWidth,\n      \"center\"\n    );\n    const defaultRadius = 10;\n    const shape = group!.addShape(\"circle\", {\n      attrs: {\n        // x: cfg.x,\n        // y: cfg.y,\n        r: defaultRadius,\n        ...cfg.style,\n      },\n      name: \"circle\",\n    });\n\n    drawText(group, wordwrap, units, {\n      xoffset: -width / 2,\n      yoffset: defaultRadius + labelOffset,\n      cfg: cfg?.labelCfg?.style,\n      stroke: { color: \"white\", width: 4 },\n    });\n    return shape;\n  };\n\n  G6.registerNode(\n    \"circle-wrap\",\n    {\n      draw: (cfg?: ModelConfig, group?: IGroup): IShape => {\n        return draw(cfg! as CircleConfig, group!);\n      },\n    },\n    \"single-node\"\n  );\n\n  return wordwrap;\n}\n","import { Paragraph, ParagraphUnit } from \"./model\";\n\nconst cacheFn = <F extends (...args: any) => any>(\n  fn: F,\n  cache: { [key: string]: ReturnType<F> }\n): F => {\n  return ((...args: any) => {\n    const key = args.join(\":\");\n    if (cache[key] === undefined) {\n      cache[key] = fn(...args);\n    }\n    return cache[key];\n  }) as unknown as F;\n};\n\n/**\n * Optimize paragraph to fit lines.\n *\n * Using a score function similar to Knuth-Plass algorithm. Differences:\n * 1. badness of a line is change to <adjustment_ratio>^3, not 100 * <adjustment_ratio>^3 to avoid\n *    making a number too big\n * 2. the ability to brea, super long word (no glue). the <adjustment_ratio> is undefined in Knuth-Plass algorithm, making\n *    badness becomes infinity. Hence, the algorithm avoids breaking it at all cost. We set the glue size to be 0.1 so that\n *    the badness is finite.\n */\nexport class ParagraphOptimizer {\n  protected paragraph: ParagraphUnit[];\n  protected getDesiredLineLength: (i: number) => number;\n  protected cacheLineLengths: { [key: string]: number } = {};\n  protected cacheLineDemerits: { [key: string]: number } = {};\n  protected cacheParagraphDemerits: { [key: string]: number } = {};\n  protected cacheParagraphBreakpoints: {\n    [key: string]: { breakpoints: number[]; demerits: number };\n  } = {};\n\n  constructor(paragraph: Paragraph) {\n    this.paragraph = paragraph.units.map((item) => {\n      item = Object.assign({}, item);\n      item.width = item.width / 16;\n      if (item.type === \"glue\") {\n        item.stretch = item.stretch / 16;\n        item.shrink = item.shrink / 16;\n      }\n      return item;\n    });\n    this.getDesiredLineLength = (i: number) => paragraph.getLineLength(i) / 16;\n  }\n\n  /**\n   * Optimize a paragraph by minimizing a score (demerits) similar to the one defined by Knuth-Plass algorithm\n   *\n   * Example: optimize returns breakpoints [4, 8] meaning it creates 3 lines:\n   * [0, 4], [5, 8], [9, <paragraph.length - 1>]\n   *\n   * @see this.optimizeParagraph for more information\n   */\n  optimize = () => {\n    return this.optimizeParagraph(0, this.paragraph.length - 1, 0);\n  };\n\n  /**\n   * Optimize a (sub) paragraph from [start, end] (inclusive) by minimizing the predefined score\n   *\n   * Example: optimizeParagraph(0, 15, 0) returns breakpoints [4, 8] meaning it creates 3 lines:\n   * [0, 4], [5, 8], [9, 15]\n   *\n   * @param start\n   * @param end (inclusive)\n   * @param nPreviousLines the number of lines of previous paragraphs\n   *\n   * @returns breakpoints & the score (demerits)\n   */\n  optimizeParagraph = cacheFn(\n    (\n      start: number,\n      end: number,\n      nPreviousLines: number\n    ): { breakpoints: number[]; demerits: number } => {\n      const lineAdjustment = this.computeLineAdjustment(\n        start,\n        end,\n        nPreviousLines // base 0\n      );\n      if (lineAdjustment !== undefined && lineAdjustment >= 0) {\n        // this paragraph can fit in a whole line -- no need to break it up\n        return {\n          breakpoints: [],\n          demerits: this.computeLineDemerits(start, end, nPreviousLines),\n        };\n      }\n\n      const optimalSplit = {\n        caret: -1,\n        demerits: Infinity,\n        breakpoints: [] as number[],\n      };\n\n      // work incrementally from right to left -- but only consider breaking points\n      for (let caret = end - 1; caret > start; caret--) {\n        if (this.paragraph[caret].type === \"box\") continue;\n\n        const prevParagraphBreakpoints = this.optimizeParagraph(\n          start,\n          caret,\n          nPreviousLines\n        );\n        const nextParagraphBreakpoints = this.optimizeParagraph(\n          caret + 1,\n          end,\n          nPreviousLines +\n            (prevParagraphBreakpoints.breakpoints.length > 0\n              ? prevParagraphBreakpoints.breakpoints.length + 1\n              : 0)\n        );\n\n        if (\n          prevParagraphBreakpoints.demerits +\n            nextParagraphBreakpoints.demerits <\n          optimalSplit.demerits\n        ) {\n          optimalSplit.caret = caret;\n          optimalSplit.demerits =\n            prevParagraphBreakpoints.demerits +\n            nextParagraphBreakpoints.demerits;\n          optimalSplit.breakpoints =\n            prevParagraphBreakpoints.breakpoints.slice();\n          optimalSplit.breakpoints.push(caret);\n          optimalSplit.breakpoints = optimalSplit.breakpoints.concat(\n            nextParagraphBreakpoints.breakpoints\n          );\n        }\n      }\n\n      return {\n        breakpoints: optimalSplit.breakpoints,\n        demerits: optimalSplit.demerits,\n      };\n    },\n    this.cacheParagraphBreakpoints\n  );\n\n  /**\n   * Compute length of units from [start, end] (inclusive) if rendered in a single line.\n   * We only count items that are box, glue & only the penalty if it's the last item as penalties\n   * won't be rendered in the line.\n   *\n   * @param start\n   * @param end -- inclusive\n   */\n  computeLineLength = cacheFn((start: number, end: number) => {\n    let len = 0;\n    for (let i = start; i < end; i++) {\n      if (this.paragraph[i].type === \"penalty\") continue;\n\n      len += this.paragraph[i].width;\n    }\n\n    // add the width of the last penalty item only if break is forced (break words are added hyphen)\n    if (this.paragraph[end].type === \"penalty\") {\n      // hyphen will have a non zero width\n      len += this.paragraph[end].width;\n    }\n    return len;\n  }, this.cacheLineLengths);\n\n  /**\n   * Compute the elasticity of a line of units from [start, end] (inclusive)\n   * @param start\n   * @param end -- inclusive\n   */\n  computeLineElastic = (start: number, end: number) => {\n    let stretchability = 0;\n    let shrinkability = 0;\n\n    for (let i = start; i <= end; i++) {\n      const item = this.paragraph[i];\n      if (item.type === \"glue\") {\n        stretchability += item.stretch;\n        shrinkability += item.shrink;\n      }\n    }\n\n    return { stretchability, shrinkability };\n  };\n\n  /**\n   * Compute the adjustment ratio of a line\n   *\n   * @param start\n   * @param end\n   * @param lineNumber\n   * @returns\n   */\n  computeLineAdjustment = (start: number, end: number, lineNumber: number) => {\n    const len = this.computeLineLength(start, end);\n    const desiredLength = this.getDesiredLineLength(lineNumber);\n\n    if (len === desiredLength) {\n      return 0;\n    }\n\n    const elastic = this.computeLineElastic(start, end);\n    if (len < desiredLength) {\n      if (elastic.stretchability < 0) {\n        return undefined;\n      }\n      // This is modified from Knuth-Plass algorithm.\n      if (elastic.stretchability === 0) {\n        return (desiredLength - len) / 0.1;\n      }\n      return (desiredLength - len) / elastic.stretchability;\n    }\n    if (elastic.shrinkability <= 0) {\n      return undefined;\n    }\n    return (desiredLength - len) / elastic.shrinkability;\n  };\n\n  computeLineBadness = (start: number, end: number, lineNumber: number) => {\n    const r = this.computeLineAdjustment(start, end, lineNumber);\n    if (r === undefined || r < -1) {\n      return -Infinity;\n    }\n    // original formula: r ** 3 * 100\n    return r ** 3;\n  };\n\n  computeLineDemerits = cacheFn(\n    (start: number, end: number, lineNumber: number) => {\n      const lastLineItem = this.paragraph[end];\n      const linePenalty =\n        lastLineItem.type === \"penalty\" ? lastLineItem.cost : 0;\n      const lineBadness = this.computeLineBadness(start, end, lineNumber);\n      const additionalPenalty = 0;\n\n      if (linePenalty >= 0) {\n        return (1 + lineBadness + linePenalty) ** 2 + additionalPenalty;\n      } else if (linePenalty === -Infinity) {\n        return (1 + lineBadness) ** 2 + additionalPenalty;\n      } else {\n        return (1 + lineBadness) ** 2 - linePenalty ** 2 + additionalPenalty;\n      }\n    },\n    this.cacheLineDemerits\n  );\n\n  computeParagraphDemerits = (\n    start: number,\n    end: number,\n    breakpoints: number[],\n    nPreviousLines: number\n  ) => {\n    let caret = start;\n    let demerits = 0;\n    for (let i = 0; i < breakpoints.length; i++) {\n      demerits += this.computeLineDemerits(\n        caret,\n        breakpoints[i],\n        nPreviousLines + i\n      );\n      caret = breakpoints[i] + 1;\n    }\n    demerits += this.computeLineDemerits(\n      caret,\n      end,\n      nPreviousLines + (breakpoints.length > 0 ? breakpoints.length + 1 : 0)\n    );\n\n    return demerits;\n  };\n}\n","/**\n * An object (eg. a word) to be typeset.\n */\nexport interface Box {\n  type: \"box\";\n\n  text: string;\n\n  /** Amount of space required by this content. Must be >= 0. */\n  width: number;\n}\n\n/**\n * A space between `Box` items with a preferred width and some\n * capacity to stretch or shrink.\n *\n * `Glue` items are also candidates for breakpoints if they immediately follow a\n * `Box`.\n */\nexport interface Glue {\n  type: \"glue\";\n  text: string;\n\n  /**\n   * Preferred width of this space. Must be >= 0.\n   */\n  width: number;\n  /** Maximum amount by which this space can grow. */\n  stretch: number;\n  /** Maximum amount by which this space can shrink. */\n  shrink: number;\n}\n\n/**\n * An explicit candidate position for breaking a line.\n */\nexport interface Penalty {\n  type: \"penalty\";\n  text: string;\n\n  /**\n   * Amount of space required for typeset content to be added (eg. a hyphen) if\n   * a line is broken here. Must be >= 0.\n   */\n  width: number;\n  /**\n   * The undesirability of breaking the line at this point.\n   *\n   * Values <= `MIN_COST` and >= `MAX_COST` mandate or prevent breakpoints\n   * respectively.\n   */\n  cost: number;\n  /**\n   * A hint used to prevent successive lines being broken with hyphens. The\n   * layout algorithm will try to avoid successive lines being broken at flagged\n   * `Penalty` items.\n   */\n  flagged: boolean;\n}\n\nexport type ParagraphUnit = Box | Glue | Penalty;\nexport type ParagraphRenderedUnit = ParagraphUnit & {\n  x: number;\n  y: number;\n  lineNumber: number;\n  renderedWidth: number;\n};\nexport type ParagraphLine = ParagraphUnit[];\n\nexport interface RenderParams {\n  lineHeight: number;\n  cssLineHeight: number;\n  fontSize: number;\n  align: \"center\" | \"left\" | \"justify\" | \"right\";\n  verticalAlign: \"middle\";\n  // shorten the line's length if possible -- this will affect \"justify\" paragraph\n  // for non uniform line length, this does not change the length of line less than the new maximum length\n  // hence may produce ugly result\n  autoLength: boolean;\n}\n\nexport class Paragraph {\n  public readonly spaceWidth: number;\n  public readonly units: ParagraphUnit[];\n  public readonly lineLengths: number | number[];\n  public readonly getLineLength: (i: number) => number;\n\n  constructor(units: ParagraphUnit[], lineLengths: number | number[]) {\n    this.units = units;\n    this.lineLengths = lineLengths;\n\n    if (Array.isArray(lineLengths)) {\n      this.getLineLength = (i: number) =>\n        i < lineLengths.length\n          ? lineLengths[i]\n          : lineLengths[lineLengths.length - 1];\n    } else {\n      this.getLineLength = (i: number) => lineLengths;\n    }\n\n    this.spaceWidth = 0;\n    for (const unit of units) {\n      if (unit.type === \"glue\") {\n        this.spaceWidth = unit.width;\n        break;\n      }\n    }\n  }\n\n  /**\n   * A convenience function that generates a set of input items for `breakLines`\n   * from a string.\n   *\n   * @param text - Text to process\n   * @param measureFn - Callback that calculates the width of a given string\n   * @param hyphenateFn - Callback that calculates legal hyphenation points in\n   *                      words and returns an array of pieces that can be joined\n   *                      with hyphens.\n   */\n  static getUnitsFromText(\n    text: string,\n    measureFn: (word: string) => number,\n    hyphenateFn?: (word: string) => string[],\n    separable?: string[],\n    penaltyCost: number = 1000\n  ): ParagraphUnit[] {\n    const units: ParagraphUnit[] = [];\n    // MODIFY: modify here to split the word further to create possible break points of really long equation/json string\n    let chunks = text.split(/(\\s+)/).filter((w) => w.length > 0);\n    if (separable !== undefined && separable.length > 0) {\n      const re = new RegExp(`.*?[${separable.join(\"\")}]|.+`, \"g\");\n      chunks = chunks.flatMap((w) => w.match(re)!);\n    }\n\n    // Here we assume that every space has the same default size. Callers who want\n    // more flexibility can use the lower-level functions.\n    const spaceWidth = measureFn(\" \");\n    const hyphenWidth = measureFn(\"-\");\n    const isSpace = (word: string) => /\\s/.test(word.charAt(0));\n\n    // MODIFY: from Knuth-Place paper (space 1/3em, stretch 1/6em, shrink 1/9em)\n    const stretch = spaceWidth / 2;\n    const shrink = spaceWidth / 3;\n\n    chunks.forEach((w) => {\n      if (isSpace(w)) {\n        const g: Glue = {\n          type: \"glue\",\n          width: spaceWidth,\n          shrink,\n          stretch,\n          text: w,\n        };\n        units.push(g);\n        return;\n      }\n\n      // MODIFY: for words that are splitted in the middle by :,\" etc as above\n      if (units.length > 0 && units[units.length - 1].type === \"box\") {\n        units.push({\n          type: \"penalty\",\n          width: 0,\n          cost: 1,\n          flagged: false,\n          text: \"\",\n        });\n      }\n\n      if (hyphenateFn) {\n        const chunks = hyphenateFn(w);\n        chunks.forEach((c, i) => {\n          const b: Box = { type: \"box\", width: measureFn(c), text: c };\n          units.push(b);\n          if (i < chunks.length - 1) {\n            const hyphen: Penalty = {\n              type: \"penalty\",\n              text: \"-\",\n              width: hyphenWidth,\n              cost: penaltyCost,\n              flagged: true,\n            };\n            units.push(hyphen);\n          }\n        });\n      } else {\n        const b: Box = { type: \"box\", width: measureFn(w), text: w };\n        units.push(b);\n      }\n    });\n    // Add \"finishing glue\" to space out final line.\n    units.push({\n      type: \"glue\",\n      width: 0,\n      stretch: 10000,\n      shrink: 0,\n      text: \"\",\n    });\n\n    return units;\n  }\n\n  /**\n   * Group units of the paragraph by lines:\n   * - Penalties in the middle of a line are ignored\n   * - Glue at the end is ignored\n   * - Consecutive boxes are merged.\n   */\n  groupByLine = (breaklines: number[]): ParagraphLine[] => {\n    const lines = [];\n    let start = 0;\n\n    breaklines = breaklines.slice();\n    breaklines.push(this.units.length - 1);\n\n    for (const end of breaklines) {\n      const units = this.units.slice(start, end);\n      const line = [];\n\n      // adjust glues of the line\n      for (const unit of units) {\n        if (unit.type === \"penalty\") {\n          continue;\n        }\n\n        if (\n          unit.type === \"box\" &&\n          line.length > 0 &&\n          line[line.length - 1].type === \"box\"\n        ) {\n          // merge consecutive boxes together\n          line[line.length - 1].text += unit.text;\n          line[line.length - 1].width += unit.width;\n          continue;\n        }\n        // make a shallow copy so that we don't modify the original unit\n        line.push(Object.assign({}, unit));\n      }\n\n      if (\n        this.units[end].type === \"penalty\" &&\n        this.units[end].text.length > 0\n      ) {\n        line.push(this.units[end]);\n      }\n\n      start = end + 1;\n      lines.push(line);\n    }\n\n    return lines;\n  };\n\n  /** Compute layout of the paragraph */\n  layout = (\n    lines: ParagraphLine[],\n    {\n      lineHeight,\n      cssLineHeight,\n      fontSize,\n      align,\n      verticalAlign,\n      autoLength,\n    }: RenderParams\n  ): { units: ParagraphRenderedUnit[]; lineLengths: number[] } => {\n    const renderingUnits = [];\n    const lineLengths = lines.map((line) =>\n      line.reduce((a, x) => a + x.width, 0)\n    );\n    const desiredLens = lines.map((line, i) => this.getLineLength(i));\n\n    if (autoLength) {\n      const maxLen = Math.max(...lineLengths);\n      for (let i = 0; i < desiredLens.length; i++) {\n        if (desiredLens[i] > maxLen) {\n          desiredLens[i] = maxLen;\n        }\n      }\n    }\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n\n      // find the glue width, we won't adjust the glue width if the line is shorter than desired and not justify\n      const len = lineLengths[i];\n      const desiredLen = desiredLens[i];\n      const nGlues = line.filter((x) => x.type === \"glue\").length;\n      const glueWidth =\n        len < desiredLen && align !== \"justify\"\n          ? this.spaceWidth\n          : Math.abs(desiredLen - len) / nGlues + this.spaceWidth;\n\n      // verticalAlign === \"middle\"\n      const y = (i + 1) * lineHeight - (fontSize * (cssLineHeight - 1)) / 2;\n      let x = 0;\n\n      if (align === \"center\") {\n        x += (desiredLen - len) / 2;\n      } else if (align === \"right\") {\n        x += desiredLen - len;\n      }\n\n      if (glueWidth === this.spaceWidth) {\n        const renderingUnit = Object.assign(\n          {\n            x,\n            y,\n            renderedWidth: len,\n            lineNumber: i,\n          },\n          line[0]\n        );\n        renderingUnit.text = line.map((x) => x.text).join(\"\");\n        renderingUnits.push(renderingUnit);\n      } else {\n        for (const unit of line) {\n          const renderedWidth = unit.type === \"glue\" ? glueWidth : unit.width;\n          const renderedUnit = Object.assign(\n            {\n              x,\n              y,\n              renderedWidth,\n              lineNumber: i,\n            },\n            unit\n          );\n\n          x += renderedWidth;\n          renderingUnits.push(renderedUnit);\n        }\n      }\n    }\n\n    return { units: renderingUnits, lineLengths };\n  };\n}\n","import enUsPatterns from \"hyphenation.en-us\";\nimport Hypher from \"hypher\";\nimport { ParagraphOptimizer } from \"./optimizer\";\nimport { Paragraph, ParagraphRenderedUnit } from \"./model\";\n\nexport type ElementFontConfig = {\n  font?: string;\n  fontSize: number;\n  fontFamily: string;\n};\n\nexport class WordWrap {\n  protected measureCtx: CanvasRenderingContext2D;\n  protected circleLayout: CircleLayout;\n  protected hypher: Hypher;\n\n  public readonly font: string;\n  public readonly fontFamily: string;\n  public readonly fontSize: number;\n  public readonly cssLineHeight: number = 1.428;\n  // lineHeight in pixel (different from cssLineHeight property)\n  public readonly lineHeight: number;\n  public readonly spaceWidth: number;\n  public readonly separable: string[] = [\n    \"{\",\n    \"}\",\n    \":\",\n    \",\",\n    \"'\",\n    '\"',\n    \".\",\n    \"/\",\n  ];\n\n  constructor(\n    fontCfg: ElementFontConfig,\n    layoutCfg?: { lineHeight?: number; separable?: string[] }\n  ) {\n    const canvas = document.createElement(\"canvas\");\n    this.measureCtx = canvas.getContext(\"2d\")!;\n    this.spaceWidth = this.measureText(\" \");\n\n    this.font = fontCfg.font || `${fontCfg.fontSize}px ${fontCfg.fontFamily}`;\n    this.fontFamily = fontCfg.fontFamily;\n    this.fontSize = fontCfg.fontSize;\n    this.measureCtx.font = this.font;\n\n    this.hypher = new Hypher(enUsPatterns);\n\n    if (layoutCfg !== undefined) {\n      if (layoutCfg.lineHeight !== undefined) {\n        this.cssLineHeight = layoutCfg.lineHeight;\n      }\n      if (layoutCfg.separable !== undefined) {\n        this.separable = layoutCfg.separable;\n      }\n    }\n\n    this.lineHeight = this.fontSize * this.cssLineHeight;\n    this.circleLayout = new CircleLayout(this);\n  }\n\n  /** Generate a plan to render text. Note that font size is automatically figured out from the given container */\n  wrapText = (\n    text: string,\n    desiredLineLengths: number | number[],\n    align: \"justify\" | \"left\" | \"center\" | \"right\" = \"justify\"\n  ): {\n    units: ParagraphRenderedUnit[];\n    width: number;\n    height: number;\n  } => {\n    const paragraph = new Paragraph(\n      Paragraph.getUnitsFromText(\n        text,\n        this.measureText,\n        this.hyphenate,\n        this.separable\n      ),\n      desiredLineLengths\n    );\n    // TODO: uncomment to debug\n    // console.log(\n    //   text,\n    //   desiredLineLengths,\n    //   JSON.stringify(\n    //     Object.fromEntries(paragraph.units.map((u) => [u.text, u.width]))\n    //   )\n    // );\n    const breakpoints = new ParagraphOptimizer(paragraph).optimize()\n      .breakpoints;\n    const { units, lineLengths } = paragraph.layout(\n      paragraph.groupByLine(breakpoints),\n      {\n        align,\n        cssLineHeight: this.cssLineHeight,\n        fontSize: this.fontSize,\n        lineHeight: this.lineHeight,\n        verticalAlign: \"middle\",\n        autoLength: true,\n      }\n    );\n\n    const width = Math.max(...lineLengths);\n    const height = (breakpoints.length + 1) * this.lineHeight;\n\n    return { units: units, width, height };\n  };\n\n  /** Wrap text in a circle */\n  wrapTextCircle = (\n    text: string,\n    maxRadius: number = 1024,\n    acceptableError: number = 10\n  ): {\n    units: ParagraphRenderedUnit[];\n    radius: number;\n  } => {\n    let radius =\n      this.circleLayout.findRadius(\n        this.measureText(text),\n        maxRadius,\n        acceptableError\n      ) + 12;\n    const circleLayout = this.circleLayout.getLayout(radius);\n    const {\n      lines: lineLengths,\n      // centralLine,\n      // linesY,\n    } = circleLayout;\n    const { units, width } = this.wrapText(\n      text,\n      lineLengths.slice(0, 3),\n      \"center\"\n    );\n    const nLines = Math.max(...units.map((item) => item.lineNumber)) + 1;\n\n    // shift the location to the center of the circle\n    radius = width / 2;\n    const deltaX = -radius;\n    const deltaY =\n      -(nLines % 2 === 1 ? (nLines - 1) / 2 : nLines / 2) * this.lineHeight -\n      this.lineHeight / 2;\n\n    for (let itemLayout of units) {\n      itemLayout.x += deltaX;\n      itemLayout.y += deltaY;\n    }\n\n    return {\n      units: units,\n      radius,\n    };\n  };\n\n  /** Hyphenate a long word (at least 4 characters) */\n  hyphenate = (word: string) => {\n    return word.length > 4 ? this.hypher.hyphenate(word) : [word];\n  };\n\n  /** Get approximate width of a sentence of n words */\n  getApproximateWidth = (nWords: number) => {\n    return nWords * this.measureText(\"abcij \");\n  };\n\n  /**\n   * Return the computed CSS `font` property value for an element.\n   */\n  static getCssFont = (container: Element) => {\n    const style = getComputedStyle(container);\n    const { fontStyle, fontVariant, fontWeight, fontSize, fontFamily } = style;\n    return {\n      font: `${fontStyle!} ${fontVariant!} ${fontWeight!} ${fontSize!} ${fontFamily}`,\n      fontSize: parseFloat(fontSize),\n      fontFamily,\n    };\n  };\n\n  /**\n   * Measure the width of `text` as it would appear if rendered with a given computed `font` style.\n   */\n  measureText = (text: string) => {\n    return this.measureCtx.measureText(text).width;\n  };\n}\n\nexport class CircleLayout {\n  protected lineBreak: WordWrap;\n  protected lineHeight: number;\n  protected radius2layout: {\n    [k: number]: {\n      lines: number[];\n      linesY: number[];\n      totalLength: number;\n      centralLine: number;\n    };\n  };\n\n  constructor(lineBreak: WordWrap) {\n    this.lineBreak = lineBreak;\n    this.lineHeight = lineBreak.lineHeight;\n    this.radius2layout = {};\n  }\n\n  findRadius = (\n    textLength: number,\n    maxRadius: number = 1024,\n    acceptableError: number = 10\n  ): number => {\n    // first step is to find the lower bound using binary search\n    let [start, end] = [0, maxRadius];\n    let lowerbound = undefined;\n    for (let i = 0; i < maxRadius; i++) {\n      if (end - start === 1) {\n        lowerbound = end;\n        break;\n      }\n\n      const radius = Math.ceil((start + end) / 2);\n      const l = this.getLayout(radius).totalLength;\n\n      if (l < textLength) {\n        start = radius;\n        continue;\n      }\n\n      if (l - textLength > acceptableError) {\n        end = radius;\n        continue;\n      }\n      lowerbound = radius;\n      break;\n    }\n\n    if (lowerbound === undefined) {\n      throw new Error(\n        `The text of ${textLength} is too long to render in a circle that has the maximum radius: ${maxRadius} - ${\n          this.getLayout(maxRadius).totalLength\n        }`\n      );\n    }\n\n    // next step is to find the upper bound assuming that the longest word\n    // is going to be breaked at every line (textLength + longestWord * nLines)\n    return lowerbound;\n  };\n\n  /** Get layout (line lengths) of a given radius */\n  getLayout = (radius: number) => {\n    if (this.radius2layout[radius] === undefined) {\n      const n = this.computeHalfNumberOfLines(radius);\n      // small to large to small\n      const lines = [];\n      const linesY = [];\n      for (let i = n; i > 0; i--) {\n        lines.push(this.computeLineLength(i, radius));\n        linesY.push(radius - this.lineHeight * (i + 1 / 2));\n      }\n      lines.push(this.computeCentralLineLength(radius));\n      linesY.push(radius - this.lineHeight / 2);\n      for (let i = n - 1; i >= 0; i--) {\n        lines.push(lines[i]);\n        linesY.push(radius + this.lineHeight * (i - 1 / 2));\n      }\n\n      this.radius2layout[radius] = {\n        lines,\n        linesY,\n        centralLine: lines[n],\n        totalLength: lines.reduce((a, b) => a + b),\n      };\n    }\n\n    return this.radius2layout[radius];\n  };\n\n  /** Number of lines can fit in a half of circle without central line */\n  computeHalfNumberOfLines = (radius: number) => {\n    return Math.floor((radius - this.lineHeight / 2) / this.lineHeight);\n  };\n\n  /** Compute line height of non-central lines */\n  computeLineLength = (index: number, radius: number) => {\n    return Math.sqrt(radius ** 2 - (this.lineHeight * index) ** 2) * 2;\n  };\n\n  computeCentralLineLength = (radius: number) => {\n    return Math.sqrt(radius ** 2 - (this.lineHeight / 2) ** 2) * 2;\n  };\n}\n","import G6, { Graph, GraphData, NodeConfig, LayoutConfig } from \"@antv/g6\";\nimport { registerRectNode } from \"./RectNode\";\nimport { registerCircleNode } from \"./CircleNode\";\nimport { WordWrap } from \"./wordwrap\";\nimport { testNodeWrap } from \"./TestNodeWrap\";\nimport _ from \"lodash\";\n\nexport interface GraphEdge {\n  id: string;\n  source: string;\n  target: string;\n  label: string;\n}\n\nexport interface GraphNode {\n  id: string;\n  label: string;\n  style?: object;\n  labelStyle?: object;\n  shape?:\n    | \"rect\"\n    | \"circle\"\n    | \"ellipse\"\n    | \"diamond\"\n    | \"triangle\"\n    | \"star\"\n    | \"image\";\n}\n\nexport interface G6GraphProps {\n  // init height of the canvas\n  initHeight: number;\n  // shift the node in the graph by `leftOffset` units -- default 0\n  leftOffset?: number;\n  // shift the node in the graph by `topOffset` units -- default 0\n  topOffset?: number;\n  /**\n   * Layout of the graph. Default it's force layout with distance 50\n   */\n  layout?: LayoutConfig;\n  onNodeClick?: (nodeId: string) => void;\n  onEdgeClick?: (edge: GraphEdge) => void;\n  // highlight the node and its related nodes and edges when the mouse enter the node;\n  // default is false\n  enableActivateRelations?: boolean;\n}\n\nexport class G6Graph {\n  private version: number;\n  private container: HTMLDivElement;\n  public graph: Graph;\n  private data: GraphData;\n  private props: G6GraphProps;\n  private wordwrap: WordWrap;\n\n  constructor(container: HTMLDivElement, props: G6GraphProps) {\n    this.version = 0;\n    this.props = props;\n    this.container = container;\n    this.data = {\n      nodes: [],\n      edges: [],\n    };\n\n    const cfg = {\n      fontFamily:\n        \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'\",\n      fontSize: 12,\n    };\n    this.wordwrap = new WordWrap(cfg);\n    registerRectNode(this.wordwrap);\n    registerCircleNode(this.wordwrap);\n\n    const modes: any[] = [\"drag-canvas\", \"drag-node\"];\n\n    if (props.enableActivateRelations) {\n      modes.push({\n        type: \"activate-relations\",\n        resetSelected: true,\n      });\n    }\n\n    this.graph = new G6.Graph({\n      container: container,\n      width: container.scrollWidth,\n      height: props.initHeight,\n      layout: props.layout || {\n        type: \"force\",\n        preventOverlap: true,\n        linkDistance: 50,\n        nodeSpacing: 50,\n      },\n      defaultEdge: {\n        type: \"quadratic\",\n        style: {\n          stroke: \"black\",\n          endArrow: {\n            fill: \"black\",\n            path: G6.Arrow.triangle(6, 8),\n          },\n        },\n        labelCfg: {\n          style: {\n            fill: \"black\",\n            background: {\n              fill: \"#ffffff\",\n              stroke: \"#9EC9FF\",\n              padding: [2, 2, 2, 2],\n              radius: 2,\n            },\n          },\n        },\n      },\n      modes: {\n        default: modes,\n        edit: [\"click-select\"],\n      },\n      // these control styles of nodes & edges at different states\n      // currently define active & inactive for the activate-relations mode\n      nodeStateStyles: {\n        active: {\n          opacity: 1,\n          // this is a custom attr for label's style\n          // checkout `setState` method in the custom nodes such as rect-wrap\n          label: {\n            opacity: 1,\n          },\n        },\n        inactive: {\n          opacity: 0.2,\n          // this is a custom attr for label's style\n          // checkout `setState` method in the custom nodes such as rect-wrap\n          label: {\n            opacity: 0.2,\n          },\n        },\n      },\n      edgeStateStyles: {\n        active: {\n          stroke: \"black\",\n          opacity: 1,\n        },\n        inactive: {\n          opacity: 0.2,\n          text: {\n            opacity: 0.2,\n          },\n        },\n      },\n    });\n\n    if (props.onNodeClick !== undefined) {\n      this.graph.on(\"node:click\", (event: any) => {\n        props.onNodeClick!(event.item._cfg.model.id);\n      });\n    }\n\n    if (props.onEdgeClick !== undefined) {\n      this.graph.on(\"edge:click\", (event: any) => {\n        props.onEdgeClick!(event.item._cfg.model);\n      });\n    }\n  }\n\n  /** Transform the data from our format to G6 format */\n  static transformData(nodes: GraphNode[], edges: GraphEdge[]): GraphData {\n    // const { nodes: x, edges: y } = testNodeWrap(\"rect\");\n    // nodes = x;\n    // edges = y;\n\n    // get new nodes\n    let newNodes = nodes.map((u, i) => {\n      let type;\n      if (u.label.trim().length > 0) {\n        if (u.shape === \"rect\" || u.shape === \"circle\") {\n          type = u.shape + \"-wrap\";\n        } else {\n          type = u.shape;\n        }\n      } else {\n        type = u.shape;\n      }\n\n      const node: NodeConfig = {\n        id: u.id,\n        label: u.label,\n        type: type,\n        style: {\n          ...u.style,\n          radius: 4,\n          paddingHeight: 2,\n          paddingWidth: 4,\n        },\n        labelCfg: {\n          style: u.labelStyle,\n        },\n      };\n      if (u.shape === \"rect\") {\n        node.style!.radius = 4;\n      }\n      return node;\n    });\n\n    // get new edges\n    if (_.uniq(edges.map((u) => u.id)).length !== edges.length) {\n      console.error(\n        \"Edges must have unique ids. However, we get:\",\n        edges.map((u) => u.id)\n      );\n    }\n\n    let newEdges = edges.map((e) => ({\n      id: e.id,\n      source: e.source,\n      target: e.target,\n      label: e.label,\n    }));\n\n    // process parallel edges if needed\n    const uv = new Set();\n    let hasParallelEdges = false;\n    for (const edge of edges) {\n      const pair = `${edge.source}-${edge.target}`;\n      if (uv.has(pair)) {\n        hasParallelEdges = true;\n        break;\n      }\n      uv.add(pair);\n    }\n    if (hasParallelEdges) {\n      G6.Util.processParallelEdges(newEdges);\n    }\n\n    return { nodes: newNodes, edges: newEdges };\n  }\n\n  /**\n   * Adjust the viewport to fit the view without zooming,\n   * just align the center of the image bbox to the center of the canvas\n   */\n  fitCenter = () => {\n    this.graph.fitCenter();\n  };\n\n  /** Entry point of graph. Render the graph with given data */\n  setDataAndRender = (data: GraphData, onFinish?: () => void) => {\n    if (this.version > 0) {\n      this.graph.clear();\n    }\n    this.data = data;\n    this.graph.data({ nodes: data.nodes, edges: data.edges });\n    this.graph.render();\n    this.version += 1;\n\n    if (onFinish !== undefined) {\n      onFinish();\n    }\n  };\n\n  /** Update layout of the graph **/\n  updateLayout = (layoutCfg: LayoutConfig) => {\n    this.graph.updateLayout(layoutCfg);\n    this.graph.layout();\n  };\n\n  /**\n   * Adjust the canvas size to fit with the graph\n   *\n   * For fit-graph mode, the extraHeight mode is used to add top & bottom padding so that it's not too close (e.g., 20px)\n   * For fit-remaining-window, the offsetHeight is used to reserved some pixels at the bottom of the window so that it's not overflow (e.g., minus 1px for the border)\n   */\n  updateContainerSize = ({\n    center,\n    height,\n  }: {\n    center: boolean;\n    height:\n      | { type: \"fit-graph\"; extraHeight: number }\n      | { type: \"fit-remaining-window\"; offsetHeight: number };\n  }): DOMRect => {\n    // follow the code in fitView & fitCenter\n    let group = this.graph.get(\"group\");\n    group.resetMatrix();\n    let bbox = group.getCanvasBBox();\n    if (!(bbox.width === 0 || bbox.height === 0)) {\n      // let graphWidth = this.graph.getWidth();\n      let graphWidth = this.container.clientWidth;\n\n      let graphHeight;\n      switch (height.type) {\n        case \"fit-graph\":\n          graphHeight = bbox.height + height.extraHeight;\n          break;\n        case \"fit-remaining-window\":\n          let viewportOffset = this.container.getBoundingClientRect().top;\n          let documentScrollY = window.scrollY;\n          let viewportHeight = document.documentElement.clientHeight;\n          graphHeight =\n            viewportHeight -\n            (viewportOffset + documentScrollY) -\n            height.offsetHeight;\n          break;\n      }\n      this.graph.changeSize(graphWidth, graphHeight);\n      if (center === true) {\n        this.graph.moveTo(\n          graphWidth / 2 - bbox.width / 2,\n          graphHeight / 2 - bbox.height / 2\n        );\n      } else {\n        this.graph.moveTo(\n          this.props.leftOffset || 0,\n          this.props.topOffset || 0\n        );\n      }\n    }\n    return bbox;\n  };\n\n  /**\n   * During rendering, the bounding box of the graph is changing and may\n   * lead to incorrect canvas size. This function will check until the layout\n   * process is finished (the bounding box is not changing a lot) to\n   * call the function.\n   *\n   * If you doesn't provide prevBBox, the function will wait for 3 * delay ms\n   * (first delay to compute bbox, second delay is in the last wait), because of\n   * the last wait, you can set the delay smaller (e.g., 50ms)\n   *\n   * @param maxTries\n   * @param delay milliseconds\n   * @param fn\n   * @param args\n   * @param onFinish\n   * @param significantChange\n   * @param prevBBox\n   */\n  untilLayoutStable = <F extends (...args: any[]) => any>(\n    maxTries: number,\n    delay: number,\n    fn: F,\n    args: Parameters<F>,\n    onFinish?: () => void,\n    significantChange?: number,\n    prevBBox?: DOMRect\n  ) => {\n    if (maxTries <= 0) {\n      // timeout, call the function anyway\n      fn(...args);\n      if (onFinish !== undefined) {\n        onFinish();\n      }\n      return;\n    }\n\n    const group = this.graph.get(\"group\");\n    const bbox = group.getCanvasBBox();\n\n    significantChange = significantChange || 10;\n\n    if (prevBBox !== undefined) {\n      if (\n        Math.abs(prevBBox.width - bbox.width) < significantChange &&\n        Math.abs(prevBBox.height - bbox.height) < significantChange\n      ) {\n        // seem like no significant change we may call the function now\n        // but what if the layout is running quite slow and we call too fast?\n        // wait for sometime and check again to make sure it's really stable\n        setTimeout(() => {\n          const group = this.graph.get(\"group\");\n          const nextBBox = group.getCanvasBBox();\n\n          if (\n            Math.abs(bbox.width - nextBBox.width) >= significantChange! ||\n            Math.abs(bbox.height - nextBBox.height) >= significantChange!\n          ) {\n            // the layout is still changing, keep on waiting\n            this.untilLayoutStable(\n              maxTries - 1,\n              delay,\n              fn,\n              args,\n              onFinish,\n              significantChange,\n              nextBBox\n            );\n          } else {\n            fn(...args);\n            if (onFinish !== undefined) {\n              onFinish();\n            }\n          }\n        }, delay);\n        return;\n      } else {\n        setTimeout(() => {\n          this.untilLayoutStable(\n            maxTries - 1,\n            delay,\n            fn,\n            args,\n            onFinish,\n            significantChange,\n            bbox\n          );\n        }, delay);\n      }\n    } else {\n      setTimeout(() => {\n        this.untilLayoutStable(\n          maxTries,\n          delay,\n          fn,\n          args,\n          onFinish,\n          significantChange,\n          bbox\n        );\n      }, delay);\n    }\n  };\n}\n","import {\n  DownOutlined,\n  FullscreenOutlined,\n  LayoutOutlined,\n} from \"@ant-design/icons\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport MyLocationIcon from \"@mui/icons-material/MyLocation\";\nimport { Button, Dropdown, Menu, Space, Tooltip } from \"antd\";\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { G6Graph, G6GraphProps, GraphEdge, GraphNode } from \"./G6Graph\";\n\nconst styles = {\n  hide: {\n    display: \"none\",\n  },\n  graph: {\n    position: \"relative\",\n    width: \"100%\",\n    // marginLeft: -36,\n    // marginRight: -36,\n  },\n  toolbar: {\n    position: \"absolute\",\n    top: 8,\n    left: 8,\n    \"& button.text\": {\n      borderRadius: 4,\n      paddingLeft: 8,\n      paddingRight: 8,\n    },\n    \"& button.icon\": {\n      borderRadius: 4,\n      padding: 4,\n      \"& svg\": {\n        fontSize: 22,\n      },\n    },\n  },\n  bordered: {\n    border: \"1px solid #bbb\",\n    borderRadius: 4,\n  },\n  container: {\n    // width: \"calc(100% + 72px)\",\n    width: \"100%\",\n    \"& canvas\": {\n      display: \"block\",\n    },\n  },\n} as const;\n\nconst GraphLayout = {\n  Force: {\n    type: \"force\",\n    preventOverlap: true,\n    linkDistance: 50,\n    nodeSpacing: 50,\n  },\n  Dagre: {\n    type: \"dagre\",\n    rankdir: \"TB\",\n    nodesep: 70,\n    ranksep: 30,\n  },\n};\n\nexport interface GraphComponentFunc {\n  graph: () => G6Graph | undefined;\n  recenter: () => boolean;\n}\n\nexport const GraphComponent = withStyles(styles)(\n  forwardRef(\n    (\n      {\n        id,\n        version,\n        nodes,\n        edges,\n        classes,\n        props,\n        className,\n        renderingAdjustedHeight = { type: \"fit-graph\", extraHeight: 8 },\n        toolbar = false,\n        bordered = true,\n        layouts = GraphLayout,\n      }: {\n        nodes: GraphNode[];\n        edges: GraphEdge[];\n        id?: string | number;\n        version?: number;\n        bordered?: boolean;\n        toolbar?: boolean | \"auto-hide\";\n        props?: G6GraphProps;\n        renderingAdjustedHeight?:\n          | { type: \"fit-graph\"; extraHeight: number }\n          | { type: \"fit-remaining-window\"; offsetHeight: number };\n        className?: string;\n        layouts?: typeof GraphLayout;\n      } & WithStyles<typeof styles>,\n      ref\n    ) => {\n      const container = useRef(null);\n      const graph = useRef<G6Graph | undefined>(undefined);\n\n      useImperativeHandle(\n        ref,\n        (): GraphComponentFunc => ({\n          graph: () => graph.current,\n          recenter: () => {\n            if (graph.current === undefined) return false;\n            graph.current.updateContainerSize({\n              center: true,\n              height: renderingAdjustedHeight,\n            });\n            return true;\n          },\n        })\n      );\n\n      useEffect(() => {\n        if (container.current === null) return;\n        if (graph.current === undefined) {\n          graph.current = new G6Graph(\n            container.current,\n            props || {\n              initHeight: 500,\n            }\n          );\n        }\n\n        const g = graph.current;\n        g.setDataAndRender(G6Graph.transformData(nodes, edges), () => {\n          (window as any).g = g;\n          // maximum wait is 1 second\n          g.untilLayoutStable(\n            20,\n            50,\n            g.updateContainerSize,\n            [{ center: true, height: renderingAdjustedHeight }],\n            () => {}\n          );\n        });\n      }, [id, version, nodes, edges, props, renderingAdjustedHeight]);\n\n      const toolbarElement =\n        toolbar === false ? null : (\n          <GraphToolbar\n            autoHide={toolbar === \"auto-hide\"}\n            graph={graph}\n            layouts={layouts}\n          />\n        );\n\n      return (\n        <div className={className}>\n          <div className={classes.hide}>{version}</div>\n          <div className={classes.graph}>\n            {toolbarElement}\n            <div\n              ref={container}\n              className={\n                classes.container + (bordered ? \" \" + classes.bordered : \"\")\n              }\n            ></div>\n          </div>\n        </div>\n      );\n    }\n  )\n);\n\nexport const GraphToolbar = withStyles(styles)(\n  ({\n    autoHide = false,\n    graph,\n    classes,\n    layouts,\n  }: {\n    autoHide?: boolean;\n    graph: React.MutableRefObject<G6Graph | undefined>;\n    layouts: typeof GraphLayout;\n  } & WithStyles<typeof styles>) => {\n    const [isHover, setIsHover] = useState(false);\n    const [layout, setLayout] = useState(\"Force\" as keyof typeof GraphLayout);\n\n    const onMouseEnter = () => {\n      if (autoHide) setIsHover(true);\n    };\n    const onMouseLeave = () => {\n      if (autoHide) setIsHover(false);\n    };\n\n    if (autoHide && !isHover) {\n      return (\n        <div\n          className={classes.toolbar}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          <Button className=\"icon\">\n            <MoreHorizIcon />\n          </Button>\n        </div>\n      );\n    }\n\n    const centerGraph = () => {\n      graph.current?.graph.fitCenter();\n    };\n\n    const changeLayout = (name: keyof typeof GraphLayout) => {\n      setLayout(name);\n      graph.current?.updateLayout(layouts[name]);\n    };\n\n    const cycleLayout = () => {\n      if (layout === \"Force\") changeLayout(\"Dagre\");\n      if (layout === \"Dagre\") changeLayout(\"Force\");\n    };\n\n    const onMenuSelectLayout = (e: any) => {\n      changeLayout(e.key);\n    };\n\n    return (\n      <div\n        className={classes.toolbar}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <Space size={4}>\n          <Tooltip title=\"Center the graph\">\n            <Button className=\"icon\" onClick={centerGraph}>\n              <MyLocationIcon />\n            </Button>\n          </Tooltip>\n          <Tooltip title=\"Make the graph full screen\">\n            <Button className=\"icon\">\n              <FullscreenOutlined />\n            </Button>\n          </Tooltip>\n          <Tooltip title=\"Change graph layout\">\n            <Dropdown\n              overlay={\n                <Menu onClick={onMenuSelectLayout}>\n                  {Object.keys(GraphLayout).map((layout) => (\n                    <Menu.Item key={layout}>{layout}</Menu.Item>\n                  ))}\n                </Menu>\n              }\n            >\n              <Button\n                className=\"text\"\n                icon={<LayoutOutlined />}\n                onClick={cycleLayout}\n              >\n                {layout} <DownOutlined />\n              </Button>\n            </Dropdown>\n          </Tooltip>\n        </Space>\n      </div>\n    );\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Button, Space } from \"antd\";\nimport { useMemo, useRef, useState } from \"react\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport {\n  SemanticModel,\n  Table,\n  DraftSemanticModel,\n  SMGraph,\n  useStores,\n} from \"../../models\";\nimport {\n  GraphComponent,\n  GraphComponentFunc,\n  GraphEdge,\n  GraphNode,\n} from \"../../components/graph\";\nimport { gold, green, orange, purple, yellow } from \"@ant-design/colors\";\nimport { observer } from \"mobx-react\";\n\nconst styles = {\n  hide: {\n    display: \"none\",\n  },\n  graphContainer: {\n    marginTop: 8,\n  },\n};\n\nexport const SemanticGraphComponent = withStyles(styles)(\n  observer(\n    ({\n      sms,\n      classes,\n      table,\n    }: { sms: SemanticModel[]; table: Table } & WithStyles<typeof styles>) => {\n      const graphRef = useRef<GraphComponentFunc | undefined>(undefined);\n      const [currentIndex, setCurrentIndex] = useState(0);\n      const { semanticModelStore } = useStores();\n      let sm = sms[currentIndex];\n      let isSmDraft = false; // use flag instead of instanceof to avoid wrapped object by mobx\n\n      if (currentIndex >= sms.length) {\n        // sm is undefined, we need to create a draft semantic model\n        // currently only support one draft\n        const id = `${table.id}:draft`;\n        let draftModel = semanticModelStore.getCreateDraft(id);\n        if (draftModel === undefined) {\n          draftModel = new DraftSemanticModel(\n            id,\n            `sm-${sms.length}`,\n            \"\",\n            0,\n            new SMGraph(\n              id,\n              table.columns.map((column, index) => ({\n                id: `col-${index}`,\n                label: column,\n                columnIndex: index,\n                nodetype: \"data_node\",\n              })),\n              []\n            ),\n            table.id\n          );\n          semanticModelStore.setCreateDraft(draftModel);\n        }\n        sm = draftModel;\n        isSmDraft = true;\n      }\n\n      const [nodes, edges] = useMemo(() => {\n        const nodes = sm.graph.nodes.map((node) => {\n          let shape: GraphNode[\"shape\"], style;\n          switch (node.nodetype) {\n            case \"class_node\":\n              shape = \"circle\";\n              style = { fill: green[2], stroke: green[8] };\n              break;\n            case \"data_node\":\n              shape = \"rect\";\n              style = { fill: gold[3], stroke: gold[8] };\n              break;\n            case \"literal_node\":\n              if (node.datatype === \"entity-id\") {\n                shape = \"circle\";\n              } else {\n                shape = \"rect\";\n              }\n              if (node.isInContext) {\n                style = { fill: \"#C6E5FF\", stroke: \"#5B8FF9\" };\n              } else {\n                style = { fill: purple[2], stroke: \"#c41d7f\" };\n              }\n              break;\n            default:\n              throw new Error(`Unreachable!`);\n          }\n\n          return {\n            id: node.id,\n            label: node.label,\n            style,\n            shape,\n          };\n        });\n        const edges = sm.graph.edges.map((edge) => {\n          return {\n            id: `${edge.source}-${edge.target}-${edge.uri}`,\n            source: edge.source,\n            target: edge.target,\n            label: edge.label,\n          };\n        });\n\n        return [nodes, edges];\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [sm.id, sm.version]);\n\n      const centering = () => {\n        if (graphRef.current === undefined) {\n          return;\n        }\n        graphRef.current.recenter();\n      };\n      useHotkeys(\"c\", centering, [sm.id, graphRef !== undefined]);\n\n      const smLists = [];\n      for (const [idx, item] of sms.entries()) {\n        smLists.push(\n          <Button\n            size=\"small\"\n            key={item.id}\n            type={item.id === sm.id ? \"primary\" : \"default\"}\n            onClick={() => setCurrentIndex(idx)}\n          >\n            {item.name}\n          </Button>\n        );\n      }\n\n      if (isSmDraft) {\n        smLists.push(\n          <Button\n            size=\"small\"\n            key=\"draft\"\n            type=\"primary\"\n            style={{ backgroundColor: gold[5], borderColor: gold[7] }}\n          >\n            {sm.name}\n          </Button>\n        );\n      }\n\n      // only show the list of semantic models when we have more than one\n      // or nothing and we are in the draft\n      let smListComponent = undefined;\n      if (smLists.length !== 1 || isSmDraft) {\n        smListComponent = (\n          <Space style={{ float: \"right\" }}>\n            <span>Semantic Models:</span>\n            {smLists}\n          </Space>\n        );\n      }\n\n      return (\n        <div>\n          {smListComponent}\n          <Space>\n            <Button size=\"small\" onClick={centering}>\n              Center graph (C)\n            </Button>\n            <Button size=\"small\">Add model</Button>\n            <Button size=\"small\">Add node</Button>\n            <Button size=\"small\">Add edge</Button>\n          </Space>\n          <GraphComponent\n            ref={graphRef}\n            className={classes.graphContainer}\n            id={sm.id}\n            version={sm.version}\n            nodes={nodes}\n            edges={edges}\n            toolbar={false}\n            renderingAdjustedHeight={{ type: \"fit-graph\", extraHeight: 20 }}\n            props={{\n              initHeight: 300,\n              layout: {\n                type: \"dagre\",\n                rankdir: \"TB\",\n                nodesep: 50,\n                ranksep: 15,\n              },\n              onNodeClick: (nodeId: string) => {\n                console.log(\"click node\", nodeId);\n              },\n              onEdgeClick: (edge: GraphEdge) => {\n                console.log(\"click edge\", edge);\n              },\n            }}\n          />\n        </div>\n      );\n    }\n  )\n);\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Button, PageHeader, Space } from \"antd\";\nimport _ from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport { history, LoadingPage, NotFoundPage } from \"rma-baseapp\";\n// import { TableComponent } from \"./TableComponent\";\nimport { TableComponent } from \"../../components/table\";\nimport * as RTable from \"../../components/table/RelationalTable\";\nimport {\n  Project,\n  Table,\n  TableStore as TableStoreType,\n  useStores,\n} from \"../../models\";\nimport { routes } from \"../../routes\";\nimport { SemanticGraphComponent } from \"./SemanticModelComponent\";\n\n// https://cssinjs.org/jss-plugin-nested?v=v10.8.0#use--to-reference-selector-of-the-parent-rule\nconst styles = {\n  table: {\n    marginTop: 8,\n    \"& div.ant-table-container\": {\n      border: \"1px solid #bbb\",\n      borderRadius: 4,\n      borderLeft: \"1px solid #bbb !important\",\n    },\n  },\n  container: {\n    marginLeft: 24,\n    marginRight: 24,\n  },\n};\n\nexport const TablePage = withStyles(styles)(\n  observer(({ classes }: WithStyles<typeof styles>) => {\n    // use stores\n    const { projectStore, tableStore, tableRowStore, semanticModelStore } =\n      useStores();\n    const [fetchedSms, setFetchedSms] = useState(false);\n\n    // parse necessary route parameters\n    const tableId = routes.table.useURLParams()!.tableId;\n    const { navState, toNextTable, toPreviousTable } = useTableNavigation(\n      tableStore,\n      tableId\n    );\n\n    useEffect(() => {\n      // fetch the table\n      tableStore.fetchById(tableId).then((table) => {\n        if (table !== undefined) {\n          projectStore.fetchById(table.project);\n        }\n      });\n\n      // fetch its semantic model\n      if (!semanticModelStore.hasByTable(tableId)) {\n        semanticModelStore.fetch({\n          limit: 1000,\n          offset: 0,\n          conditions: {\n            table: tableId,\n          },\n        });\n        setFetchedSms(true);\n      }\n    }, [tableStore, projectStore, semanticModelStore, tableId]);\n\n    useHotkeys(\"b\", toPreviousTable, [navState.version]);\n    useHotkeys(\"n\", toNextTable, [navState.version]);\n\n    const table = tableStore.get(tableId);\n    const rtable: RTable.Table | undefined = useMemo(() => {\n      const table = tableStore.get(tableId);\n      if (table === undefined || table === null) {\n        return undefined;\n      }\n\n      return {\n        name: table.name,\n        description: table.description,\n        columns: table.columns,\n        size: table.size,\n        context: {\n          webpage: table.contextPage?.url,\n          title: table.contextPage?.title,\n          entityId: table.contextPage?.entityId,\n          contentHierarchy: table.contextTree,\n        },\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [tableId, table !== undefined]);\n\n    if (table === null) {\n      return <NotFoundPage />;\n    } else if (table === undefined) {\n      return <LoadingPage />;\n    }\n\n    let semComponent = null;\n    if (!semanticModelStore.hasByTable(tableId) && !fetchedSms) {\n      semComponent = <LoadingPage bordered={true} />;\n    } else {\n      const sms = semanticModelStore.findByTable(tableId);\n      semComponent = <SemanticGraphComponent sms={sms} table={table} />;\n    }\n\n    const queryRow = async (limit: number, offset: number) => {\n      let result = await tableRowStore.fetch({\n        limit,\n        offset,\n        conditions: { table: table.id },\n      });\n      return result.records.map((row) => ({\n        index: row.index,\n        row: row.row.map((v) => ({ value: v })),\n        links: row.links,\n      }));\n    };\n\n    return (\n      <React.Fragment>\n        <TableNavBar\n          project={projectStore.get(table.project)}\n          table={table}\n          btns={[\n            <Button\n              key=\"prev\"\n              onClick={toPreviousTable}\n              disabled={!navState.hasPrev}\n            >\n              Previous Table (B)\n            </Button>,\n            <Button\n              key=\"next\"\n              onClick={toNextTable}\n              disabled={!navState.hasNext}\n            >\n              Next Table (N)\n            </Button>,\n          ]}\n          extraSubTitle={\n            <span className=\"ml-2\">\n              Position:{\" \"}\n              <b>\n                {\" \"}\n                {navState.leftOffset + navState.tableIndex + 1}/{navState.total}\n              </b>\n            </span>\n          }\n        />\n        <div className={classes.container}>\n          <Space direction=\"vertical\" size={8}>\n            {semComponent}\n            <TableComponent\n              key={tableId}\n              toolBarRender={false}\n              table={rtable!}\n              query={queryRow}\n            />\n          </Space>\n        </div>\n      </React.Fragment>\n    );\n  })\n);\n\nfunction useTableNavigation(TableStore: TableStoreType, tableId: number) {\n  const PREFETCH_LIMIT = 50;\n  const queryParams = routes.table.useQueryParams();\n  const b64query = queryParams === null ? \"\" : queryParams.query;\n  const tableQueryConditions = useMemo(\n    () => (b64query !== \"\" ? TableStore.decodeWhereQuery(b64query) : {}),\n    [TableStore, b64query]\n  );\n\n  // Note: assume that the list is always sorted by id (which the order which the table)\n  // is inserted into the DB\n  const [state, setState] = useState({\n    tableId: -1,\n    tableIndex: -1,\n    query: \"\",\n    records: [] as number[],\n    leftOffset: 0,\n    total: 0,\n    hasPrev: false,\n    hasNext: false,\n    allLeft: false,\n    allRight: false,\n    version: 0,\n  });\n\n  useEffect(() => {\n    const fn = async () => {\n      // we reinit the state whenever the query change, or table id is moved\n      // too far from the list (e.g., when users modify the URL)\n      const idx = _.sortedIndex(state.records, tableId);\n      const reinit = state.query !== b64query || state.records[idx] !== tableId;\n      let newState: Partial<typeof state>;\n\n      if (reinit) {\n        const [gtr, ltr] = await Promise.all([\n          TableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"gte\", value: tableId },\n            },\n          }),\n          TableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"lt\", value: tableId },\n            },\n          }),\n        ]);\n\n        const records = ltr.records\n          .map((tbl) => tbl.id)\n          .concat(gtr.records.map((tbl) => tbl.id));\n        newState = {\n          tableIndex: ltr.records.length,\n          records,\n          total: ltr.total + gtr.total,\n          leftOffset: ltr.total - ltr.records.length,\n          allLeft: ltr.total <= PREFETCH_LIMIT,\n          allRight: gtr.total <= PREFETCH_LIMIT,\n          hasPrev: ltr.records.length > 0,\n          hasNext: gtr.records.length > 1,\n        };\n      } else {\n        // only table id change, we fetch if it's near the boundary\n        if (idx === 0 && !state.allLeft) {\n          const ltr = await TableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"lt\", value: tableId },\n            },\n          });\n          newState = {\n            tableIndex: ltr.records.length,\n            leftOffset: ltr.total - ltr.records.length,\n            records: ltr.records.map((tbl) => tbl.id).concat(state.records),\n            allLeft: ltr.total <= PREFETCH_LIMIT,\n            hasPrev: ltr.records.length > 0,\n          };\n        } else if (idx === state.records.length - 1 && !state.allRight) {\n          const gtr = await TableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"gt\", value: tableId },\n            },\n          });\n          newState = {\n            tableIndex: idx,\n            records: state.records.concat(gtr.records.map((tbl) => tbl.id)),\n            allRight: gtr.total <= PREFETCH_LIMIT,\n            hasNext: gtr.records.length > 0,\n          };\n        } else {\n          newState = {\n            tableIndex: idx,\n            hasNext: idx < state.records.length - 1,\n            hasPrev: idx > 0,\n          };\n        }\n      }\n      setState({\n        ...state,\n        ...newState,\n        version: state.version + 1,\n        query: b64query,\n        tableId,\n      });\n    };\n    fn();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableId, b64query]);\n\n  // open another table relative to the current table by some offset\n  const move = (offset: number) => {\n    if (tableId !== state.tableId) {\n      // they call the function too fast before the state is updated\n      return;\n    }\n\n    const nextTableId = state.records[state.tableIndex + offset];\n    if (nextTableId !== undefined) {\n      routes.table.path({ tableId: nextTableId }, { query: b64query }).open();\n    }\n  };\n\n  return {\n    // get id of the table relative to the current table by some offset\n    toPreviousTable: () => {\n      move(-1);\n    },\n    toNextTable: () => {\n      move(1);\n    },\n    navState: state,\n  };\n}\n\nconst TableNavBar = (props: {\n  project: Project | null | undefined;\n  table: Table;\n  btns?: React.ReactNode[];\n  extraSubTitle?: React.ReactNode;\n}) => {\n  let project = props.project || new Project(0, \"\", \"\");\n  return (\n    <PageHeader\n      onBack={() =>\n        history.push(\n          routes.project.getURL({\n            projectId: props.table.project,\n          })\n        )\n      }\n      title={\n        <Space>\n          <span style={{ fontWeight: 500 }}>Table </span>\n          <span style={{ color: \"#237804\", textDecoration: \"underline\" }}>\n            {props.table.name}\n          </span>\n        </Space>\n      }\n      subTitle={\n        <Space>\n          <span>\n            (Project <b>{project.name}</b>)\n          </span>\n          {props.extraSubTitle}\n        </Space>\n      }\n      extra={props.btns}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.e35779db.png\";","import {\n  PathDef,\n  NoArgsPathDef,\n  NoQueryArgsPathDef,\n  applyLayout,\n} from \"rma-baseapp\";\nimport { HomePage, ProjectPage, TablePage, SettingPage } from \"./pages\";\n\nimport React from \"react\";\nimport { LeftNavBar } from \"rma-baseapp\";\nimport { Space } from \"antd\";\nimport logo from \"./logo.png\";\n\nimport {\n  CloudUploadOutlined,\n  ProjectOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\n\n/*************************************************************************************\n * Layouts of the applications\n */\nexport const Layout = (\n  component: React.FunctionComponent<any> | React.ComponentClass<any, any>\n) => {\n  return (props: any) => {\n    const element = React.createElement(component, props);\n    return (\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <LeftNavBar\n          menus={{\n            home: <img src={logo} alt=\"logo\" />,\n            projects: { icon: <ProjectOutlined />, children: \"Projects\" },\n            upload: { icon: <CloudUploadOutlined />, children: \"Upload\" },\n            settings: { icon: <SettingOutlined />, children: \"Settings\" },\n          }}\n          routes={routes}\n          isFirstItemLogo={true}\n        />\n        <div className=\"wide-container\">{element}</div>\n      </Space>\n    );\n  };\n};\n\n/*************************************************************************************\n * Definitions for routes in this application\n */\n// export const RouteURLArgs_project = { projectId: \"number\" };\n// export const RouteURLArgs_table = { tableId: \"number\" };\n// export const RouteQueryArgs_table = { query?: \"string\" };\n\nexport const routes = {\n  project: new NoQueryArgsPathDef({\n    urlSchema: { projectId: \"number\" },\n    component: ProjectPage,\n    pathDef: \"/projects/:projectId\",\n  }),\n  table: new PathDef({\n    urlSchema: { tableId: \"number\" },\n    querySchema: { query: \"string\" },\n    component: TablePage,\n    pathDef: \"/tables/:tableId\",\n  }),\n  settings: new NoArgsPathDef({\n    component: SettingPage,\n    pathDef: \"/settings\",\n    exact: true,\n  }),\n  upload: new NoArgsPathDef({\n    component: HomePage,\n    pathDef: \"/upload\",\n    exact: true,\n  }),\n  projects: new NoArgsPathDef({\n    component: HomePage,\n    pathDef: \"/projects\",\n    exact: true,\n  }),\n  home: new NoArgsPathDef({ component: HomePage, pathDef: \"/\", exact: true }),\n};\n(window as any)._routes = routes;\n\n// apply this layout to all routes except table\napplyLayout(routes, Layout, [\"table\"]);\n","import { Col, Row } from \"antd\";\n\nexport const SettingPage = () => {\n  return (\n    <Row gutter={16}>\n      <Col className=\"gutter-row\" span={24}></Col>\n    </Row>\n  );\n};\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"rma-baseapp\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { stores, StoreContext } from \"./models\";\nimport { routes } from \"./routes\";\n\nReactDOM.render(\n  <StoreContext.Provider value={stores}>\n    <App enUSLocale={true} routes={routes} />\n  </StoreContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}