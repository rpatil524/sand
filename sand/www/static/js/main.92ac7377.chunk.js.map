{"version":3,"sources":["reportWebVitals.ts","env.ts","models/settings/ApplicationConfig.ts","models/settings/EntitySettings.ts","models/settings/TableSettings.ts","models/settings/index.ts","models/sm/SMGraph.ts","models/sm/SemanticModelStore.ts","models/AssistantService.ts","models/entity/EntityStore.ts","models/ontology/ClassStore.ts","models/ontology/PropertyStore.ts","models/project/Project.ts","models/project/ProjectStore.ts","models/project/ProjectUpload.ts","models/table/TableContext.ts","models/table/TableRowStore.ts","models/index.ts","models/table/TableStore.ts","pages/project/forms/NewProjectForm.tsx","pages/home/HomePage.tsx","pages/project/forms/UpdateProjectForm.tsx","pages/project/forms/upload/ParserOptsComponent.tsx","pages/project/forms/upload/RawTableComponent.tsx","pages/project/forms/upload/UploadTableForm.tsx","pages/project/ProjectPage.tsx","misc/SequentialFuncInvoker.ts","pages/table/OntSearchComponent.tsx","pages/table/EntitySettingComponent.tsx","pages/table/NodeSearchComponent.tsx","pages/table/forms/EdgeForm.tsx","pages/table/forms/NodeForm.tsx","pages/table/forms/index.tsx","pages/table/MenuBar.tsx","components/graph/RectNode.ts","components/graph/CircleNode.ts","components/graph/wordwrap/optimizer.ts","components/graph/wordwrap/model.ts","components/graph/wordwrap/wordwrap.ts","components/graph/G6Graph.ts","components/graph/GraphComponent.tsx","pages/table/SemanticModelComponent.tsx","components/entity/InlineEntityComponent.tsx","components/entity/Entity.ts","components/entity/FetchEntityComponent.tsx","components/entity/InlinePropertyComponent.tsx","components/element/Collapse.tsx","components/entity/ValueComponent.tsx","components/entity/StatementComponent.tsx","components/entity/PropertyComponent.tsx","components/entity/PropertyFilterComponent.tsx","components/entity/PageEntityComponent.tsx","components/entity/PopoverEntityComponent.tsx","pages/table/table/filters/TypeTreeFilter.tsx","pages/table/table/filters/PropTreeFilter.tsx","pages/table/TableColumn.tsx","components/element/Number.tsx","components/element/Button.tsx","components/element/AutoHideTooltip.tsx","pages/table/table/CandidateEntityListComponent.tsx","pages/table/table/CellComponent.tsx","pages/table/table/filters/Filter.ts","pages/table/table/TableComponent.tsx","pages/table/table/styles.ts","pages/table/TableNavBar.tsx","pages/table/TablePage.tsx","pages/SettingPage.tsx","components/Navbar.tsx","logo.png","routes.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SERVER","process","REACT_APP_PLATFORM","REACT_APP_API_SERVER","ApplicationConfig","NIL_ENTITY","SEM_MODEL_IDENTS","Set","SEM_MODEL_STATEMENTS","instanceofMapping","instanceofProps","instanceofIndex","StartsWithIndex","instanceof","uri","get","setInstanceOf","Object","values","fromMapping","start","end","index","text","key","substring","item","undefined","internalNode","value","this","mapping","sortedPrefixes","keys","sort","a","b","length","Error","fn","prefixes","shortestPrefix","subindex","slice","entries","node","tmp","prefix","push","subprefixes","EntitySettings","_showedPropsInFullView","_showedPropsInPopoverView","nilEntityId","setNilEntityId","nil","setInstanceOfProps","cfg","setShowedPropsInFullView","props","setShowedPropsInPopoverView","addShowedPropsInFullView","prop","add","addShowedPropsInPopoverView","removeShowedPropsInFullView","delete","removeShowedPropsInPopoverView","getInstanceOfProp","ns","startsWith","makeObservable","observable","action","showedPropsInFullView","computed","showedPropsInPopoverView","Array","from","TableSettings","pageSize","showEntityLinkingEditor","setPageSize","toggleEntityLinkingEditor","enableEntityLinkingEditor","appConfig","UISettings","entity","table","fetchSettings","axios","resp","data","instanceOf","URICount","nodes","counter","id2num","label","id","nextLabel","getNum","nodetype","SMGraph","edges","version","stale","nodeId2Index","column2nodeIndex","uriCount","isEmpty","every","clone","record","toJS","onSave","hasNode","nodesByURI","filter","nodeByColumnIndex","nodeByEntityId","type","edge","source","target","e","hasEdge","incomingEdges","outgoingEdges","nextNodeId","i","nid","findPathMax2hops","sourceId","targetId","matchPaths","outedges","outedge","outedge2","getClassIdOfColumnIndex","columnIndex","inedges","inedge","has","getOutgoingProperties","outprops","coutedge","_removeNode","nodeId","nodeIndex","isInContext","_removeEdge","edgeIndex","sourceDegree","targetDegree","splice","buildIndex","n","addColumnRelationship","upsertColumnType","upsertRelationship","addClassNode","addLiteralNode","removeNode","updateClassNode","updateDataNode","updateLiteralNode","addEdge","removeEdge","updateEdge","sourceColumnIndex","targetColumnIndex","edgeData","sourceIncomingEdges","targetIncomingEdges","realSource","realTarget","approximation","pred1","pred2","edge1","edge2","tempid","assign","size","SemanticModel","name","description","graph","isDraft","sm","draftID","DraftSemanticModel","columns","map","column","SemanticModelStore","SingleKeyIndex","getNewCreateDraftId","getCreateDraft","indices","sms","findByTable","drafts","getCreateDraftsByTable","idx","concat","m","exec","parseInt","Math","max","createDrafts","draft","tableId","tableIndex","records","remove","column_index","is_in_context","toString","serializeUpdateDraft","CRUDStore","AssistantService","tableStore","tableRowStore","smStore","classStore","propStore","entityStore","tables","rows","predict","flow","remoteURL","params","algorithm","rawsm","mtab","rawrows","draftId","deserialize","prevDrafts","deleteCreateDraft","getNewSemanticModelName","setCreateDraft","row","set","f","getColumnTypes","getColumnProperties","getColumnTypesServer","includeCandidateEntities","fetchByTable","entIds","links","link","entityId","candidateEntities","candidate","fetchByIds","ents","classIds","ent","instanceofProp","properties","stmt","classId","classes","additionalURIs","Promise","all","fetchIfMissingByURI","bind","klass","propIds","propId","stmts","qualifiersOrder","qualId","req","post","tree","fromEntries","existingClasses","parents","parent","RStore","EntityStore","readableLabel","readable_label","qualifiers_order","ClassStore","parentsClosure","SingleKeyUniqueIndex","doesNotExistURIs","getClassByURI","uriIndex","fetchOne","conditions","runInAction","PropertyStore","getPropertyByURI","Project","DraftUpdateProject","project","DraftCreateProject","ProjectStore","uploadTable","projectId","file","parserOpt","selectedTables","form","FormData","append","JSON","stringify","headers","table_ids","formats","isLineBreak","nLines","TableRowStore","PairKeysUniqueIndex","updateCellLinks","updateCandidateEntities","url","serializeLink","candidate_entities","state","put","updateColumnLinks","rowId","entity_id","no","hasLocalData","fetch","limit","offset","result","output","canent","probability","forEach","ce","SimpleCRUDStore","findByProject","projectIndex","contextPage","context_page","contextValues","context_values","context_tree","contextTree","contentBefore","content_before","x","n_lines","contentAfter","content_after","semanticModelStore","propertyStore","stores","projectStore","assistantService","uiSettings","registerDefaultAxiosErrorHandler","error","message","window","_stores","StoreContext","createContext","useStores","React","useContext","NewProjectForm","withStyles","observer","Form","useForm","useState","status","nameValidation","setNameValidation","labelCol","span","wrapperCol","onFinish","getFieldValue","create","Modal","destroyAll","catch","Item","rules","required","validateStatus","htmlType","colorWheels","red","volcano","blue","gold","orange","yellow","lime","green","cyan","geekblue","purple","magenta","HomePage","useEffect","Fragment","gutter","className","Title","level","style","float","onClick","zIndex","content","info","title","marginBottom","display","bodyStyle","margin","okButtonProps","maskClosable","mask","width","top","openNewProjectForm","bordered","itemLayout","dataSource","list","renderItem","Meta","avatar","shape","marginTop","backgroundColor","charCodeAt","toUpperCase","path","routes","urlArgs","queryArgs","UpdateProjectForm","fromProject","update","initialValue","danger","home","open","CSVParserForm","opt","onChange","setFieldsValue","delimiter","replace","valuePropName","escapeDelimiter","ParserOptsForm","additionalProps","parserOpts","format","layout","initialValues","Option","RawTableComponent","border","borderRadius","borderLeft","paddingLeft","paddingRight","fontWeight","defaultSize","toolBarRender","search","pagination","pageSizeOptions","rowKey","header","dataIndex","request","current","success","total","styles","upload","padding","carouselDot","opacity","UploadPhase1","setUploadTable","direction","Dragger","multiple","onDrop","dataTransfer","files","tbl","isArray","beforeUpload","InboxOutlined","UploadPhase2","uploadingTable","destroy","onDone","setSelectedTables","Text","checked","lst","parser_opts","flag","UploadTableForm","phase","setPhase","setUploadingTable","ProjectPage","useURLParams","useModal","modal","contextHolder","actionRef","useRef","fetchById","renderText","query","encodeWhereQuery","_","onConfirm","reload","okText","cancelText","upperFirst","fontSize","openUpdateProjectForm","EditOutlined","table2row","options","headerTitle","ref","openUploadTableForm","SequentialFuncInvoker","timer","calledAt","selection","OntPropSearchComponent","useSearchComponent","OntClassSearchComponent","EntitySearchComponent","storeName","store","seqInvoker","refetch","useMemo","iter","r","mode","allowClear","optionFilterProp","showSearch","onSearch","onSelect","onDeselect","EntitySettingComponent","class_node","color","literal_node","data_node","NodeSearchComponent","u","option","textAlign","borderSpacing","verticalAlign","EdgeForm","setSource","setTarget","setURI","setApproximation","dupEdge","labelWrap","copyable","help","val","colon","cls","newEdge","disabled","ClassNodeSubForm","LiteralNodeSubForm","setId","setIsInContext","duplicatedId","DataNodeSubForm","NodeForm","setNodeType","Group","event","buttonStyle","Button","openForm","args","MenuBar","tableRef","graphRef","semanticmodel","menuVisible","setMenuVisible","useHotkeys","recenter","smUniqueIdent","lstSmsKey","join","setIndex","funcs","saveModel","addModel","nSms","getDefaultDraftSemanticModel","deleteModel","exportModel","tableExportModel","attachment","mouseClickNavigationHandler","exportData","tableExportData","openAddNodeForm","openAddEdgeForm","menu","ItemGroup","SubMenu","icon","faFloppyDisk","SaveOutlined","FileAddOutlined","DeleteOutlined","onCancel","ImportOutlined","ExportOutlined","Divider","faRectangleList","faDownload","marginRight","cursor","overlay","onVisibleChange","visible","DownOutlined","drawText","group","wordwrap","units","xoffset","yoffset","stroke","y","addShape","attrs","fontFamily","fill","lineWidth","draggable","registerCircleNode","defaultWidth","getApproximateWidth","G6","registerNode","draw","labelOffset","labelCfg","wrapText","cacheFn","cache","ParagraphOptimizer","paragraph","getDesiredLineLength","cacheLineLengths","cacheLineDemerits","cacheParagraphDemerits","cacheParagraphBreakpoints","optimize","optimizeParagraph","nPreviousLines","lineAdjustment","computeLineAdjustment","breakpoints","demerits","computeLineDemerits","optimalSplit","caret","Infinity","prevParagraphBreakpoints","nextParagraphBreakpoints","computeLineLength","len","computeLineElastic","stretchability","shrinkability","stretch","shrink","lineNumber","desiredLength","elastic","computeLineBadness","lastLineItem","linePenalty","cost","lineBadness","computeParagraphDemerits","getLineLength","Paragraph","lineLengths","spaceWidth","groupByLine","breaklines","lines","line","unit","lineHeight","cssLineHeight","align","autoLength","renderingUnits","reduce","desiredLens","maxLen","desiredLen","nGlues","glueWidth","abs","renderingUnit","renderedWidth","renderedUnit","measureFn","hyphenateFn","separable","penaltyCost","chunks","split","w","re","RegExp","flatMap","match","hyphenWidth","isSpace","word","test","charAt","g","flagged","c","hyphen","WordWrap","fontCfg","layoutCfg","measureCtx","circleLayout","hypher","font","desiredLineLengths","getUnitsFromText","measureText","hyphenate","height","wrapTextCircle","maxRadius","acceptableError","radius","findRadius","getLayout","deltaX","deltaY","nWords","canvas","document","createElement","getContext","Hypher","enUsPatterns","CircleLayout","getCssFont","container","getComputedStyle","fontStyle","fontVariant","parseFloat","lineBreak","radius2layout","textLength","lowerbound","ceil","l","totalLength","computeHalfNumberOfLines","linesY","computeCentralLineLength","centralLine","floor","sqrt","G6Graph","hotswapProps","isEqual","enableActivateRelations","fitCenter","setDataAndRender","clear","render","updateLayout","updateContainerSize","center","resetMatrix","bbox","getCanvasBBox","graphHeight","graphWidth","clientWidth","extraHeight","viewportOffset","getBoundingClientRect","documentScrollY","scrollY","documentElement","clientHeight","offsetHeight","initHeight","changeSize","moveTo","leftOffset","topOffset","untilLayoutStable","maxTries","delay","significantChange","prevBBox","setTimeout","nextBBox","wp","paddingWidth","hp","paddingHeight","setState","_cfg","model","states","labelStyles","registerRectNode","modes","resetSelected","Graph","scrollWidth","preventOverlap","linkDistance","nodeSpacing","defaultEdge","endArrow","Arrow","triangle","background","default","edit","nodeStateStyles","active","inactive","edgeStateStyles","onNodeClick","on","onEdgeClick","newNodes","trim","labelStyle","uniq","console","newEdges","uv","hasParallelEdges","pair","Util","processParallelEdges","hide","position","toolbar","left","GraphLayout","Force","Dagre","rankdir","nodesep","ranksep","GraphComponent","forwardRef","renderingAdjustedHeight","layouts","useImperativeHandle","transformData","toolbarElement","GraphToolbar","autoHide","isHover","setIsHover","setLayout","onMouseEnter","onMouseLeave","centerGraph","changeLayout","FullscreenOutlined","LayoutOutlined","graphContainer","selectedDraft","SemanticModelComponent","getNodeLabel","InlineEntityComponent","nolink","onCtrlClick","restprops","href","openInNewPage","useEntityProperties","ids","pid","qualifiers","qid","batch","doesNotExist","FetchEntityComponent","renderLoading","renderNotFound","forceWaiting","subTitle","InlinePropertyComponent","property","showId","CollapsibleComponent","setVisible","toggleVisible","btn","EyeInvisibleOutlined","EyeOutlined","children","collapsible","ValueComponent","timezone","before","after","precision","calendarmodel","time","lowerBound","upperBound","amount","language","globe","latitude","longitude","StatementComponent","marginLeft","id2prop","qval","italic","valueIndex","PropertyComponent","propDivider","filteredProps","components","strong","PropertyFilterComponent","root","enable","setEnable","addFilteredProp","removeFilteredProp","PageEntityComponent","minWidth","settings","lang2value","lang","aliases","lang2values","openPageEntityComponent","PopoverEntityComponent","paddingTop","treeNode","levelMarker","TypeTreeFilter","types","treeData","setTreeData","p2cs","parentTypeId","rootIds","child","addTypes","visited","treeNodes","rootId","travel2constructTreeNodes","placement","indeterminate","hasAnyOp","hasAllOp","toggleAllType","setSelectNil","selectNil","userSelect","setSelectUnlinked","selectUnlinked","setIncludeCandidateEntities","TreeNode","unknown","depth","comp","indent","dangerouslySetInnerHTML","__html","type2op","setTypeOp","outputs","stack","pop","PropTreeFilter","TableColumnFilter","tab","setTypes","includeNil","includeUnlinked","defaultActiveKey","TabPane","Number","fractionDigits","toFixed","CheckboxIcon","checkboxIcon","selected","colorSelected","colorUnselected","grey","stateSelected","setStateSelected","correctSelected","AutoHideTooltip","ms","trigger","correctCandidateEntity","candidateEntity","candidateEntitySeeMore","CandidateEntityListComponent","topK","showAllCandidateModals","setShowAllCandidateModals","singleUpdate","select","selectMultiple","candidateLst","faCheck","faCheckDouble","findIndex","faPlus","score","onOk","resolve","textDecoration","noEntityLink","CellComponent","cell","linksurface","infix","ColumnFilter","op","hasChange","getFilterExec","entStore","includeTypeIds","excludeTypeIds","hasFilter","canEnt","some","typeId","TableFilter","nColumns","columnFilters","setOnChange","handleChange","filterExecs","results","res","matches","TableComponent","showRowIndex","col","filterDropdown","filterIcon","SearchOutlined","TableInformation","contextHierarchy","hierarchy","heading","repeat","ContentComponent","comps","TableNavBar","PREFETCH_LIMIT","queryParams","useQueryParams","b64query","tableQueryConditions","decodeWhereQuery","hasPrev","hasNext","allLeft","allRight","isMounted","sortedIndex","fields","gtr","ltr","newState","move","nextTableId","toPreviousTable","toNextTable","navState","useTableNavigation","onBack","history","getURL","navigator","clipboard","writeText","extra","TablePage","prevTableId","setPrevTableId","hasFetchSemanticModel","setHasFetchSemanticModel","isUpdatedState","mounted","hasByTable","useSemanticModel","allrows","css","centerNavBar","justifyContent","boxShadow","leftNavBar","borderBottom","transition","LeftNavBar","menus","isFirstItemLogo","location","useLocation","items","routeName","getMenuItem","activeRouteName","getActiveRouteName","selectedKeys","realprops","isValidElement","None","NoQueryArgsPathDef","component","urlSchema","pathDef","PathDef","querySchema","NoArgsPathDef","exact","projects","_routes","applyLayout","element","src","logo","alt","ProjectOutlined","CloudUploadOutlined","SettingOutlined","ReactDOM","Provider","locale","enUSIntl","enUSLocale","getElementById"],"mappings":"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","file":"static/js/main.92ac7377.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const THEME: \"dark\" | \"light\" = \"light\";\n\nexport const PLATFORM: \"native\" | \"web\" =\n  process.env.REACT_APP_PLATFORM === \"native\" ? \"native\" : \"web\";\n\n// url of the API server\nexport const SERVER: string =\n  process.env.REACT_APP_PLATFORM === \"native\"\n    ? (process.env.REACT_APP_API_SERVER as string)\n    : \"\";\n\n// path to the static directory for serving either local or remote css/js/assets\nexport const PUBLIC_URL: string = process.env.PUBLIC_URL;\n","export class ApplicationConfig {\n  // configuration related to entities\n  public NIL_ENTITY: string = \"\";\n\n  // list of properties' uris that when a column is tagged with one of them, the column is an entity column\n  public SEM_MODEL_IDENTS = new Set<string>();\n\n  // list of uri of classes that are used as intermediate nodes to represent n-ary relationships, e.g., wikidata's statement\n  public SEM_MODEL_STATEMENTS = new Set<string>();\n\n  // mapping from entity's namespace into the instanceof property that they use\n  protected instanceofMapping: { [namespace: string]: string } = {};\n  public instanceofProps = new Set<string>(); // list of instanceof props in all namespaces\n  protected instanceofIndex = new StartsWithIndex<string>(0, 0); // index to seacrh for the prop given an uri faster\n\n  /** Get instanceof property of an entity identified by the given URI */\n  public instanceof = (uri: string): string | undefined => {\n    return this.instanceofIndex.get(uri);\n  };\n\n  /** Set instanceof property */\n  public setInstanceOf = (instanceofProps: { [namespace: string]: string }) => {\n    this.instanceofMapping = instanceofProps;\n    this.instanceofProps = new Set(Object.values(instanceofProps));\n    this.instanceofIndex = StartsWithIndex.fromMapping(this.instanceofMapping);\n  };\n}\n\nexport class StartsWithIndex<V> {\n  // capture the longest substring from [start, end) that leads us to target or the sub tree\n  protected index: {\n    [substring: string]:\n      | { value: StartsWithIndex<V>; internalNode: true }\n      | { internalNode: false; value: V };\n  } = {};\n  protected start: number = 0;\n  protected end: number = 0;\n\n  constructor(start: number, end: number) {\n    this.start = start;\n    this.end = end;\n  }\n\n  public static fromMapping<V>(mapping: { [prefix: string]: V }) {\n    // sorted in descending order by their length\n    const sortedPrefixes = Object.keys(mapping).sort(\n      (a, b) => b.length - a.length\n    );\n    if (sortedPrefixes.length === 0) {\n      throw new Error(\"Empty mapping\");\n    }\n\n    const fn = (prefixes: string[], start: number) => {\n      const shortestPrefix = prefixes[prefixes.length - 1];\n      const index = new StartsWithIndex<V>(start, shortestPrefix.length);\n\n      if (index.start === index.end) {\n        // we gonna have an empty key, but we must have more than one prefixes\n        index.index[\"\"] = {\n          internalNode: false,\n          value: mapping[shortestPrefix],\n        };\n        const subindex = fn(prefixes.slice(0, -1), index.end);\n        for (const [key, node] of Object.entries(subindex.index)) {\n          index.index[key] = node;\n        }\n        return index;\n      }\n\n      const tmp: { [key: string]: string[] } = {};\n      for (const prefix of prefixes) {\n        const key = prefix.substring(index.start, shortestPrefix.length);\n        if (tmp[key] === undefined) {\n          tmp[key] = [];\n        }\n        tmp[key].push(prefix);\n      }\n\n      for (const [key, subprefixes] of Object.entries(tmp)) {\n        if (subprefixes.length === 1) {\n          index.index[key] = {\n            internalNode: false,\n            value: mapping[subprefixes[0]],\n          };\n        } else {\n          index.index[key] = {\n            internalNode: true,\n            // prefixes are sorted in descending order and tmp maintains the order\n            value: fn(subprefixes, index.end),\n          };\n        }\n      }\n      return index;\n    };\n\n    return fn(sortedPrefixes, 0);\n  }\n\n  /** Get the target mapping matched with the longest prefix */\n  get = (text: string): V | undefined => {\n    const key = text.substring(this.start, this.end);\n    const item = this.index[key];\n\n    if (item !== undefined) {\n      return item.internalNode ? item.value.get(text) : item.value;\n    }\n\n    // try empty key\n    return this.index[\"\"] !== undefined\n      ? (this.index[\"\"].value as V)\n      : undefined;\n  };\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\n\nexport class EntitySettings {\n  // properties to show in full view\n  public _showedPropsInFullView: Set<string> = new Set();\n\n  // properties to show in popover view\n  public _showedPropsInPopoverView: Set<string> = new Set();\n\n  // properties that are used to express \"instance of\" relationships for each namespace\n  public instanceofProps: { [namespace: string]: string } = {};\n\n  // id of an nil entity\n  public nilEntityId: string = \"\";\n\n  constructor() {\n    makeObservable(this, {\n      _showedPropsInFullView: observable,\n      _showedPropsInPopoverView: observable,\n      instanceofProps: observable,\n      nilEntityId: observable,\n      setNilEntityId: action,\n      setInstanceOfProps: action,\n      showedPropsInFullView: computed,\n      showedPropsInPopoverView: computed,\n      setShowedPropsInFullView: action,\n      setShowedPropsInPopoverView: action,\n      addShowedPropsInFullView: action,\n      addShowedPropsInPopoverView: action,\n      removeShowedPropsInFullView: action,\n      removeShowedPropsInPopoverView: action,\n      getInstanceOfProp: action,\n    });\n  }\n\n  get showedPropsInFullView() {\n    return Array.from(this._showedPropsInFullView);\n  }\n\n  get showedPropsInPopoverView() {\n    return Array.from(this._showedPropsInPopoverView);\n  }\n\n  setNilEntityId = (nil: string) => {\n    this.nilEntityId = nil;\n  };\n\n  setInstanceOfProps = (cfg: { [namespace: string]: string }) => {\n    this.instanceofProps = cfg;\n  };\n\n  setShowedPropsInFullView = (props: Set<string>) => {\n    this._showedPropsInFullView = props;\n  };\n\n  setShowedPropsInPopoverView = (props: Set<string>) => {\n    this._showedPropsInPopoverView = props;\n  };\n\n  addShowedPropsInFullView = (prop: string) => {\n    this._showedPropsInFullView.add(prop);\n  };\n\n  addShowedPropsInPopoverView = (prop: string) => {\n    this._showedPropsInPopoverView.add(prop);\n  };\n\n  removeShowedPropsInFullView = (prop: string) => {\n    this._showedPropsInFullView.delete(prop);\n  };\n\n  removeShowedPropsInPopoverView = (prop: string) => {\n    this._showedPropsInPopoverView.delete(prop);\n  };\n\n  getInstanceOfProp = (uri: string) => {\n    // TODO: optimize me, we can get it down to O(1) with proper indexing\n    for (const ns in this.instanceofProps) {\n      if (uri.startsWith(this.instanceofProps[ns])) {\n        return this.instanceofProps[uri];\n      }\n    }\n  };\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\n\nexport class TableSettings {\n  // page size\n  public pageSize: number = 5;\n  public showEntityLinkingEditor: boolean = false;\n\n  constructor() {\n    makeObservable(this, {\n      pageSize: observable,\n      showEntityLinkingEditor: observable,\n      setPageSize: action,\n      toggleEntityLinkingEditor: action,\n      enableEntityLinkingEditor: action,\n    });\n  }\n\n  setPageSize = (pageSize: number) => {\n    this.pageSize = pageSize;\n  };\n\n  toggleEntityLinkingEditor = () => {\n    this.showEntityLinkingEditor = !this.showEntityLinkingEditor;\n  };\n\n  enableEntityLinkingEditor = () => {\n    this.showEntityLinkingEditor = true;\n  };\n}\n","import axios from \"axios\";\nimport { action, makeObservable, observable } from \"mobx\";\nimport { ApplicationConfig } from \"./ApplicationConfig\";\nimport { EntitySettings } from \"./EntitySettings\";\nimport { TableSettings } from \"./TableSettings\";\n\nexport const appConfig = new ApplicationConfig();\n\nexport class UISettings {\n  public entity: EntitySettings;\n  public table: TableSettings;\n\n  constructor() {\n    this.entity = new EntitySettings();\n    this.table = new TableSettings();\n\n    makeObservable(this, {\n      entity: observable,\n      table: observable,\n      fetchSettings: action,\n    });\n  }\n\n  /** Fetch settings from the server */\n  async fetchSettings() {\n    const resp = await axios.get(\"/api/settings\");\n    appConfig.setInstanceOf(resp.data[\"entity\"][\"instanceof\"]);\n    appConfig.NIL_ENTITY = resp.data[\"entity\"][\"nil\"];\n    appConfig.SEM_MODEL_IDENTS = new Set(\n      resp.data[\"semantic_model\"][\"identifiers\"]\n    );\n    appConfig.SEM_MODEL_STATEMENTS = new Set(\n      resp.data[\"semantic_model\"][\"statements\"]\n    );\n\n    // add a default instanceof property to the popover view\n    const instanceOf: string[] = Object.values(\n      resp.data[\"entity\"][\"instanceof\"]\n    );\n    if (instanceOf.length > 0) {\n      this.entity.addShowedPropsInPopoverView(instanceOf[0]);\n    }\n  }\n}\n\nexport { EntitySettings, TableSettings };\n","import { observable, toJS, action, makeObservable } from \"mobx\";\nimport { Resource } from \"../entity\";\nimport { appConfig } from \"../settings\";\n\nexport interface ClassNode {\n  id: string;\n  uri: string;\n  // for class node only, telling if the class is an approximation\n  approximation: boolean;\n  // readable label in form of `{label} ({qnode id})`; not obtaining from URICount.\n  label: string;\n  readonly nodetype: \"class_node\";\n}\n\nexport interface DataNode {\n  id: string;\n  // column name\n  label: string;\n  columnIndex: number;\n  readonly nodetype: \"data_node\";\n}\n\nexport type LiteralDataType = \"entity-id\" | \"string\";\n\nexport interface LiteralNode {\n  id: string;\n  /**\n   * value of this literal node, depends on the type\n   */\n  value:\n    | {\n        type: \"string\";\n        value: string;\n      }\n    | {\n        type: \"entity-id\";\n        id: string;\n        uri: string;\n      };\n  // readable name for this node\n  label: string;\n  // whether this is a node in the context, apply for literal node only\n  readonly isInContext: boolean;\n  readonly nodetype: \"literal_node\";\n}\n\nexport type SMNode = ClassNode | DataNode | LiteralNode;\nexport type SMNodeType = \"class_node\" | \"data_node\" | \"literal_node\";\n\nexport interface SMEdge {\n  source: string;\n  target: string;\n  uri: string;\n  approximation: boolean;\n  label: string;\n}\n\nexport class URICount {\n  // a map from uri of nodes to the next available number\n  private counter: { [uri: string]: number } = {};\n  private id2num: { [id: string]: number } = {};\n\n  constructor(nodes?: SMNode[]) {\n    for (let node of nodes || []) {\n      if (node.nodetype !== \"class_node\") continue;\n\n      if (this.counter[node.uri] === undefined) {\n        this.counter[node.uri] = 1;\n      }\n      this.id2num[node.id] = this.counter[node.uri];\n      this.counter[node.uri] += 1;\n    }\n  }\n\n  label = (node: SMNode) => {\n    if (this.id2num[node.id] === undefined || this.id2num[node.id] === 1) {\n      return node.label;\n    }\n    return `${node.label} ${this.id2num[node.id]}`;\n  };\n\n  nextLabel = (uri: string, label: string) => {\n    if (this.counter[uri] === undefined) {\n      return label;\n    }\n    return `${label} ${this.counter[uri]}`;\n  };\n\n  add = (node: ClassNode) => {\n    if (this.counter[node.uri] === undefined) {\n      this.counter[node.uri] = 1;\n    }\n    this.id2num[node.id] = this.counter[node.uri];\n    this.counter[node.uri] += 1;\n  };\n\n  getNum = (node: ClassNode) => {\n    return this.id2num[node.id];\n  };\n}\n\nexport class SMGraph {\n  public id: string;\n  public version: number;\n  public nodes: SMNode[];\n  public edges: SMEdge[];\n  public stale: boolean; // if it is stale\n  public nodeId2Index: { [id: string]: number } = {};\n  public column2nodeIndex: { [columnIndex: number]: number } = {};\n  public uriCount: URICount;\n\n  constructor(id: string, nodes: SMNode[], edges: SMEdge[]) {\n    this.id = id;\n    this.version = 0;\n    this.nodes = nodes;\n    this.edges = edges;\n    this.stale = false;\n\n    this.buildIndex();\n    this.uriCount = new URICount(this.nodes);\n\n    makeObservable(this, {\n      version: observable,\n      nodes: observable,\n      edges: observable,\n      stale: observable,\n      nodeId2Index: observable,\n      column2nodeIndex: observable,\n      uriCount: observable,\n      addColumnRelationship: action,\n      upsertColumnType: action,\n      upsertRelationship: action,\n      addClassNode: action,\n      addLiteralNode: action,\n      removeNode: action,\n      updateClassNode: action,\n      updateDataNode: action,\n      updateLiteralNode: action,\n      addEdge: action,\n      removeEdge: action,\n      updateEdge: action,\n    });\n  }\n\n  /** Whether this graph is just containing all data nodes and no edges (it hasn't been modeled) */\n  isEmpty = () => {\n    return (\n      this.edges.length == 0 &&\n      this.nodes.every((node) => node.nodetype === \"data_node\")\n    );\n  };\n\n  clone = () => {\n    const record = this.toJS();\n    return new SMGraph(this.id, record.nodes, record.edges);\n  };\n\n  onSave = () => {\n    this.stale = false;\n  };\n\n  node = (id: string) => this.nodes[this.nodeId2Index[id]];\n  hasNode = (id: string) => this.nodeId2Index[id] !== undefined;\n  nodesByURI = (uri: string) =>\n    this.nodes.filter(\n      (node) => node.nodetype === \"class_node\" && node.uri === uri\n    );\n  nodeByColumnIndex = (id: number) => this.nodes[this.column2nodeIndex[id]];\n  nodeByEntityId = (id: string) =>\n    this.nodes.filter(\n      (node) =>\n        node.nodetype === \"literal_node\" &&\n        node.value.type === \"entity-id\" &&\n        node.value.id === id\n    )[0];\n\n  edge = (source: string, target: string) =>\n    this.edges.filter((e) => e.source === source && e.target === target)[0];\n  hasEdge = (source: string, target: string) =>\n    this.edges.filter((e) => e.source === source && e.target === target)\n      .length > 0;\n  incomingEdges = (target: string) =>\n    this.edges.filter((e) => e.target === target);\n  outgoingEdges = (source: string) =>\n    this.edges.filter((e) => e.source === source);\n\n  nextNodeId = () => {\n    for (let i = 0; i < this.nodes.length * 100; i++) {\n      let nid = `c-${i}`;\n      if (this.nodeId2Index[nid] === undefined) {\n        return nid;\n      }\n    }\n    throw new Error(\"Cannot find new id for a node\");\n  };\n\n  public toJS() {\n    return {\n      nodes: toJS(this.nodes),\n      edges: toJS(this.edges),\n      nodeId2Index: toJS(this.nodeId2Index),\n    };\n  }\n\n  /** Find all paths (max 2 hops) that connect two nodes */\n  findPathMax2hops = (\n    sourceId: string,\n    targetId: string\n  ): [SMEdge, SMEdge?][] => {\n    let matchPaths: [SMEdge, SMEdge?][] = [];\n    let outedges = this.outgoingEdges(sourceId);\n    for (let outedge of outedges) {\n      if (outedge.target === targetId) {\n        matchPaths.push([outedge, undefined]);\n        continue;\n      }\n\n      for (let outedge2 of this.outgoingEdges(outedge.target)) {\n        if (outedge2.target === targetId) {\n          matchPaths.push([outedge, outedge2]);\n        }\n      }\n    }\n\n    return matchPaths;\n  };\n\n  /**\n   * Get the class node of an entity column. Undefined if the column is not an entity node\n   * @param columnIndex\n   * @returns\n   */\n  getClassIdOfColumnIndex = (columnIndex: number): string | undefined => {\n    let inedges = this.incomingEdges(this.nodeByColumnIndex(columnIndex).id);\n    for (let inedge of inedges) {\n      if (appConfig.SEM_MODEL_IDENTS.has(inedge.uri)) {\n        if (inedges.length > 1) {\n          throw new Error(\n            \"Invalid semantic model. An entity column has two incoming edges\"\n          );\n        }\n        return inedge.source;\n      }\n    }\n    return undefined;\n  };\n\n  getOutgoingProperties = (id: string): [SMEdge, SMEdge?][] => {\n    let outprops: [SMEdge, SMEdge?][] = [];\n    for (let outedge of this.outgoingEdges(id)) {\n      let target = this.node(outedge.target);\n      if (\n        target.nodetype === \"class_node\" &&\n        appConfig.SEM_MODEL_STATEMENTS.has(target.uri)\n      ) {\n        for (let coutedge of this.outgoingEdges(outedge.target)) {\n          outprops.push([outedge, coutedge]);\n        }\n      } else {\n        outprops.push([outedge, undefined]);\n      }\n    }\n    return outprops;\n  };\n\n  /******************************************************************\n   * Below is a list of operators that modify the graph. The index is rebuilt/modify\n   * inside @action function\n   ******************************************************************\n   */\n\n  /**\n   * Add a link between two columns\n   *\n   * @deprecated\n   * @param sourceColumnIndex\n   * @param targetColumnIndex\n   * @param edgeData\n   */\n  public addColumnRelationship(\n    sourceColumnIndex: number,\n    targetColumnIndex: number,\n    edgeData: Omit<SMEdge, \"source\" | \"target\">\n  ) {\n    let source = this.nodeByColumnIndex(sourceColumnIndex);\n    let target = this.nodeByColumnIndex(targetColumnIndex);\n\n    let sourceIncomingEdges = this.incomingEdges(source.id);\n    if (sourceIncomingEdges.length === 0) {\n      throw new Error(\"Cannot add link from a data node to another node\");\n    }\n    if (sourceIncomingEdges.length !== 1) {\n      throw new Error(\n        \"The source column connects to multiple class nodes! Don't know the exact class node to choose\"\n      );\n    }\n\n    let targetIncomingEdges = this.incomingEdges(target.id);\n    if (targetIncomingEdges.length > 1) {\n      throw new Error(\n        \"The target column connects to multiple class nodes! Don't know the exact class node to choose\"\n      );\n    }\n\n    let realSource = sourceIncomingEdges[0].source;\n    let realTarget =\n      targetIncomingEdges.length === 0\n        ? target.id\n        : targetIncomingEdges[0].source;\n\n    this.addEdge({\n      ...edgeData,\n      source: realSource,\n      target: realTarget,\n    });\n  }\n\n  /**\n   * Upsert the type of the column: replace the type if exist otherwise, create the type including the\n   * new class node.\n   *\n   * @param columnIndex\n   * @param source\n   */\n  public upsertColumnType(columnIndex: number, source: Omit<ClassNode, \"id\">) {\n    let target = this.nodeByColumnIndex(columnIndex);\n    let targetIncomingEdges = this.incomingEdges(target.id);\n\n    if (targetIncomingEdges.length > 1) {\n      throw new Error(\n        \"The column connects to multiple class nodes! Don't know the exact class node to choose\"\n      );\n    }\n\n    if (targetIncomingEdges.length === 0) {\n      let sourceId = this.nextNodeId();\n      this.addClassNode({\n        ...source,\n        id: sourceId,\n      });\n\n      this.addEdge({\n        source: sourceId,\n        target: target.id,\n        uri: \"http://www.w3.org/2000/01/rdf-schema#label\",\n        label: \"rdfs:label\",\n        approximation: false,\n      });\n    } else {\n      let edge = targetIncomingEdges[0];\n      this.updateClassNode(edge.source, source);\n      if (edge.uri !== \"http://www.w3.org/2000/01/rdf-schema#label\") {\n        // need to update the edge as well\n        this.updateEdge(edge.source, edge.target, {\n          uri: \"http://www.w3.org/2000/01/rdf-schema#label\",\n          label: \"rdfs:label\",\n          approximation: edge.approximation,\n        });\n      }\n    }\n  }\n\n  /**\n   * Upsert the relationship between two nodes: replace the type if exist otherwise create id.\n   *\n   * This is a special function as it tight the system to Wikidata with special node of\n   * wikibase:Statement & property/qualifier. Assuming that the source node and target node\n   * always exist.\n   *\n   * @param sourceId\n   * @param targetId\n   * @param pred1\n   * @param pred2\n   */\n  public upsertRelationship(\n    sourceId: string,\n    targetId: string,\n    pred1: Resource,\n    pred2: Resource\n  ) {\n    // let source = this.node(sourceId);\n    // let target = this.node(targetId);\n\n    let matchPaths = this.findPathMax2hops(sourceId, targetId);\n\n    if (matchPaths.length === 0) {\n      // no new node, so we need to create it\n      if (pred1.uri === pred2.uri) {\n        // we just need to create one link\n        this.addEdge({\n          source: sourceId,\n          target: targetId,\n          uri: pred1.uri,\n          label: pred1.label,\n          approximation: false,\n        });\n      } else {\n        let tempid = this.nextNodeId();\n        this.addClassNode({\n          id: tempid,\n          uri: \"http://wikiba.se/ontology#Statement\",\n          label: \"wikibase:Statement\",\n          approximation: false,\n          nodetype: \"class_node\",\n        });\n        this.addEdge({\n          source: sourceId,\n          target: tempid,\n          uri: pred1.uri,\n          label: pred1.label,\n          approximation: false,\n        });\n        this.addEdge({\n          source: tempid,\n          target: targetId,\n          uri: pred2.uri,\n          label: pred2.label,\n          approximation: false,\n        });\n      }\n      return;\n    }\n\n    if (matchPaths.length > 1) {\n      throw new Error(\n        \"There are more one path between two nodes. Don't know which path to update it\"\n      );\n    }\n\n    let [edge1, edge2] = matchPaths[0];\n    this.updateEdge(edge1.source, edge1.target, {\n      uri: pred1.uri,\n      label: pred1.label,\n      approximation: false,\n    });\n    if (edge2 !== undefined) {\n      // non direct property, we need to update it as well\n      this.updateEdge(edge2.source, edge2.target, {\n        uri: pred2.uri,\n        label: pred2.label,\n        approximation: false,\n      });\n    }\n  }\n\n  /**\n   * Add a class node to the model.\n   */\n  public addClassNode(node: ClassNode) {\n    if (this.nodeId2Index[node.id] !== undefined) {\n      throw new Error(\"Duplicated id\");\n    }\n    this.nodeId2Index[node.id] = this.nodes.length;\n    this.nodes.push(node);\n    this.uriCount.add(node);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  /**\n   * Add a literal node to the model\n   */\n  public addLiteralNode(node: LiteralNode) {\n    if (this.nodeId2Index[node.id] !== undefined) {\n      throw new Error(\"Duplicated id\");\n    }\n    this.nodeId2Index[node.id] = this.nodes.length;\n    this.nodes.push(node);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public removeNode(nodeId: string) {\n    this._removeNode(nodeId);\n    this.nodes = this.nodes.filter((n) => n !== undefined);\n    this.buildIndex();\n    this.version += 1;\n    this.stale = true;\n    this.uriCount = new URICount(this.nodes);\n  }\n\n  public updateClassNode(nodeId: string, props: Partial<ClassNode>) {\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (node.nodetype !== \"class_node\") {\n      throw new Error(\n        `Invalid node type. Expected class node but get ${node.nodetype}`\n      );\n    }\n    Object.assign(node, props);\n    this.version += 1;\n    this.stale = true;\n    if (props.uri !== undefined) {\n      this.uriCount = new URICount(this.nodes);\n    }\n  }\n\n  public updateLiteralNode(nodeId: string, props: Partial<LiteralNode>) {\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (node.nodetype !== \"literal_node\") {\n      throw new Error(\n        `Invalid node type. Expected literal node but get ${node.nodetype}`\n      );\n    }\n    Object.assign(node, props);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public updateDataNode(nodeId: string, props: Partial<DataNode>) {\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (node.nodetype !== \"data_node\") {\n      throw new Error(\n        `Invalid node type. Expected data node but get ${node.nodetype}`\n      );\n    }\n    Object.assign(node, props);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public addEdge(edge: SMEdge) {\n    if (this.hasEdge(edge.source, edge.target)) {\n      throw new Error(\"Cannot have more than one edge between two nodes\");\n    }\n\n    this.edges.push(edge);\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public removeEdge(sourceId: string, targetId: string) {\n    let size = this.nodes.length;\n    this._removeEdge(sourceId, targetId);\n    this.nodes = this.nodes.filter((n) => n !== undefined);\n\n    if (this.nodes.length !== size) {\n      this.buildIndex();\n      this.uriCount = new URICount(this.nodes);\n    }\n    this.version += 1;\n    this.stale = true;\n  }\n\n  public updateEdge(source: string, target: string, props: Partial<SMEdge>) {\n    for (let i = 0; i < this.edges.length; i++) {\n      let edge = this.edges[i];\n      if (edge.source === source && edge.target === target) {\n        this.edges[i] = { ...this.edges[i], ...props };\n      }\n    }\n    this.version = (this.version || 0) + 1;\n    this.stale = true;\n  }\n\n  /**\n   * Cascading remove nodes in the graph. To avoid rebuilding the index\n   * everytime we delete a node, we replace the deleted node by undefined.\n   * A post process step is needed to filter out all undefined items in the list\n   */\n  private _removeNode = (nodeId: string) => {\n    if (\n      this.nodeId2Index[nodeId] === undefined ||\n      this.nodes[this.nodeId2Index[nodeId]] === undefined\n    ) {\n      return;\n    }\n\n    let nodeIndex = this.nodeId2Index[nodeId];\n    let node = this.nodes[nodeIndex];\n\n    if (\n      node.nodetype === \"data_node\" ||\n      (node.nodetype === \"literal_node\" && node.isInContext)\n    ) {\n      // don't remove data nodes && context node;\n      return;\n    }\n\n    // remove node by mark it undefined\n    (this.nodes[nodeIndex] as any) = undefined;\n\n    // we need to remove other edges connected to this node\n    let edges = this.edges.filter(\n      (edge) => edge.source === nodeId || edge.target === nodeId\n    );\n    for (let edge of edges) {\n      this._removeEdge(edge.source, edge.target);\n    }\n  };\n\n  /**\n   * Cascading remove edges in the graph\n   */\n  private _removeEdge = (sourceId: string, targetId: string) => {\n    let edgeIndex = undefined;\n    let sourceDegree = 0;\n    let targetDegree = 0;\n\n    for (let i = 0; i < this.edges.length; i++) {\n      let edge = this.edges[i];\n      if (edge.source === sourceId && edge.target === targetId) {\n        edgeIndex = i;\n      }\n      if (edge.source === sourceId || edge.target === sourceId) {\n        sourceDegree += 1;\n      }\n      if (edge.source === targetId || edge.target === targetId) {\n        targetDegree += 1;\n      }\n    }\n\n    if (edgeIndex === undefined) {\n      return;\n    }\n\n    // remove edge\n    this.edges.splice(edgeIndex, 1);\n\n    // if a node only has one connection, so we delete it because now it is lonely, except if it is\n    // a data node\n    if (sourceDegree === 1) {\n      this._removeNode(sourceId);\n    }\n    if (targetDegree === 1) {\n      this._removeNode(targetId);\n    }\n  };\n\n  private buildIndex = () => {\n    this.nodeId2Index = {};\n    this.column2nodeIndex = {};\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      let n = this.nodes[i];\n      this.nodeId2Index[n.id] = i;\n      if (n.nodetype === \"data_node\" && n.columnIndex !== null) {\n        this.column2nodeIndex[n.columnIndex] = i;\n      }\n    }\n  };\n}\n","import {\n  CRUDStore,\n  DraftCreateRecord,\n  DraftUpdateRecord,\n  Record,\n  SingleKeyIndex,\n} from \"gena-app\";\nimport { SERVER } from \"../../env\";\nimport { Table } from \"../table\";\nimport { SMEdge, SMGraph, SMNode, SMNodeType } from \"./SMGraph\";\n\nexport class SemanticModel\n  implements Record<number>, DraftUpdateRecord<number, SemanticModel>\n{\n  id: number;\n  name: string;\n  description: string;\n  version: number;\n  graph: SMGraph;\n  table: number;\n\n  constructor(\n    id: number,\n    name: string,\n    description: string,\n    version: number,\n    graph: SMGraph,\n    table: number\n  ) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n    this.version = version;\n    this.graph = graph;\n    this.table = table;\n  }\n\n  static isDraft = (\n    sm: SemanticModel | DraftSemanticModel\n  ): sm is DraftSemanticModel => {\n    return (sm as DraftSemanticModel).draftID !== undefined;\n  };\n\n  markSaved(): void {\n    this.graph.onSave();\n  }\n\n  toModel(): SemanticModel | undefined {\n    return this;\n  }\n}\n\nexport class DraftSemanticModel\n  extends SemanticModel\n  implements DraftCreateRecord\n{\n  draftID: string;\n\n  constructor(\n    draftID: string,\n    name: string,\n    description: string,\n    version: number,\n    graph: SMGraph,\n    table: number\n  ) {\n    super(-1, name, description, version, graph, table);\n    this.draftID = draftID;\n  }\n\n  /**\n   * Get a default draft model for a table\n   */\n  static getDefaultDraftSemanticModel(\n    id: string,\n    name: string,\n    table: Table,\n    description = \"\"\n  ): DraftSemanticModel {\n    const graph = new SMGraph(\n      id,\n      table.columns.map((column, index) => ({\n        id: `col-${index}`,\n        label: column,\n        columnIndex: index,\n        nodetype: \"data_node\",\n      })),\n      []\n    );\n    graph.stale = true;\n    return new DraftSemanticModel(id, name, description, 0, graph, table.id);\n  }\n}\n\nexport class SemanticModelStore extends CRUDStore<\n  number,\n  DraftSemanticModel,\n  SemanticModel,\n  SemanticModel\n> {\n  constructor() {\n    super(`${SERVER}/api/semanticmodel`, undefined, false, [\n      new SingleKeyIndex(\"table\"),\n    ]);\n  }\n\n  get tableIndex() {\n    return this.indices[0] as SingleKeyIndex<number, number, SemanticModel>;\n  }\n\n  /** Generate new draft id */\n  getNewCreateDraftId = (table: Table): string => {\n    let i = 0;\n    while (true) {\n      const id = `draft-${i}:${table.id}`;\n      if (this.getCreateDraft(id) === undefined) {\n        return id;\n      }\n      i++;\n    }\n  };\n\n  /** Generate new semantic model name */\n  getNewSemanticModelName(table: Table): string {\n    const sms = this.findByTable(table.id);\n    const drafts = this.getCreateDraftsByTable(table);\n\n    let idx = -1;\n    for (const sm of sms.concat(drafts)) {\n      const m = /sm-(\\d+)/.exec(sm.name);\n      if (m === null) continue;\n      if (parseInt(m[1]) >= idx) {\n        idx = Math.max(idx, parseInt(m[1]));\n      }\n    }\n    return `sm-${idx + 1}`;\n  }\n\n  /** Get all drafts of a table */\n  getCreateDraftsByTable(table: Table): DraftSemanticModel[] {\n    const drafts = [];\n    for (const draft of this.createDrafts.values()) {\n      if (draft.table == table.id) {\n        drafts.push(draft);\n      }\n    }\n    return drafts;\n  }\n\n  /**\n   * Find semantic models of the given table.\n   */\n  public findByTable(tableId: number): SemanticModel[] {\n    return Array.from(this.tableIndex.index.get(tableId) || []).map(\n      (id) => this.records.get(id)!\n    );\n  }\n\n  /**\n   * Remove a record (by id) from your indexes\n   */\n  protected deindex(record: SemanticModel): void {\n    for (const index of this.indices) {\n      index.remove(record);\n    }\n  }\n\n  /** Whether we have local copies of semantic models of a given table */\n  public hasByTable(tableId: number): boolean {\n    return this.tableIndex.index.has(tableId);\n  }\n\n  public deserialize(record: any): SemanticModel {\n    const nodes: SMNode[] = record.data.nodes.map((node: any) => {\n      const type: SMNodeType = node.type;\n      delete node.type;\n      node.nodetype = type;\n      if (type === \"data_node\") {\n        node.columnIndex = node.column_index;\n        delete node.column_index;\n      } else if (type === \"literal_node\") {\n        node.isInContext = node.is_in_context;\n        delete node.is_in_context;\n      }\n      return node;\n    });\n    const edges: SMEdge[] = record.data.edges;\n\n    let graph = new SMGraph(record.id.toString(), nodes, edges);\n    return new SemanticModel(\n      record.id,\n      record.name,\n      record.description,\n      record.version,\n      graph,\n      record.table\n    );\n  }\n\n  public serializeUpdateDraft(record: SemanticModel): object {\n    record.version += 1;\n    return {\n      table: record.table,\n      name: record.name,\n      description: record.description,\n      version: record.version,\n      data: {\n        nodes: record.graph.nodes.map((node) => {\n          switch (node.nodetype) {\n            case \"class_node\":\n              return {\n                id: node.id,\n                uri: node.uri,\n                approximation: node.approximation,\n                label: node.label,\n                type: node.nodetype,\n              };\n            case \"data_node\":\n              return {\n                id: node.id,\n                label: node.label,\n                column_index: node.columnIndex,\n                type: node.nodetype,\n              };\n            case \"literal_node\":\n              return {\n                id: node.id,\n                value: node.value,\n                label: node.label,\n                is_in_context: node.isInContext,\n                type: node.nodetype,\n              };\n          }\n        }),\n        edges: record.graph.edges.map((edge) => {\n          return {\n            source: edge.source,\n            target: edge.target,\n            uri: edge.uri,\n            approximation: edge.approximation,\n            label: edge.label,\n          };\n        }),\n      },\n    };\n  }\n\n  public serializeCreateDraft(record: DraftSemanticModel): object {\n    return this.serializeUpdateDraft(record);\n  }\n}\n","import { SERVER } from \"../env\";\nimport { RStore, Record } from \"gena-app\";\nimport { action, flow, makeObservable, observable } from \"mobx\";\nimport { Table, TableRowStore, TableStore } from \"../models/table\";\nimport { DraftSemanticModel, SemanticModelStore } from \"./sm\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { CancellablePromise } from \"mobx/dist/api/flow\";\nimport { Entity, EntityStore } from \"./entity\";\nimport { Class, ClassStore } from \"./ontology/ClassStore\";\nimport { Property, PropertyStore } from \"./ontology/PropertyStore\";\nimport { appConfig } from \"./settings\";\n\ninterface AssistantRecord extends Record<number> {}\n\ninterface Prediction {\n  [algorithm: string]: {\n    sm: any;\n    rows: any[];\n  };\n}\n\nexport class AssistantService extends RStore<number, AssistantRecord> {\n  protected tables: TableStore;\n  protected rows: TableRowStore;\n  protected smStore: SemanticModelStore;\n  protected entityStore: EntityStore;\n  protected classStore: ClassStore;\n  protected propStore: PropertyStore;\n\n  constructor(\n    tableStore: TableStore,\n    tableRowStore: TableRowStore,\n    smStore: SemanticModelStore,\n    classStore: ClassStore,\n    propStore: PropertyStore,\n    entityStore: EntityStore\n  ) {\n    super(`${SERVER}/api/assistant`, undefined, false, []);\n\n    this.tables = tableStore;\n    this.rows = tableRowStore;\n    this.smStore = smStore;\n    this.classStore = classStore;\n    this.propStore = propStore;\n    this.entityStore = entityStore;\n\n    makeObservable(this, {\n      predict: action,\n      getColumnTypes: action,\n      getColumnProperties: action,\n      getColumnTypesServer: action,\n    });\n  }\n\n  /**\n   * Predict semantic description and entity linking\n   * */\n  predict: (table: Table) => CancellablePromise<void> = flow(function* (\n    this: AssistantService,\n    table: Table\n  ) {\n    // send request to the server to get some suggestions\n    const resp: AxiosResponse<Prediction> = yield axios.get(\n      `${this.remoteURL}/predict/${table.id}`,\n      {\n        params: { algorithm: \"mtab\" },\n      }\n    );\n\n    // deserialzie the results and put it back to the store\n    const rawsm = resp.data.mtab.sm;\n    const rawrows = resp.data.mtab.rows;\n\n    const draftId = this.smStore.getNewCreateDraftId(table);\n    const graph = this.smStore.deserialize({\n      data: rawsm,\n      id: \"\",\n    }).graph;\n\n    // before set a new draft, check if an empty draft is there (as default) and remove it\n    const prevDrafts = this.smStore.getCreateDraftsByTable(table);\n    if (prevDrafts.length === 1 && prevDrafts[0].graph.isEmpty()) {\n      this.smStore.deleteCreateDraft(prevDrafts[0].draftID);\n    }\n\n    const name = this.smStore.getNewSemanticModelName(table);\n    this.smStore.setCreateDraft(\n      new DraftSemanticModel(draftId, name, \"\", 0, graph, table.id)\n    );\n\n    const rows = rawrows.map(this.rows.deserialize);\n    for (const row of rows) {\n      this.rows.set(row);\n    }\n    return;\n  });\n\n  /**\n   * Get column types from entities in the column. This algorithm is implemented in the client side\n   */\n  async getColumnTypes(\n    table: Table,\n    columnIndex: number,\n    includeCandidateEntities: boolean\n  ): Promise<{ [id: string]: Class }> {\n    const rows = await this.rows.fetchByTable(table, 0, table.size);\n\n    // fetch all entities\n    const entIds = new Set<string>();\n    for (const row of rows) {\n      for (const link of row.links[columnIndex] || []) {\n        if (\n          link.entityId !== undefined &&\n          link.entityId !== appConfig.NIL_ENTITY\n        ) {\n          entIds.add(link.entityId);\n        }\n\n        if (includeCandidateEntities) {\n          for (const candidate of link.candidateEntities) {\n            entIds.add(candidate.entityId);\n          }\n        }\n      }\n    }\n\n    const ents = await this.entityStore.fetchByIds(Array.from(entIds));\n\n    // fetch all classes from entities as well as from the semantic models\n    const classIds = new Set<string>();\n    for (const ent of Object.values(ents)) {\n      const instanceofProp = appConfig.instanceof(ent.uri);\n      if (\n        instanceofProp === undefined ||\n        ent.properties[instanceofProp] === undefined\n      ) {\n        continue;\n      }\n\n      for (const stmt of ent.properties[instanceofProp]) {\n        if (stmt.value.type === \"entityid\") {\n          const classId = stmt.value.value;\n          classIds.add(classId);\n        }\n      }\n    }\n\n    const classes = await this.classStore.fetchByIds(Array.from(classIds));\n\n    // add some classes from the semantic models\n    const sms = this.smStore\n      .findByTable(table.id)\n      .concat(this.smStore.getCreateDraftsByTable(table));\n    const additionalURIs: Set<string> = new Set();\n    for (const sm of sms) {\n      const classId = sm.graph.getClassIdOfColumnIndex(columnIndex);\n      if (classId !== undefined) {\n        const node = sm.graph.node(classId);\n        if (node.nodetype === \"class_node\") {\n          additionalURIs.add(node.uri);\n        }\n      }\n    }\n    for (const klass of await Promise.all(\n      Array.from(additionalURIs).map(\n        this.classStore.fetchIfMissingByURI.bind(this.classStore)\n      )\n    )) {\n      if (klass === undefined) continue;\n      classes[klass.id] = klass;\n    }\n\n    return classes;\n  }\n\n  /**\n   * Get properties of entities in the column. This algorithm is implemented in the client side\n   */\n  async getColumnProperties(\n    table: Table,\n    columnIndex: number,\n    includeCandidateEntities: boolean\n  ): Promise<{ [id: string]: Property }> {\n    const rows = await this.rows.fetchByTable(table, 0, table.size);\n\n    // fetch all entities\n    const entIds = new Set<string>();\n    for (const row of rows) {\n      for (const link of row.links[columnIndex] || []) {\n        if (\n          link.entityId !== undefined &&\n          link.entityId !== appConfig.NIL_ENTITY\n        ) {\n          entIds.add(link.entityId);\n        }\n\n        if (includeCandidateEntities) {\n          for (const candidate of link.candidateEntities) {\n            entIds.add(candidate.entityId);\n          }\n        }\n      }\n    }\n\n    const ents = await this.entityStore.fetchByIds(Array.from(entIds));\n\n    // fetch all properties from entities as well as from the semantic models\n    const propIds = new Set<string>();\n    for (const ent of Object.values(ents)) {\n      for (const [propId, stmts] of Object.entries(ent.properties)) {\n        propIds.add(propId);\n\n        for (const stmt of stmts) {\n          for (const qualId of stmt.qualifiersOrder) {\n            propIds.add(qualId);\n          }\n        }\n      }\n    }\n\n    const props = await this.propStore.fetchByIds(Array.from(propIds));\n\n    // add some properties from the semantic models\n    const sms = this.smStore\n      .findByTable(table.id)\n      .concat(this.smStore.getCreateDraftsByTable(table));\n    const additionalURIs: Set<string> = new Set();\n    for (const sm of sms) {\n      const classId = sm.graph.getClassIdOfColumnIndex(columnIndex);\n      if (classId !== undefined) {\n        const node = sm.graph.node(classId);\n        if (node.nodetype === \"class_node\") {\n          for (const edge of sm.graph.outgoingEdges(node.id)) {\n            additionalURIs.add(edge.uri);\n          }\n        }\n      }\n    }\n    for (const prop of await Promise.all(\n      Array.from(additionalURIs).map(\n        this.propStore.fetchIfMissingByURI.bind(this.propStore)\n      )\n    )) {\n      if (prop === undefined) continue;\n      props[prop.id] = prop;\n    }\n\n    return props;\n  }\n\n  /**\n   * Get column types from entities in the column.\n   * This algorithm calls the function implemented in the server, therefore, it does not have the candidate entities.\n   */\n  async getColumnTypesServer(\n    table: Table,\n    columnIndex: number\n  ): Promise<{ [id: string]: Set<string> }> {\n    const req = axios.post(`${this.remoteURL}/column-types`, {\n      table: table.id,\n      column: columnIndex,\n    });\n\n    const sms = this.smStore\n      .findByTable(table.id)\n      .concat(this.smStore.getCreateDraftsByTable(table));\n    const additionalURIs: Set<string> = new Set();\n\n    for (const sm of sms) {\n      const classId = sm.graph.getClassIdOfColumnIndex(columnIndex);\n      if (classId !== undefined) {\n        const node = sm.graph.node(classId);\n        if (node.nodetype === \"class_node\") {\n          additionalURIs.add(node.uri);\n        }\n      }\n    }\n\n    const resp: AxiosResponse<{ [id: string]: string[] }> = await req;\n    const tree = Object.fromEntries(\n      Object.entries(resp.data).map((value) => [value[0], new Set(value[1])])\n    );\n\n    // gather the list of additional classes and add them to the tree\n    const existingClasses = Object.values(\n      await this.classStore.fetchByIds(Object.keys(tree))\n    );\n    const classes = Object.fromEntries(\n      (\n        await Promise.all(\n          Array.from(additionalURIs).map(\n            this.classStore.fetchIfMissingByURI.bind(this.classStore)\n          )\n        )\n      )\n        .filter((klass) => klass !== undefined)\n        .map((klass) => [klass!.id, klass!])\n    );\n\n    for (const klass of Object.values(classes)) {\n      if (tree[klass.id] === undefined) {\n        tree[klass.id] = new Set();\n        for (const parent of klass.parents) {\n          if (tree[parent] !== undefined) {\n            tree[parent].add(klass.id);\n          }\n        }\n      }\n    }\n\n    // we need to check if any of the additional URIs have children which are already in the tree, so we\n    // can add them correctly\n    for (const klass of existingClasses) {\n      for (const parent of klass.parents) {\n        if (classes[parent] !== undefined) {\n          tree[parent].add(klass.id);\n        }\n      }\n    }\n\n    return tree;\n  }\n}\n","import { AxiosError } from \"axios\";\nimport { makeObservable, observable } from \"mobx\";\nimport { RStore } from \"gena-app\";\nimport { SERVER } from \"../../env\";\nimport { Entity } from \"./Entity\";\n\nexport class EntityStore extends RStore<string, Entity> {\n  constructor() {\n    super(`${SERVER}/api/entities`, undefined, false);\n  }\n\n  public deserialize(record: any): Entity {\n    record.readableLabel = record.readable_label;\n    delete record.readable_label;\n    for (const stmts of Object.values(record.properties)) {\n      for (let stmt of stmts as any[]) {\n        stmt.qualifiersOrder = stmt.qualifiers_order;\n        delete stmt.qualifiers_order;\n      }\n    }\n    return record;\n  }\n}\n","import { PropaneSharp } from \"@mui/icons-material\";\nimport { flow } from \"lodash\";\nimport { action, makeObservable, observable, runInAction } from \"mobx\";\nimport { CancellablePromise } from \"mobx/dist/internal\";\nimport { RStore, SingleKeyIndex, SingleKeyUniqueIndex } from \"gena-app\";\nimport { SERVER } from \"../../env\";\n\nexport interface Class {\n  id: string;\n  uri: string;\n  label: string;\n  readableLabel: string;\n  aliases: string[];\n  description: string;\n  parents: string[];\n  parentsClosure: Set<string>;\n}\n\nexport class ClassStore extends RStore<string, Class> {\n  public doesNotExistURIs = new Set<string>();\n\n  constructor() {\n    super(\n      `${SERVER}/api/classes`,\n      { readableLabel: \"readable_label\", parentsClosure: \"parents_closure\" },\n      false,\n      [new SingleKeyUniqueIndex(\"uri\")]\n    );\n\n    makeObservable(this, {\n      doesNotExistURIs: observable,\n      fetchIfMissingByURI: action,\n    });\n  }\n\n  get uriIndex() {\n    return this.indices[0] as SingleKeyUniqueIndex<string, string, Class>;\n  }\n\n  getClassByURI = (uri: string): Class | undefined => {\n    const id = this.uriIndex.index.get(uri);\n    return id !== undefined ? this.get(id)! : undefined;\n  };\n\n  /**\n   * Fetch a class by URI if it is not in the store.\n   *\n   * @returns undefined if the URI does not exist in the database.\n   */\n\n  async fetchIfMissingByURI(uri: string): Promise<Class | undefined> {\n    if (this.doesNotExistURIs.has(uri)) {\n      return undefined;\n    }\n\n    const id = this.uriIndex.index.get(uri);\n    if (id === undefined) {\n      const record: Class | undefined = await this.fetchOne({\n        conditions: { uri },\n      });\n      if (record === undefined) {\n        runInAction(() => {\n          this.doesNotExistURIs.add(uri);\n        });\n      }\n      return record;\n    }\n    return this.get(id)!;\n  }\n\n  public deserialize(record: any): Class {\n    record = super.deserialize(record);\n    record.parentsClosure = new Set(record.parentsClosure);\n    return record;\n  }\n}\n","import { action, makeObservable, observable, runInAction } from \"mobx\";\nimport { RStore, SingleKeyIndex, SingleKeyUniqueIndex } from \"gena-app\";\nimport { SERVER } from \"../../env\";\n\nexport interface Property {\n  id: string;\n  uri: string;\n  label: string;\n  readableLabel: string;\n  aliases: string[];\n  description: string;\n  parents: string[];\n}\n\nexport class PropertyStore extends RStore<string, Property> {\n  public doesNotExistURIs = new Set<string>();\n\n  constructor() {\n    super(\n      `${SERVER}/api/properties`,\n      { readableLabel: \"readable_label\" },\n      false,\n      [new SingleKeyUniqueIndex(\"uri\")]\n    );\n\n    makeObservable(this, {\n      doesNotExistURIs: observable,\n      fetchIfMissingByURI: action,\n    });\n  }\n\n  get uriIndex() {\n    return this.indices[0] as SingleKeyUniqueIndex<string, string, Property>;\n  }\n\n  getPropertyByURI = (uri: string): Property | undefined => {\n    const id = this.uriIndex.index.get(uri);\n    return id !== undefined ? this.get(id)! : undefined;\n  };\n\n  /**\n   * Fetch a property by URI if it is not in the store.\n   *\n   * @returns undefined if the URI does not exist in the database.\n   */\n  async fetchIfMissingByURI(uri: string): Promise<Property | undefined> {\n    if (this.doesNotExistURIs.has(uri)) {\n      return undefined;\n    }\n\n    const id = this.uriIndex.index.get(uri);\n    if (id === undefined) {\n      const record: Property | undefined = await this.fetchOne({\n        conditions: { uri },\n      });\n      if (record === undefined) {\n        runInAction(() => {\n          this.doesNotExistURIs.add(uri);\n        });\n      }\n      return record;\n    }\n    return this.get(id)!;\n  }\n}\n","import { makeObservable, observable } from \"mobx\";\nimport { SERVER } from \"../../env\";\nimport {\n  Record,\n  DraftUpdateRecord,\n  DraftCreateRecord,\n  CRUDStore,\n} from \"gena-app\";\n\nexport class Project implements Record<number> {\n  id: number;\n  // name of the project\n  name: string;\n  // project's description\n  description: string;\n\n  public constructor(id: number, name: string, description: string) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n\n    makeObservable(this, {\n      id: observable,\n      name: observable,\n      description: observable,\n    });\n  }\n}\n\nexport class DraftUpdateProject\n  extends Project\n  implements DraftUpdateRecord<number, Project>\n{\n  static fromProject(project: Project) {\n    return new DraftUpdateProject(\n      project.id,\n      project.name,\n      project.description\n    );\n  }\n\n  markSaved() {}\n\n  toModel(): Project | undefined {\n    return new Project(this.id, this.name, this.description);\n  }\n}\n\nexport class DraftCreateProject extends Project implements DraftCreateRecord {\n  public draftID: string;\n\n  constructor(draftID: string) {\n    super(0, \"\", \"\");\n    this.draftID = draftID;\n  }\n}\n","import { makeObservable, observable } from \"mobx\";\nimport { SERVER } from \"../../env\";\nimport {\n  Record,\n  DraftUpdateRecord,\n  DraftCreateRecord,\n  CRUDStore,\n} from \"gena-app\";\nimport { DraftCreateProject, DraftUpdateProject, Project } from \"./Project\";\nimport { ParserOpts, UploadingTable } from \"./ProjectUpload\";\nimport axios from \"axios\";\n\nexport class ProjectStore extends CRUDStore<\n  number,\n  DraftCreateProject,\n  DraftUpdateProject,\n  Project\n> {\n  constructor() {\n    super(`${SERVER}/api/project`, undefined, false);\n  }\n\n  /**\n   * Upload a table to the project\n   */\n  public uploadTable = async (\n    projectId: number,\n    file: File,\n    parserOpt?: ParserOpts,\n    selectedTables?: number[]\n  ): Promise<UploadingTable | number[]> => {\n    const form = new FormData();\n    form.append(\"file\", file);\n\n    if (parserOpt !== undefined) {\n      form.append(\"parser_opts\", JSON.stringify({ file: parserOpt }));\n    }\n\n    if (selectedTables !== undefined) {\n      form.append(\"selected_tables\", JSON.stringify(selectedTables));\n    }\n\n    const resp = await axios.post(\n      `${SERVER}/api/project/${projectId}/upload`,\n      form,\n      {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      }\n    );\n\n    if (resp.data.tables !== undefined) return resp.data.tables[0];\n    return resp.data.table_ids;\n  };\n\n  public deserialize(record: any): Project {\n    return new Project(record.id, record.name, record.description);\n  }\n\n  public serializeUpdateDraft(record: DraftUpdateProject): object {\n    return {\n      id: record.id,\n      name: record.name,\n      description: record.description,\n    };\n  }\n\n  public serializeCreateDraft(record: DraftCreateProject): object {\n    return { name: record.name, description: record.description };\n  }\n}\n","import { Link } from \"../table\";\n\nexport interface CSVParserOpts {\n  format: \"csv\";\n  delimiter: string;\n  first_row_is_header: boolean;\n}\n\nexport interface JSONParserOpts {\n  format: \"json\";\n}\n\nexport type Format = \"csv\" | \"json\";\nexport const formats: Format[] = [\"csv\", \"json\"];\nexport type ParserOpts = CSVParserOpts | JSONParserOpts;\n\nexport interface RawTable {\n  name: string;\n  header: string[];\n  rows: (string | number)[][];\n  links: { [columnIndex: string | number]: Link[] }[];\n}\n\nexport interface UploadingTable {\n  parser_opts: ParserOpts;\n  tables: RawTable[];\n}\n","import { HTMLProps } from \"react\";\n\nexport interface ContentHierarchy {\n  level: number; // level of the heading\n  heading: string; // title of the level (header)\n  contentBefore: (Text | LineBreak)[];\n  contentAfter: (Text | LineBreak)[];\n}\n\nexport interface Text {\n  value: string;\n  tags: string[];\n  id2attrs: { [id: string]: HTMLProps<HTMLAnchorElement> };\n}\n\nexport interface LineBreak {\n  nLines: number;\n}\n\nexport function isLineBreak(item: Text | LineBreak): item is LineBreak {\n  return (item as LineBreak).nLines !== undefined;\n}\n","import { SERVER } from \"../../env\";\nimport {\n  FetchResult,\n  PairKeysUniqueIndex,\n  RStore,\n  SimpleCRUDStore,\n} from \"gena-app\";\nimport { Link, Table, TableRow } from \"./Table\";\nimport { action, makeObservable, flow } from \"mobx\";\nimport { CancellablePromise } from \"mobx/dist/api/flow\";\nimport axios from \"axios\";\n\nexport class TableRowStore extends SimpleCRUDStore<number, TableRow> {\n  constructor() {\n    super(`${SERVER}/api/tablerow`, undefined, false, [\n      new PairKeysUniqueIndex(\"table\", \"index\"),\n    ]);\n\n    makeObservable(this, {\n      fetchByTable: action,\n      updateCellLinks: action,\n      updateColumnLinks: action,\n    });\n  }\n\n  get tableIndex() {\n    return this.indices[0] as PairKeysUniqueIndex<\n      number,\n      number,\n      number,\n      TableRow\n    >;\n  }\n\n  /**\n   * Update links of a cell of a single row.\n   *\n   * @param row the row we want to update\n   * @param columnIndex the column we want to save the links\n   * @param entityId the entity id we want to associate with the cell\n   * @param updateCandidateEntities whether or not to update the candidate entities, or just the entities\n   */\n  updateCellLinks = flow(function* (\n    this: TableRowStore,\n    row: TableRow,\n    columnIndex: number,\n    entityId: string | undefined,\n    updateCandidateEntities: boolean\n  ) {\n    const value = row.row[columnIndex];\n    if (typeof value === \"number\") {\n      throw new Error(`Can't not link a number \"${value}\" to an entity`);\n    }\n\n    // first of all, we update the cell\n    if (\n      row.links[columnIndex] === undefined ||\n      row.links[columnIndex].length === 0\n    ) {\n      if (entityId === undefined) {\n        // no need to update as nothing changes\n        return;\n      }\n\n      // add the entity\n      row.links[columnIndex] = [\n        {\n          start: 0,\n          end: value.length,\n          url: undefined,\n          entityId: entityId,\n          candidateEntities: [],\n        },\n      ];\n    }\n    row.links[columnIndex][0].entityId = entityId;\n\n    // then, we sync with the database\n    try {\n      const params = { links: row.links[columnIndex].map(this.serializeLink) };\n      if (!updateCandidateEntities) {\n        for (const link of params.links) {\n          delete (link as any).candidate_entities;\n        }\n      }\n\n      this.state.value = \"updating\";\n      yield axios.put(\n        `${this.remoteURL}/${row.id}/cells/${columnIndex}`,\n        params\n      );\n      this.state.value = \"updated\";\n    } catch (error: any) {\n      this.state.value = \"error\";\n      throw error;\n    }\n  });\n\n  /**\n   * Update links of cells in a single column that have the same value as the given input.\n   *\n   * This function will never sync the candidate entities.\n   *\n   * @param table the table we want to update\n   * @param columnIndex the column we want to save the links\n   * @param text cell's value matches with this text will be updated\n   * @param entityId the entity id we want to associate with the cell\n   */\n  updateColumnLinks = flow(function* (\n    this: TableRowStore,\n    table: Table,\n    columnIndex: number,\n    text: string,\n    entityId: string | undefined\n  ) {\n    // first, we update cells in the store\n    const map = this.tableIndex.index.get(table.id);\n    if (map !== undefined) {\n      for (const [index, rowId] of map) {\n        const row = this.records.get(rowId)!;\n        if (row.row[columnIndex] !== text) {\n          continue;\n        }\n\n        if (\n          row.links[columnIndex] === undefined ||\n          row.links[columnIndex].length === 0\n        ) {\n          if (entityId === undefined) {\n            // no need to update as nothing changes\n            continue;\n          }\n\n          // add the entity\n          row.links[columnIndex] = [\n            {\n              start: 0,\n              end: text.length,\n              url: undefined,\n              entityId: entityId,\n              candidateEntities: [],\n            },\n          ];\n        }\n        row.links[columnIndex][0].entityId = entityId;\n      }\n    }\n\n    // then, we sync with the database\n    try {\n      this.state.value = \"updating\";\n      yield axios.put(`${this.remoteURL}/update_column_links`, {\n        table: table.id,\n        column: columnIndex,\n        text: text,\n        entity_id: entityId === undefined ? null : entityId,\n      });\n      this.state.value = \"updated\";\n    } catch (error: any) {\n      this.state.value = \"error\";\n      throw error;\n    }\n  });\n\n  /**\n   * Find rows of the table\n   *\n   * @param table\n   * @param start the start row\n   * @param no number of rows to return\n   * @returns\n   */\n  fetchByTable: (\n    table: Table,\n    start: number,\n    no: number\n  ) => CancellablePromise<TableRow[]> = flow(function* (\n    this: TableRowStore,\n    table: Table,\n    start: number,\n    no: number\n  ) {\n    // update the query so we won't query rows not in the table\n    if (table.size < start + no) {\n      no = table.size - start;\n    }\n\n    let hasLocalData = true;\n    const map = this.tableIndex.index.get(table.id);\n    if (map === undefined) {\n      const result: FetchResult<TableRow> = yield this.fetch({\n        limit: no,\n        offset: start,\n        conditions: { table: table.id },\n      });\n      return result.records;\n    }\n\n    const output = [];\n    for (let i = 0; i < no; i++) {\n      const rowId = map.get(i + start);\n      if (rowId === undefined) {\n        hasLocalData = false;\n        break;\n      }\n      output.push(this.records.get(rowId)!);\n    }\n\n    if (hasLocalData) return output;\n    const result: FetchResult<TableRow> = yield this.fetch({\n      limit: no,\n      offset: start,\n      conditions: { table: table.id },\n    });\n    return result.records;\n  });\n\n  protected index(record: TableRow) {\n    this.tableIndex.add(record);\n  }\n\n  public deserialize(record: any): TableRow {\n    Object.values(record.links).forEach((links: any) => {\n      links.forEach((link: any) => {\n        if (link.entity_id !== null) {\n          link.entityId = link.entity_id;\n        }\n        // convert null url to undefined\n        if (link.url === null) {\n          delete link.url;\n        }\n        link.candidate_entities.forEach((ce: any) => {\n          ce.entityId = ce.entity_id;\n          delete ce.entity_id;\n        });\n        link.candidateEntities = link.candidate_entities;\n        delete link.entity_id;\n        delete link.candidate_entities;\n      });\n    });\n    return record;\n  }\n\n  protected serializeRecord(record: TableRow | Omit<TableRow, \"id\">): object {\n    return {\n      table: record.table,\n      index: record.index,\n      row: Array.from(record.row),\n      links: Object.fromEntries(\n        Object.entries(record.links).map(([columnIndex, links]) => {\n          return [columnIndex, links.map(this.serializeLink)];\n        })\n      ),\n    };\n  }\n\n  protected serializeLink = (link: Link): object => {\n    return {\n      start: link.start,\n      end: link.end,\n      url: link.url || null,\n      entity_id: link.entityId || null,\n      candidate_entities: link.candidateEntities.map((canent) => ({\n        entity_id: canent.entityId,\n        probability: canent.probability,\n      })),\n    };\n  };\n}\n","import React, { createContext } from \"react\";\nimport { message } from \"antd\";\nimport { registerDefaultAxiosErrorHandler } from \"gena-app\";\nimport { AssistantService } from \"./AssistantService\";\nimport { Entity, EntityStore } from \"./entity\";\nimport { ClassStore } from \"./ontology/ClassStore\";\nimport { PropertyStore } from \"./ontology/PropertyStore\";\nimport { Project, ProjectStore } from \"./project\";\nimport {\n  DraftSemanticModel,\n  SemanticModel,\n  SemanticModelStore,\n  SMGraph,\n  URICount,\n} from \"./sm\";\nimport { TableRowStore, TableStore } from \"./table\";\nimport { UISettings, EntitySettings, TableSettings } from \"./settings\";\n\nconst tableStore = new TableStore();\nconst semanticModelStore = new SemanticModelStore();\nconst tableRowStore = new TableRowStore();\nconst classStore = new ClassStore();\nconst propertyStore = new PropertyStore();\nconst entityStore = new EntityStore();\n\nexport const stores = {\n  projectStore: new ProjectStore(),\n  tableStore,\n  tableRowStore,\n  semanticModelStore,\n  entityStore,\n  propertyStore,\n  classStore,\n  assistantService: new AssistantService(\n    tableStore,\n    tableRowStore,\n    semanticModelStore,\n    classStore,\n    propertyStore,\n    entityStore\n  ),\n  uiSettings: new UISettings(),\n};\n\nregisterDefaultAxiosErrorHandler((error) => {\n  message.error(\"Error while talking with the server.\", 5);\n});\n\n(window as any)._stores = stores;\nexport type IStore = Readonly<typeof stores>;\n\n/** Init the stores with essential information (e.g., loading the ui settings) needed to run the app */\nexport function initStores(): Promise<void> {\n  return stores.uiSettings.fetchSettings();\n}\n\nexport const StoreContext = createContext<IStore>(stores);\n\nexport function useStores(): IStore {\n  return React.useContext(StoreContext);\n}\n\nexport type { Property } from \"./ontology/PropertyStore\";\nexport type { SMEdge, SMNode } from \"./sm/SMGraph\";\nexport type { Table, TableRow } from \"./table\";\nexport {\n  ProjectStore,\n  TableStore,\n  TableRowStore,\n  Project,\n  SemanticModelStore,\n  DraftSemanticModel,\n  PropertyStore,\n  ClassStore,\n  EntityStore,\n  SemanticModel,\n  SMGraph,\n  URICount,\n  Entity,\n  UISettings,\n  TableSettings,\n  EntitySettings,\n};\n","import { SimpleCRUDStore, SingleKeyIndex } from \"gena-app\";\nimport { SERVER } from \"../../env\";\nimport { Table } from \"./Table\";\n\nexport class TableStore extends SimpleCRUDStore<number, Table> {\n  constructor() {\n    super(`${SERVER}/api/table`, undefined, false, [\n      new SingleKeyIndex(\"project\"),\n    ]);\n  }\n\n  get projectIndex() {\n    return this.indices[0] as SingleKeyIndex<number, number, Table>;\n  }\n\n  /**\n   * Find tables in a project\n   *\n   * @param projectId\n   * @param start\n   * @param no number of tables to return\n   */\n  findByProject = (projectId: number, start?: number, no?: number): Table[] => {\n    return Array.from(this.projectIndex.index.get(projectId) || []).map(\n      (id) => this.records.get(id)!\n    );\n  };\n\n  public deserialize(record: any): Table {\n    record.contextPage = record.context_page;\n    if (record.contextPage === null || record.contextPage === undefined) {\n      record.contextPage = {};\n    }\n\n    if (record.contextPage.entity !== null) {\n      record.contextPage.entityId = record.contextPage.entity;\n      delete record.contextPage.entity;\n    }\n\n    record.contextValues = record.context_values;\n    if (record.context_tree !== undefined) {\n      record.contextTree = record.context_tree.map((item: any) => {\n        item.contentBefore = item.content_before.map((x: any) => {\n          if (x.n_lines !== undefined) {\n            x.nLines = x.n_lines;\n            delete x.n_lines;\n          }\n          return x;\n        });\n        item.contentAfter = item.content_after.map((x: any) => {\n          if (x.n_lines !== undefined) {\n            x.nLines = x.n_lines;\n            delete x.n_lines;\n          }\n          return x;\n        });\n        delete item.content_before;\n        delete item.content_after;\n        return item;\n      });\n      delete record.context_tree;\n    }\n    delete record.context_tree;\n    delete record.context_values;\n    delete record.context_page;\n    return record;\n  }\n\n  protected index(record: Table) {\n    this.projectIndex.add(record);\n  }\n}\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { observer } from \"mobx-react\";\nimport { useState } from \"react\";\nimport { useStores } from \"../../../models\";\nimport { Button, Form, Input, Modal } from \"antd\";\nimport { DraftCreateProject } from \"../../../models/project\";\n\nconst styles = {};\n\nexport const NewProjectForm = withStyles(styles)(\n  observer(({ classes }: WithStyles<typeof styles>) => {\n    const { projectStore } = useStores();\n    const [form] = Form.useForm();\n    const [nameValidation, setNameValidation] = useState({\n      name: \"\",\n      status: \"success\",\n    });\n\n    const onSave = () => {\n      const project = new DraftCreateProject(\"\");\n      project.name = form.getFieldValue(\"name\");\n      project.description = form.getFieldValue(\"description\");\n\n      projectStore\n        .create(project)\n        .then(() => {\n          Modal.destroyAll();\n        })\n        .catch(() => {\n          setNameValidation({ name: project.name, status: \"error\" });\n        });\n    };\n\n    return (\n      <>\n        <Form\n          labelCol={{ span: 4 }}\n          wrapperCol={{ span: 20 }}\n          form={form}\n          onFinish={onSave}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"name\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n            validateStatus={\n              nameValidation.name === form.getFieldValue(\"name\") &&\n              nameValidation.status === \"error\"\n                ? \"error\"\n                : undefined\n            }\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name=\"description\"\n            label=\"description\"\n            rules={[{ required: true }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            wrapperCol={{\n              span: 20,\n              offset: 4,\n            }}\n          >\n            <Button type=\"primary\" htmlType=\"submit\">\n              Create\n            </Button>\n          </Form.Item>\n        </Form>\n      </>\n    );\n  })\n);\n\nexport const openNewProjectForm = (zIndex?: number) => {\n  const content = <NewProjectForm />;\n\n  Modal.info({\n    title: (\n      <span style={{ marginBottom: 16, display: \"inline-block\" }}>\n        New Project\n      </span>\n    ),\n    content,\n    bodyStyle: { margin: -8 },\n    okButtonProps: { style: { display: \"none\" } },\n    maskClosable: true,\n    mask: true,\n    zIndex: zIndex,\n    width: \"calc(100% - 128px)\",\n    style: { top: 64 },\n  });\n};\n","import { Avatar, Button, Col, List, Row, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { InternalLink } from \"gena-app\";\nimport { useStores } from \"../../models\";\nimport { routes } from \"../../routes\";\n\nimport {\n  red,\n  volcano,\n  orange,\n  gold,\n  yellow,\n  lime,\n  green,\n  cyan,\n  blue,\n  geekblue,\n  purple,\n  magenta,\n} from \"@ant-design/colors\";\nimport { openNewProjectForm } from \"../project/forms/NewProjectForm\";\n\n// const colorWheels = [\"#f56a00\", \"#7265e6\", \"#1890ff\", \"#00a2ae\"];\nconst colorWheels = [\n  red[5],\n  volcano[5],\n  blue[5],\n  gold[5],\n  orange[5],\n  yellow[5],\n  lime[5],\n  green[5],\n  cyan[5],\n  geekblue[5],\n  purple[5],\n  magenta[5],\n];\n\nexport const HomePage = observer(() => {\n  const { projectStore } = useStores();\n\n  useEffect(() => {\n    projectStore.fetch({ limit: 100, offset: 0 });\n  }, [projectStore]);\n\n  return (\n    <React.Fragment>\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={16}>\n          <Typography.Title level={3}>Projects</Typography.Title>\n        </Col>\n        <Col className=\"gutter-row\" span={8}>\n          <Button\n            style={{ float: \"right\" }}\n            type=\"primary\"\n            onClick={() => openNewProjectForm()}\n          >\n            New Project\n          </Button>\n        </Col>\n      </Row>\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={24}>\n          <List\n            size=\"small\"\n            bordered={true}\n            itemLayout=\"horizontal\"\n            dataSource={projectStore.list}\n            renderItem={(project, i) => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={\n                    <Avatar\n                      shape=\"square\"\n                      size=\"large\"\n                      style={{\n                        marginTop: 4,\n                        backgroundColor:\n                          colorWheels[\n                            project.name.charCodeAt(0) % colorWheels.length\n                          ],\n                      }}\n                    >\n                      {project.name[0].toUpperCase()}\n                    </Avatar>\n                  }\n                  title={\n                    <InternalLink\n                      path={routes.project}\n                      urlArgs={{ projectId: project.id }}\n                      queryArgs={{}}\n                    >\n                      {project.name}\n                    </InternalLink>\n                  }\n                  description={project.description}\n                />\n              </List.Item>\n            )}\n          />\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n});\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { observer } from \"mobx-react\";\nimport { useState } from \"react\";\nimport { useStores } from \"../../../models\";\nimport { Button, Form, Input, Modal, Space } from \"antd\";\nimport { Project, DraftUpdateProject } from \"../../../models/project\";\nimport { routes } from \"../../../routes\";\n\nconst styles = {};\n\nexport const UpdateProjectForm = withStyles(styles)(\n  observer(\n    ({\n      project,\n      classes,\n    }: { project: Project } & WithStyles<typeof styles>) => {\n      const { projectStore } = useStores();\n      const [form] = Form.useForm();\n      const [nameValidation, setNameValidation] = useState({\n        name: \"\",\n        status: \"success\",\n      });\n\n      const onSave = () => {\n        const draft = DraftUpdateProject.fromProject(project);\n        draft.name = form.getFieldValue(\"name\");\n        draft.description = form.getFieldValue(\"description\");\n        projectStore\n          .update(draft)\n          .then(() => {\n            Modal.destroyAll();\n          })\n          .catch(() => {\n            setNameValidation({ name: draft.name, status: \"error\" });\n          });\n      };\n\n      const onDelete = () => {\n        projectStore\n          .delete(project.id)\n          .then(() => {\n            Modal.destroyAll();\n          })\n          .then(() => {\n            routes.home.path().open();\n          });\n      };\n\n      return (\n        <>\n          <Form\n            labelCol={{ span: 4 }}\n            wrapperCol={{ span: 20 }}\n            form={form}\n            onFinish={onSave}\n          >\n            <Form.Item\n              name=\"name\"\n              label=\"name\"\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n              initialValue={project.name}\n              validateStatus={\n                nameValidation.name === form.getFieldValue(\"name\") &&\n                nameValidation.status === \"error\"\n                  ? \"error\"\n                  : undefined\n              }\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              name=\"description\"\n              label=\"description\"\n              rules={[{ required: true }]}\n              initialValue={project.description}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              wrapperCol={{\n                span: 20,\n                offset: 4,\n              }}\n            >\n              <Space style={{ width: \"100%\" }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Update\n                </Button>\n                <Button type=\"primary\" danger={true} onClick={onDelete}>\n                  Delete\n                </Button>\n              </Space>\n            </Form.Item>\n          </Form>\n        </>\n      );\n    }\n  )\n);\n\nexport const openUpdateProjectForm = (project: Project, zIndex?: number) => {\n  const content = <UpdateProjectForm project={project} />;\n\n  Modal.info({\n    title: (\n      <span style={{ marginBottom: 16, display: \"inline-block\" }}>\n        Update Project {project.name}\n      </span>\n    ),\n    content,\n    bodyStyle: { margin: -8 },\n    okButtonProps: { style: { display: \"none\" } },\n    maskClosable: true,\n    mask: true,\n    zIndex: zIndex,\n    width: \"calc(100% - 128px)\",\n    style: { top: 64 },\n  });\n};\n","import { Button, Form, FormInstance, Input, Select, Switch } from \"antd\";\nimport React from \"react\";\nimport { CSVParserOpts, formats, ParserOpts } from \"../../../../models/project\";\n\nexport const CSVParserForm = ({\n  opt,\n  form,\n}: {\n  form: FormInstance<any>;\n  opt: CSVParserOpts;\n}) => {\n  return (\n    <>\n      <Form.Item\n        name=\"delimiter\"\n        label=\"delimiter\"\n        rules={[{ required: true }]}\n      >\n        <Input\n          onChange={(e) => {\n            form.setFieldsValue({\n              delimiter: e.target.value\n                .replace(\"\\\\t\", \"\\t\")\n                .replace(\"\\\\n\", \"\\n\"),\n            });\n          }}\n          style={{ width: 60 }}\n        />\n      </Form.Item>\n      <Form.Item\n        name=\"first_row_is_header\"\n        label=\"Is first row header\"\n        rules={[{ required: true }]}\n        valuePropName=\"checked\"\n      >\n        <Switch />\n      </Form.Item>\n    </>\n  );\n};\n\nexport const escapeDelimiter = (delimiter?: string) => {\n  switch (delimiter) {\n    case \"\\t\":\n      return \"\\\\t\";\n    case \"\\n\":\n      return \"\\\\n\";\n    default:\n      return delimiter;\n  }\n};\n\nexport const ParserOptsForm = (props: { parserOpts: ParserOpts }) => {\n  const [form] = Form.useForm();\n  let additionalProps;\n\n  if (props.parserOpts.format === \"csv\") {\n    additionalProps = <CSVParserForm opt={props.parserOpts} form={form} />;\n  } else {\n    additionalProps = null;\n  }\n\n  return (\n    <Form\n      layout=\"inline\"\n      initialValues={{\n        ...props.parserOpts,\n        delimiter:\n          props.parserOpts.format === \"csv\"\n            ? escapeDelimiter(props.parserOpts.delimiter)\n            : undefined,\n      }}\n    >\n      <Form.Item name=\"format\" label=\"File Type\" rules={[{ required: true }]}>\n        <Select\n          onChange={(value) => {\n            form.setFieldsValue({ format: value });\n          }}\n        >\n          {formats.map((value) => (\n            <Select.Option key={value} value={value}>\n              {value}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n      {additionalProps}\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Update\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n","import ProTable from \"@ant-design/pro-table\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { RawTable } from \"../../../../models/project\";\n\nconst styles = {\n  table: {\n    \"& div.ant-table-container\": {\n      border: \"1px solid #bbb\",\n      borderRadius: 4,\n      borderLeft: \"1px solid #bbb !important\",\n    },\n    \"& div.ant-card-body\": {\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    \"& th\": {\n      fontWeight: 600,\n    },\n  },\n};\n\nexport const RawTableComponent = withStyles(styles)(\n  ({ table, classes }: { table: RawTable } & WithStyles<typeof styles>) => {\n    return (\n      <ProTable\n        className={classes.table}\n        defaultSize=\"small\"\n        bordered={true}\n        toolBarRender={false}\n        search={false}\n        pagination={{\n          pageSize: 5,\n          pageSizeOptions: [\"5\", \"10\", \"20\", \"50\", \"100\", \"200\", \"500\", \"1000\"],\n        }}\n        rowKey=\"id\"\n        columns={table.header.map((header, index) => ({\n          dataIndex: [\"data\", index],\n          title: header,\n        }))}\n        request={async (params, sort, filter) => {\n          const start = (params.current! - 1) * params.pageSize!;\n          const end = start + params.pageSize!;\n          return {\n            data: table.rows\n              .slice(start, end)\n              .map((row, index) => ({ data: row, id: index + start })),\n            success: true,\n            total: table.rows.length,\n          };\n        }}\n      />\n    );\n  }\n);\n","import { InboxOutlined } from \"@ant-design/icons\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport {\n  Button,\n  Form,\n  Input,\n  Modal,\n  Space,\n  Switch,\n  Typography,\n  Upload,\n} from \"antd\";\nimport { ModalStaticFunctions } from \"antd/lib/modal/confirm\";\nimport React, { useState } from \"react\";\nimport { useStores } from \"../../../../models\";\nimport { Project, UploadingTable } from \"../../../../models/project\";\nimport { ParserOptsForm } from \"./ParserOptsComponent\";\nimport { RawTableComponent } from \"./RawTableComponent\";\n\nconst styles = {\n  upload: {\n    \"& > .ant-upload\": {\n      padding: \"8px 0 !important\",\n    },\n  },\n  carouselDot: {\n    zIndex: 2000,\n    backgroundColor: \"black\",\n    opacity: 0,\n  },\n};\n\nexport const UploadPhase1 = withStyles(styles)(\n  ({\n    classes,\n    projectId,\n    setUploadTable,\n  }: {\n    setUploadTable: (item: UploadingTable, file: File) => void;\n    projectId: number;\n  } & WithStyles<typeof styles>) => {\n    const { projectStore } = useStores();\n\n    const onDrop = (e: React.DragEvent<HTMLDivElement>) => {\n      const file = e.dataTransfer.files[0];\n      projectStore.uploadTable(projectId, file).then((tbl) => {\n        if (Array.isArray(tbl)) {\n          throw new Error(\"Error\");\n        }\n        setUploadTable(tbl, file);\n      });\n    };\n\n    return (\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <Upload.Dragger\n          name=\"file\"\n          multiple={false}\n          onDrop={onDrop}\n          beforeUpload={() => false}\n          className={classes.upload}\n        >\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-hint\">\n            Click or drag file to this area to upload\n          </p>\n        </Upload.Dragger>\n\n        <Form layout=\"inline\">\n          <Form.Item\n            name=\"url\"\n            label=\"URL\"\n            rules={[{ required: true }]}\n            style={{ width: \"calc(100% - 94px)\" }}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item style={{ margin: 0 }}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </Space>\n    );\n  }\n);\n\nexport const UploadPhase2 = withStyles(styles)(\n  ({\n    uploadingTable,\n    classes,\n    projectId,\n    destroy,\n    onDone,\n  }: {\n    uploadingTable: { table: UploadingTable; file: File };\n    destroy: () => void;\n    onDone: () => void;\n    projectId: number;\n  } & WithStyles<typeof styles>) => {\n    const { projectStore } = useStores();\n    const [selectedTables, setSelectedTables] = useState(\n      uploadingTable.table.tables.map(() => true)\n    );\n    let tables;\n\n    if (uploadingTable.table.tables.length == 1) {\n      tables = <RawTableComponent table={uploadingTable.table.tables[0]} />;\n    } else {\n      tables = uploadingTable.table.tables.map((table, index) => {\n        return (\n          <Space\n            direction=\"vertical\"\n            style={{ width: \"100%\" }}\n            key={`table-${index}-wrap`}\n          >\n            <Typography.Text>\n              Select:&nbsp;\n              <Switch\n                checked={selectedTables[index]}\n                onChange={(checked) => {\n                  const lst = selectedTables.slice();\n                  lst[index] = checked;\n                  setSelectedTables(lst);\n                }}\n              />\n            </Typography.Text>\n            <RawTableComponent table={table} />,\n          </Space>\n        );\n      });\n    }\n\n    const finishUpload = () => {\n      const tableIndex: number[] = [];\n      selectedTables.forEach((flag, index) => {\n        if (flag) tableIndex.push(index);\n      });\n\n      return projectStore\n        .uploadTable(\n          projectId,\n          uploadingTable.file,\n          uploadingTable.table.parser_opts,\n          tableIndex\n        )\n        .then((result) => {\n          destroy();\n          onDone();\n        });\n    };\n\n    return (\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <ParserOptsForm parserOpts={uploadingTable.table.parser_opts} />\n        {tables}\n        <Space>\n          <Button type=\"primary\" onClick={finishUpload}>\n            Confirm\n          </Button>\n          {/* <Button\n            type=\"primary\"\n            onClick={() => {\n              finishUpload().then(() => {\n                // TODO: re-open the upload form\n              });\n            }}\n          >\n            Confirm & Upload\n          </Button> */}\n        </Space>\n      </Space>\n    );\n  }\n);\n\nexport const UploadTableForm = ({\n  project,\n  destroy,\n  onDone,\n}: {\n  project: Project;\n  destroy: () => void;\n  onDone?: () => void;\n}) => {\n  const { projectStore } = useStores();\n  const [phase, setPhase] = useState<\"phase1\" | \"phase2\">(\"phase1\");\n  const [uploadingTable, setUploadingTable] = useState<\n    { table: UploadingTable; file: File } | undefined\n  >(undefined);\n\n  if (phase === \"phase1\") {\n    return (\n      <UploadPhase1\n        projectId={project.id}\n        setUploadTable={(table, file) => {\n          setUploadingTable({ table, file });\n          setPhase(\"phase2\");\n        }}\n      />\n    );\n  }\n\n  if (phase === \"phase2\") {\n    return (\n      <UploadPhase2\n        projectId={project.id}\n        uploadingTable={uploadingTable!}\n        destroy={destroy}\n        onDone={onDone || (() => {})}\n      />\n    );\n  }\n\n  return <></>;\n};\n\nexport const openUploadTableForm = (\n  project: Project,\n  cfg?: {\n    zIndex?: number;\n    modal?: Omit<ModalStaticFunctions, \"warn\">;\n    onDone?: () => void;\n  }\n) => {\n  const modal = cfg?.modal === undefined ? Modal : cfg.modal;\n  const ref = modal.info({\n    title: (\n      <span style={{ marginBottom: 16, display: \"inline-block\" }}>\n        Upload Tables\n      </span>\n    ),\n    bodyStyle: { margin: -8 },\n    okButtonProps: { style: { display: \"none\" } },\n    maskClosable: true,\n    mask: true,\n    zIndex: cfg?.zIndex,\n    width: \"calc(100% - 128px)\",\n    style: { top: 64 },\n  });\n  ref.update({\n    content: (\n      <UploadTableForm\n        project={project}\n        destroy={ref.destroy}\n        onDone={cfg?.onDone}\n      />\n    ),\n  });\n};\n","import { EditOutlined } from \"@ant-design/icons\";\nimport ProTable, { ActionType } from \"@ant-design/pro-table\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Button, Modal, Popconfirm, Typography } from \"antd\";\nimport _ from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useRef } from \"react\";\nimport { InternalLink, LoadingComponent, NotFoundComponent } from \"gena-app\";\nimport { Table, useStores } from \"../../models\";\nimport { routes } from \"../../routes\";\nimport { openUpdateProjectForm } from \"./forms/UpdateProjectForm\";\nimport { openUploadTableForm } from \"./forms/upload\";\n\nconst styles = {\n  table: {\n    \"& div.ant-table-container\": {\n      border: \"1px solid #bbb\",\n      borderRadius: 4,\n      borderLeft: \"1px solid #bbb !important\",\n    },\n    \"& div.ant-card-body\": {\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    \"& th\": {\n      fontWeight: 600,\n    },\n  },\n};\n\nexport const ProjectPage = withStyles(styles)(\n  observer(({ classes }: WithStyles<typeof styles>) => {\n    const projectId = routes.project.useURLParams()!.projectId;\n    const [modal, contextHolder] = Modal.useModal();\n    const actionRef = useRef<ActionType>();\n\n    const { projectStore, tableStore } = useStores();\n    useEffect(() => {\n      projectStore.fetchById(projectId);\n    }, [projectStore, projectId]);\n\n    const project = projectStore.get(projectId);\n    if (project === undefined) {\n      return <LoadingComponent />;\n    } else if (project === null) {\n      return <NotFoundComponent />;\n    }\n\n    const columns = [\n      { dataIndex: \"id\", title: \"id\" },\n      {\n        dataIndex: \"name\",\n        title: \"name\",\n        renderText: (text: string, tbl: ReturnType<typeof table2row>) => {\n          return (\n            <InternalLink\n              path={routes.table}\n              urlArgs={{ tableId: tbl.id }}\n              queryArgs={{\n                query: tableStore.encodeWhereQuery({ project: projectId }),\n              }}\n            >\n              {tbl.name}\n            </InternalLink>\n          );\n        },\n      },\n      { dataIndex: \"description\", title: \"description\" },\n      {\n        dataIndex: \"id\",\n        title: \"action\",\n        renderText: (_: string, tbl: ReturnType<typeof table2row>) => {\n          return (\n            <Popconfirm\n              title=\"Are you sure to delete this table?\"\n              onConfirm={() => {\n                tableStore.delete(tbl.id);\n                actionRef.current?.reload();\n              }}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button type=\"primary\" danger={true} size=\"small\">\n                Delete\n              </Button>\n            </Popconfirm>\n          );\n        },\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <Typography.Title level={3}>\n          Project {_.upperFirst(project.name)}\n          &nbsp;\n          <a\n            style={{ fontSize: \"0.8em\", fontWeight: 400 }}\n            onClick={() => openUpdateProjectForm(project)}\n          >\n            <EditOutlined />\n          </a>\n        </Typography.Title>\n        <Typography.Text>\n          <b>Description:</b>{\" \"}\n          <Typography.Text type=\"secondary\">\n            {project.description}\n          </Typography.Text>\n        </Typography.Text>\n        <ProTable<ReturnType<typeof table2row>>\n          actionRef={actionRef}\n          className={classes.table}\n          defaultSize=\"small\"\n          bordered={true}\n          request={async (params, sort, filter) => {\n            let result = await tableStore.fetch({\n              limit: params.pageSize!,\n              offset: (params.current! - 1) * params.pageSize!,\n              conditions: { project: projectId },\n            });\n            return {\n              data: result.records.map(table2row),\n              success: true,\n              total: result.total,\n            };\n          }}\n          options={{\n            search: true,\n          }}\n          headerTitle={<Typography.Title level={4}>Tables</Typography.Title>}\n          toolBarRender={() => {\n            return [\n              <Button\n                key=\"upload\"\n                type=\"primary\"\n                onClick={() =>\n                  openUploadTableForm(project, {\n                    modal,\n                    onDone: () => {\n                      actionRef.current?.reload();\n                    },\n                  })\n                }\n              >\n                Upload\n              </Button>,\n            ];\n          }}\n          search={false}\n          pagination={{\n            pageSize: 500,\n            pageSizeOptions: [\"10\", \"20\", \"50\", \"100\", \"200\", \"500\", \"1000\"],\n          }}\n          rowKey=\"id\"\n          columns={columns}\n        />\n        {contextHolder}\n      </React.Fragment>\n    );\n  })\n);\n\nfunction table2row(tbl: Table) {\n  return {\n    id: tbl.id,\n    name: tbl.name,\n    description: tbl.description,\n  };\n}\n","/** A utility to discard responses out of order */\nexport class SequentialFuncInvoker {\n  private timer: number = 0;\n\n  public exec<T>(fn: () => Promise<T>): Promise<T | undefined> {\n    this.timer += 1;\n    let calledAt = this.timer;\n\n    return fn().then((result: any) => {\n      if (calledAt < this.timer) {\n        return undefined;\n      }\n\n      return result;\n    });\n  }\n}\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Select } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { SequentialFuncInvoker } from \"../../misc\";\nimport { useStores } from \"../../models\";\n\nconst styles = {\n  selection: {\n    width: \"100%\",\n  },\n};\n\ntype SearchProps = {\n  value?: string | string[];\n  onDeselect?: (value: string) => void;\n  onSelect?: (value: string) => void;\n  mode?: \"multiple\" | \"tags\";\n} & WithStyles<typeof styles>;\n\nexport const OntPropSearchComponent = withStyles(styles)(\n  observer((props: SearchProps) => {\n    return useSearchComponent(\"propertyStore\", props);\n  })\n);\n\nexport const OntClassSearchComponent = withStyles(styles)(\n  observer((props: SearchProps) => {\n    return useSearchComponent(\"classStore\", props);\n  })\n);\n\nexport const EntitySearchComponent = withStyles(styles)(\n  observer((props: SearchProps) => {\n    return useSearchComponent(\"entityStore\", props);\n  })\n);\n\nfunction useSearchComponent(\n  storeName: \"propertyStore\" | \"classStore\" | \"entityStore\",\n  props: SearchProps\n) {\n  const store = useStores()[storeName];\n  const seqInvoker = new SequentialFuncInvoker();\n\n  // when the provided value is not in the store, fetch it\n  useEffect(() => {\n    if (props.value === undefined) {\n      return;\n    }\n\n    if (Array.isArray(props.value)) {\n      // leverage the fact that the three stores are not re-fetched\n      if (!store.refetch) {\n        store.fetchByIds(props.value);\n      } else {\n        store.fetchByIds(props.value.filter((id) => !store.records.has(id)));\n      }\n    } else if (store.get(props.value) === undefined) {\n      store.fetchById(props.value);\n    }\n  }, [props.value]);\n\n  // gather all options already in the store, leverage the fact\n  // that property store is readonly\n  const options = useMemo(() => {\n    const options = [];\n    for (const r of store.iter()) {\n      options.push({\n        value: r.id,\n        label: r.readableLabel,\n      });\n    }\n    return options;\n  }, [store.records.size]);\n\n  // search for additional properties if it's not in the list\n  const onSearch = (query: string) => {\n    if (query === \"\") return;\n    seqInvoker.exec(() => {\n      return store.fetchById(query).then(() => 1);\n    });\n  };\n\n  return (\n    <Select\n      mode={props.mode}\n      allowClear={true}\n      options={options}\n      optionFilterProp=\"label\"\n      className={props.classes.selection}\n      showSearch={true}\n      onSearch={onSearch}\n      value={props.value}\n      onSelect={props.onSelect as any}\n      onDeselect={props.onDeselect as any}\n    />\n  );\n}\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Descriptions } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { useStores } from \"../../models\";\nimport { OntPropSearchComponent } from \"./OntSearchComponent\";\n\nconst styles = {};\n\nexport const EntitySettingComponent = withStyles(styles)(\n  observer(({ classes }: {} & WithStyles<typeof styles>) => {\n    const { uiSettings } = useStores();\n\n    return (\n      <Descriptions title=\"Entity Settings\" size=\"small\" column={1}>\n        <Descriptions.Item label=\"Properties (full view)\">\n          <OntPropSearchComponent\n            mode=\"multiple\"\n            value={uiSettings.entity.showedPropsInFullView}\n            onSelect={uiSettings.entity.addShowedPropsInFullView}\n            onDeselect={uiSettings.entity.removeShowedPropsInFullView}\n          />\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Properties (popover view)\">\n          <OntPropSearchComponent\n            mode=\"multiple\"\n            value={uiSettings.entity.showedPropsInPopoverView}\n            onSelect={uiSettings.entity.addShowedPropsInPopoverView as any}\n            onDeselect={uiSettings.entity.removeShowedPropsInPopoverView as any}\n          />\n        </Descriptions.Item>\n      </Descriptions>\n    );\n  })\n);\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Select } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useMemo } from \"react\";\nimport { SequentialFuncInvoker } from \"../../misc\";\nimport { SemanticModel, useStores } from \"../../models\";\nimport { SMNodeType } from \"../../models/sm\";\nimport { gold, green, purple, yellow } from \"@ant-design/colors\";\n\nconst styles = {\n  selection: {\n    width: \"100%\",\n  },\n  class_node: {\n    backgroundColor: green[2],\n    \"&:hover\": {\n      backgroundColor: green[8],\n      color: \"white\",\n    },\n  },\n  literal_node: {\n    backgroundColor: purple[2],\n    \"&:hover\": {\n      backgroundColor: purple[8],\n      color: \"white\",\n    },\n  },\n  data_node: {\n    backgroundColor: gold[2],\n    \"&:hover\": {\n      backgroundColor: gold[8],\n      color: \"white\",\n    },\n  },\n};\n\nexport type SearchValue = { type: SMNodeType | \"class\"; id: string };\n\nexport const NodeSearchComponent = withStyles(styles)(\n  observer(\n    ({\n      sm,\n      value,\n      onDeselect,\n      onSelect,\n      classes,\n    }: {\n      sm: SemanticModel;\n      value?: SearchValue;\n      onDeselect: (value: SearchValue) => void;\n      onSelect: (value: SearchValue) => void;\n    } & WithStyles<typeof styles>) => {\n      const { classStore } = useStores();\n      const seqInvoker = new SequentialFuncInvoker();\n\n      // gather all options already in the store, leverage the fact\n      // that property store is readonly\n      const options = useMemo(() => {\n        const options: ({\n          value: string;\n          label: string;\n        } & SearchValue)[] = [];\n        for (const r of classStore.iter()) {\n          options.push({\n            type: \"class\",\n            id: r.id,\n            value: `class:${r.id}`,\n            label: sm.graph.uriCount.nextLabel(r.uri, r.readableLabel),\n          });\n        }\n\n        for (const u of sm.graph.nodes) {\n          options.push({\n            type: u.nodetype,\n            id: u.id,\n            value: `${u.nodetype}:${u.id}`,\n            label: sm.graph.uriCount.label(u),\n            className: classes[u.nodetype],\n          } as any);\n        }\n        return options;\n      }, [classStore.records.size]);\n\n      // search for additional values if it's not in the list\n      const onSearch = (query: string) => {\n        if (query === \"\") return;\n        seqInvoker.exec(() => {\n          return classStore.fetchById(query).then(() => 1);\n        });\n      };\n\n      return (\n        <Select\n          allowClear={true}\n          options={options}\n          optionFilterProp=\"label\"\n          className={classes.selection}\n          showSearch={true}\n          onSearch={onSearch}\n          value={value === undefined ? undefined : `${value.type}:${value.id}`}\n          onSelect={(value: any, option: SearchValue) => {\n            onSelect({ type: option.type, id: option.id });\n          }}\n          onDeselect={(value: any, option: SearchValue) => {\n            onDeselect({ type: option.type, id: option.id });\n          }}\n        />\n      );\n    }\n  )\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Button, Form, Modal, Select, Space, Switch, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { SemanticModel, SMEdge, useStores } from \"../../../models\";\nimport { NodeSearchComponent, SearchValue } from \"../NodeSearchComponent\";\nimport { OntPropSearchComponent } from \"../OntSearchComponent\";\n\nconst styles = {\n  table: {\n    width: \"100%\",\n    textAlign: \"left\",\n    borderSpacing: 0,\n    borderRadius: \"2px 2px 0 0\",\n\n    \"& tr\": {\n      verticalAlign: \"middle\",\n    },\n    \"& th, td\": {\n      padding: \"0 4px\",\n    },\n  },\n  selection: {\n    width: \"100%\",\n  },\n} as const;\n\nexport const NodeSelectionComponent = withStyles(styles)(\n  observer(\n    ({\n      sm,\n      classes,\n      value,\n      onSelect,\n      onDeselect,\n    }: {\n      sm: SemanticModel;\n      value?: string;\n      onDeselect?: (value: string) => void;\n      onSelect?: (value: string) => void;\n    } & WithStyles<typeof styles>) => {\n      // gather all options already in the store, leverage the fact\n      // that property store is readonly\n      const options = useMemo(() => {\n        return sm.graph.nodes.map((node) => {\n          return {\n            value: node.id,\n            label: node.label,\n          };\n        });\n      }, [sm]);\n\n      return (\n        <Select\n          showSearch={true}\n          allowClear={true}\n          options={options}\n          optionFilterProp=\"label\"\n          className={classes.selection}\n          value={value}\n          onSelect={onSelect as any}\n          onDeselect={onDeselect as any}\n        />\n      );\n    }\n  )\n);\n\nexport type EdgeFormProps = {\n  sm: SemanticModel;\n  edge?: SMEdge;\n};\n\nexport const EdgeForm = withStyles(styles)(\n  observer(\n    ({ sm, edge, classes }: EdgeFormProps & WithStyles<typeof styles>) => {\n      const { classStore, propertyStore } = useStores();\n      const [source, setSource] = useState<SearchValue | undefined>(\n        edge !== undefined\n          ? { type: sm.graph.node(edge.source).nodetype, id: edge.source }\n          : undefined\n      );\n      const [target, setTarget] = useState<SearchValue | undefined>(\n        edge !== undefined\n          ? { type: sm.graph.node(edge.target).nodetype, id: edge.target }\n          : undefined\n      );\n      const [uri, setURI] = useState<string | undefined>(edge?.uri);\n      const [approximation, setApproximation] = useState(false);\n\n      // whether there exists an edge between source & target\n      // if yes, we can't insert because we assume only one relationship\n      // between two nodes\n      const dupEdge = useMemo(() => {\n        if (source === undefined || source.type === \"class\") return false;\n        if (target === undefined || target.type === \"class\") return false;\n        return (\n          sm.graph.hasEdge(source.id, target.id) &&\n          (edge === undefined ||\n            source.id !== edge.source ||\n            target.id !== edge.target)\n        );\n      }, [sm.graph.version, source?.id, target?.id]);\n\n      useEffect(() => {\n        if (edge === undefined) return;\n        if (propertyStore.getPropertyByURI(edge.uri) !== undefined) return;\n\n        propertyStore.fetchOne({ conditions: { uri: edge.uri } });\n      }, [propertyStore, edge, uri]);\n\n      const onSave = () => {\n        if (uri === undefined || source === undefined || target === undefined)\n          return;\n        if (dupEdge) return;\n\n        const prop = propertyStore.getPropertyByURI(uri)!;\n        let sourceId, targetId;\n\n        if (source.type === \"class\") {\n          const cls = classStore.get(source.id)!;\n          sourceId = sm.graph.nextNodeId();\n          sm.graph.addClassNode({\n            id: sourceId,\n            uri: cls.uri,\n            label: cls.readableLabel,\n            approximation: false,\n            nodetype: \"class_node\",\n          });\n        } else {\n          sourceId = source.id;\n        }\n\n        if (target.type === \"class\") {\n          const cls = classStore.get(target.id)!;\n          targetId = sm.graph.nextNodeId();\n          sm.graph.addClassNode({\n            id: targetId,\n            uri: cls.uri,\n            label: cls.readableLabel,\n            approximation: false,\n            nodetype: \"class_node\",\n          });\n        } else {\n          targetId = target.id;\n        }\n\n        const newEdge = {\n          source: sourceId,\n          target: targetId,\n          uri: prop.uri,\n          approximation,\n          label: prop.readableLabel,\n        };\n        if (edge !== undefined) {\n          if (edge.source === sourceId && edge.target === targetId) {\n            sm.graph.updateEdge(edge.source, edge.target, newEdge);\n          } else {\n            sm.graph.removeEdge(edge.source, edge.target);\n            sm.graph.addEdge(newEdge);\n          }\n        } else {\n          sm.graph.addEdge(newEdge);\n        }\n\n        Modal.destroyAll();\n      };\n\n      const onDelete = () => {\n        if (edge === undefined) return;\n        sm.graph.removeEdge(edge.source, edge.target);\n        Modal.destroyAll();\n      };\n\n      const isModified = () => {\n        return (\n          edge === undefined ||\n          source?.id !== edge.source ||\n          target?.id !== edge.target ||\n          uri !== edge.uri ||\n          approximation !== edge.approximation\n        );\n      };\n\n      return (\n        <Form\n          labelCol={{ span: 6 }}\n          wrapperCol={{ span: 18 }}\n          labelWrap={true}\n          layout=\"horizontal\"\n        >\n          <Form.Item\n            label={\n              <Typography.Text\n                copyable={\n                  source !== undefined ? { text: source.id } : undefined\n                }\n              >\n                Source\n              </Typography.Text>\n            }\n            validateStatus={dupEdge ? \"error\" : undefined}\n            help={\n              dupEdge\n                ? \"Cannot have more than one edge between two nodes\"\n                : undefined\n            }\n          >\n            <NodeSearchComponent\n              sm={sm}\n              value={source}\n              onSelect={setSource}\n              onDeselect={() => setSource(undefined)}\n            />\n          </Form.Item>\n          <Form.Item\n            label={\n              <Typography.Text\n                copyable={\n                  target !== undefined ? { text: target.id } : undefined\n                }\n              >\n                Target\n              </Typography.Text>\n            }\n          >\n            <NodeSearchComponent\n              sm={sm}\n              value={target}\n              onSelect={setTarget}\n              onDeselect={() => setTarget(undefined)}\n            />\n          </Form.Item>\n          <Form.Item\n            label={\n              <Typography.Text\n                copyable={\n                  uri !== undefined\n                    ? { text: propertyStore.getPropertyByURI(uri)?.id }\n                    : undefined\n                }\n              >\n                Predicate\n              </Typography.Text>\n            }\n          >\n            <OntPropSearchComponent\n              value={\n                uri !== undefined\n                  ? propertyStore.getPropertyByURI(uri)?.id\n                  : undefined\n              }\n              onSelect={(id) => setURI(propertyStore.get(id)?.uri)}\n              onDeselect={(value) => setURI(undefined)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Approximation\">\n            <Switch\n              checked={approximation}\n              onChange={(val) => setApproximation(val)}\n            />\n          </Form.Item>\n          <Form.Item label=\"&nbsp;\" colon={false}>\n            <Space>\n              <Button\n                type=\"primary\"\n                onClick={onSave}\n                disabled={\n                  source === undefined ||\n                  target === undefined ||\n                  uri === undefined ||\n                  !isModified() ||\n                  dupEdge\n                }\n              >\n                Save\n              </Button>\n              {edge !== undefined ? (\n                <Button type=\"primary\" danger={true} onClick={onDelete}>\n                  delete\n                </Button>\n              ) : null}\n            </Space>\n          </Form.Item>\n        </Form>\n      );\n    }\n  )\n);\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Button, Form, Modal, Radio, Space, Switch, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useStores } from \"../../../models\";\nimport {\n  ClassNode,\n  DataNode,\n  LiteralNode,\n  SemanticModel,\n  SMEdge,\n  SMNode,\n  SMNodeType,\n} from \"../../../models/sm\";\nimport { NodeSearchComponent, SearchValue } from \"../NodeSearchComponent\";\nimport {\n  EntitySearchComponent,\n  OntClassSearchComponent,\n  OntPropSearchComponent,\n} from \"../OntSearchComponent\";\n\nconst styles = {} as const;\n\nexport interface NodeFormProps {\n  sm: SemanticModel;\n  node?: SMNode;\n}\n\n/**\n * Form for adding/editing a node in the graph. There are two cases:\n *\n * 1. Create new node -- when node is undefined\n * 2. Delete or update existing node data without modifying its edges -- when the node is provided\n */\nexport const ClassNodeSubForm = observer(\n  (props: { sm: SemanticModel; node?: ClassNode; onDone: () => void }) => {\n    const { classStore } = useStores();\n    const [uri, setURI] = useState<string | undefined>(props.node?.uri);\n    const [approximation, setApproximation] = useState(\n      props.node?.approximation || false\n    );\n\n    // fetch class id associated with the node uri\n    useEffect(() => {\n      if (props.node === undefined) return;\n      classStore.fetchIfMissingByURI(props.node.uri);\n    }, [props.node?.uri]);\n\n    const onSave = () => {\n      if (uri === undefined) return;\n\n      if (props.node === undefined) {\n        // always create a new node\n        props.sm.graph.addClassNode({\n          id: props.sm.graph.nextNodeId(),\n          uri: uri,\n          label: classStore.getClassByURI(uri)!.readableLabel,\n          nodetype: \"class_node\",\n          approximation: approximation,\n        });\n      } else {\n        // we update existing node, it can be\n        props.sm.graph.updateClassNode(props.node.id, {\n          uri: uri,\n          label: classStore.getClassByURI(uri)!.readableLabel,\n          approximation: approximation,\n        });\n      }\n\n      props.onDone();\n    };\n\n    const onDelete = () => {\n      props.sm.graph.removeNode(props.node!.id);\n      props.onDone();\n    };\n\n    const isModified = () => {\n      return (\n        props.node === undefined ||\n        props.node.uri !== uri ||\n        props.node.approximation !== approximation\n      );\n    };\n\n    return (\n      <>\n        <Form.Item\n          label={\n            <Typography.Text\n              copyable={\n                uri !== undefined\n                  ? {\n                      text: classStore.getClassByURI(uri)?.id,\n                    }\n                  : undefined\n              }\n            >\n              Class\n            </Typography.Text>\n          }\n        >\n          <OntClassSearchComponent\n            value={\n              uri !== undefined ? classStore.getClassByURI(uri)?.id : undefined\n            }\n            onSelect={(id) => setURI(classStore.get(id)?.uri)}\n            onDeselect={() => setURI(undefined)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Approximation\">\n          <Switch\n            checked={approximation}\n            onChange={(val) => setApproximation(val)}\n          />\n        </Form.Item>\n        <Form.Item label=\"&nbsp;\" colon={false}>\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={onSave}\n              disabled={uri === undefined || !isModified()}\n            >\n              Save\n            </Button>\n            {props.node !== undefined ? (\n              <Button type=\"primary\" danger={true} onClick={onDelete}>\n                delete\n              </Button>\n            ) : null}\n          </Space>\n        </Form.Item>\n      </>\n    );\n  }\n);\n\nexport const LiteralNodeSubForm = observer(\n  (props: { sm: SemanticModel; node?: LiteralNode; onDone: () => void }) => {\n    const { entityStore } = useStores();\n    const [id, setId] = useState<string | undefined>(\n      props.node?.value?.type === \"entity-id\" ? props.node.value.id : undefined\n    );\n    const [isInContext, setIsInContext] = useState(\n      props.node !== undefined && props.node.nodetype === \"literal_node\"\n        ? props.node.isInContext\n        : false\n    );\n\n    const duplicatedId = useMemo(\n      () =>\n        id !== undefined &&\n        ((props.node === undefined &&\n          props.sm.graph.nodeByEntityId(id) !== undefined) ||\n          (props.node !== undefined &&\n            props.sm.graph.nodeByEntityId(id)?.id !== props.node.id)),\n      [props.sm.graph.version, id]\n    );\n\n    if (props.node !== undefined && props.node.value.type === \"string\") {\n      return <div>Not Implemented Yet</div>;\n    }\n\n    const onSave = () => {\n      if (id === undefined) return;\n      if (duplicatedId) return;\n\n      const ent = entityStore.get(id)!;\n\n      if (props.node === undefined) {\n        // always create a new node\n        props.sm.graph.addLiteralNode({\n          id: props.sm.graph.nextNodeId(),\n          value: {\n            type: \"entity-id\",\n            id: id,\n            uri: ent.uri,\n          },\n          label: ent.readableLabel,\n          nodetype: \"literal_node\",\n          isInContext: isInContext,\n        });\n      } else {\n        // we update existing node, it can be\n        props.sm.graph.updateLiteralNode(props.node.id, {\n          value: {\n            type: \"entity-id\",\n            id: id,\n            uri: ent.uri,\n          },\n          label: ent.readableLabel,\n          nodetype: \"literal_node\",\n          isInContext: isInContext,\n        });\n      }\n\n      props.onDone();\n    };\n\n    const onDelete = () => {\n      props.sm.graph.removeNode(props.node!.id);\n      props.onDone();\n    };\n\n    const isModified = () => {\n      return (\n        props.node === undefined ||\n        props.node.isInContext !== isInContext ||\n        (props.node.value.type === \"entity-id\" && props.node.value.id !== id)\n      );\n    };\n\n    return (\n      <>\n        <Form.Item\n          label={\n            <Typography.Text\n              copyable={id !== undefined ? { text: id } : undefined}\n            >\n              Entity\n            </Typography.Text>\n          }\n          validateStatus={duplicatedId ? \"error\" : undefined}\n          help={duplicatedId ? \"Entity's already in the graph\" : undefined}\n        >\n          <EntitySearchComponent\n            value={id}\n            onSelect={setId}\n            onDeselect={() => setId(undefined)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Is In Context?\">\n          <Switch\n            checked={isInContext}\n            onChange={(val) => setIsInContext(val)}\n          />\n        </Form.Item>\n        <Form.Item label=\"&nbsp;\" colon={false}>\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={onSave}\n              disabled={id === undefined || duplicatedId || !isModified()}\n            >\n              Save\n            </Button>\n            {props.node !== undefined ? (\n              <Button type=\"primary\" danger={true} onClick={onDelete}>\n                delete\n              </Button>\n            ) : null}\n          </Space>\n        </Form.Item>\n      </>\n    );\n  }\n);\n\nexport const DataNodeSubForm = observer(\n  ({\n    sm,\n    node,\n    inedge,\n    onDone,\n  }: {\n    sm: SemanticModel;\n    node: DataNode;\n    inedge?: SMEdge;\n    onDone: () => void;\n  }) => {\n    const { classStore, propertyStore } = useStores();\n    const [source, setSource] = useState<SearchValue | undefined>(\n      inedge !== undefined\n        ? {\n            type: sm.graph.node(inedge.source).nodetype,\n            id: inedge.source,\n          }\n        : undefined\n    );\n    const [uri, setURI] = useState<string | undefined>(inedge?.uri);\n    const [approximation, setApproximation] = useState(false);\n\n    const onSave = () => {\n      if (source === undefined || uri === undefined) return;\n\n      const prop = propertyStore.getPropertyByURI(uri)!;\n      let sourceId;\n\n      if (source.type === \"class\") {\n        const cls = classStore.get(source.id)!;\n        sourceId = sm.graph.nextNodeId();\n        sm.graph.addClassNode({\n          id: sourceId,\n          uri: cls.uri,\n          label: cls.readableLabel,\n          approximation: false,\n          nodetype: \"class_node\",\n        });\n      } else {\n        sourceId = source.id;\n      }\n\n      const newEdge = {\n        source: sourceId,\n        target: node.id,\n        uri: prop.uri,\n        approximation,\n        label: prop.readableLabel,\n      };\n      if (inedge !== undefined) {\n        if (inedge.source === sourceId) {\n          sm.graph.updateEdge(inedge.source, inedge.target, newEdge);\n        } else {\n          sm.graph.removeEdge(inedge.source, inedge.target);\n          sm.graph.addEdge(newEdge);\n        }\n      } else {\n        sm.graph.addEdge(newEdge);\n      }\n      onDone();\n    };\n\n    const isModified = () => {\n      return (\n        source?.id !== inedge?.source ||\n        uri !== inedge?.uri ||\n        approximation !== inedge?.approximation\n      );\n    };\n\n    const onDelete = () => {\n      if (inedge === undefined) return;\n      sm.graph.removeEdge(inedge.source, inedge.target);\n      onDone();\n    };\n\n    return (\n      <>\n        <Form.Item\n          label={\n            <Typography.Text\n              copyable={source !== undefined ? { text: source.id } : undefined}\n            >\n              Source\n            </Typography.Text>\n          }\n        >\n          <NodeSearchComponent\n            sm={sm}\n            value={source}\n            onSelect={setSource}\n            onDeselect={() => setSource(undefined)}\n          />\n        </Form.Item>\n        <Form.Item\n          label={\n            <Typography.Text\n              copyable={\n                uri !== undefined\n                  ? { text: propertyStore.getPropertyByURI(uri)?.id }\n                  : undefined\n              }\n            >\n              Predicate\n            </Typography.Text>\n          }\n        >\n          <OntPropSearchComponent\n            value={\n              uri !== undefined\n                ? propertyStore.getPropertyByURI(uri)?.id\n                : undefined\n            }\n            onSelect={(id) => setURI(propertyStore.get(id)?.uri)}\n            onDeselect={(value) => setURI(undefined)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Target\">\n          <Typography.Text>\n            {node.label} ({node.columnIndex})\n          </Typography.Text>\n        </Form.Item>\n        <Form.Item label=\"Approximation\">\n          <Switch\n            checked={approximation}\n            onChange={(val) => setApproximation(val)}\n          />\n        </Form.Item>\n        <Form.Item label=\"&nbsp;\" colon={false}>\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={onSave}\n              disabled={\n                source === undefined || uri === undefined || !isModified()\n              }\n            >\n              Save\n            </Button>\n            {inedge !== undefined ? (\n              <Button type=\"primary\" danger={true} onClick={onDelete}>\n                delete\n              </Button>\n            ) : null}\n          </Space>\n        </Form.Item>\n      </>\n    );\n  }\n);\n\nexport const NodeForm = withStyles(styles)(\n  observer(\n    ({ sm, node, classes }: NodeFormProps & WithStyles<typeof styles>) => {\n      const [nodetype, setNodeType] = useState<SMNodeType>(\n        node?.nodetype || \"class_node\"\n      );\n      const onDone = () => Modal.destroyAll();\n\n      if (node !== undefined && node.nodetype === \"data_node\") {\n        if (sm.graph.incomingEdges(node.id).length > 1) {\n          return (\n            <p>\n              This form can't be used for data node that has more than one\n              incoming edge. Please click on individual edge and edit it there\n            </p>\n          );\n        }\n      }\n\n      return (\n        <Form\n          labelCol={{ span: 6 }}\n          wrapperCol={{ span: 18 }}\n          labelWrap={true}\n          layout=\"horizontal\"\n        >\n          {node === undefined ? (\n            <Form.Item label=\"Node Type\">\n              <Radio.Group\n                value={nodetype}\n                onChange={(event) => setNodeType(event.target.value)}\n                buttonStyle=\"solid\"\n              >\n                <Radio.Button value=\"class_node\">Class Node</Radio.Button>\n                <Radio.Button value=\"literal_node\">Literal Node</Radio.Button>\n              </Radio.Group>\n            </Form.Item>\n          ) : null}\n          {nodetype === \"class_node\" ? (\n            <ClassNodeSubForm\n              sm={sm}\n              node={node?.nodetype === \"class_node\" ? node : undefined}\n              onDone={onDone}\n            />\n          ) : nodetype === \"literal_node\" ? (\n            <LiteralNodeSubForm\n              sm={sm}\n              node={node?.nodetype === \"literal_node\" ? node : undefined}\n              onDone={onDone}\n            />\n          ) : (\n            <DataNodeSubForm\n              sm={sm}\n              node={node as DataNode}\n              inedge={sm.graph.incomingEdges(node!.id)[0]}\n              onDone={onDone}\n            />\n          )}\n        </Form>\n      );\n    }\n  )\n);\n","import { Modal } from \"antd\";\nimport { EdgeForm, EdgeFormProps } from \"./EdgeForm\";\nimport { NodeForm, NodeFormProps } from \"./NodeForm\";\n\ninterface TypedEdgeFormProps extends EdgeFormProps {\n  type: \"edge\";\n}\n\ninterface TypedNodeFormProps extends NodeFormProps {\n  type: \"node\";\n}\n\nexport function openForm(\n  args: TypedEdgeFormProps | TypedNodeFormProps,\n  zIndex?: number\n) {\n  let title;\n  let content;\n  switch (args.type) {\n    case \"edge\":\n      content = <EdgeForm {...args} />;\n      title = args.edge === undefined ? \"Add Edge\" : \"Update Edge\";\n      break;\n    case \"node\":\n      content = <NodeForm {...args} />;\n      title = args.node === undefined ? \"Add Node\" : \"Update Node\";\n      break;\n  }\n\n  Modal.info({\n    title: (\n      <span style={{ marginBottom: 16, display: \"inline-block\" }}>{title}</span>\n    ),\n    content,\n    bodyStyle: { margin: -8 },\n    okButtonProps: { style: { display: \"none\" } },\n    maskClosable: true,\n    mask: true,\n    zIndex: zIndex,\n    width: \"calc(100% - 128px)\",\n    style: { top: 64 },\n  });\n}\n","import {\n  DeleteOutlined,\n  DownOutlined,\n  ExportOutlined,\n  FileAddOutlined,\n  ImportOutlined,\n  SaveOutlined,\n} from \"@ant-design/icons\";\nimport {\n  faFloppyDisk,\n  faRectangleList,\n} from \"@fortawesome/free-regular-svg-icons\";\nimport { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, Dropdown, Menu, Popconfirm, Space, Tag } from \"antd\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport React, { useState } from \"react\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport {\n  DraftSemanticModel,\n  SemanticModel,\n  Table,\n  useStores,\n} from \"../../models\";\nimport { routes } from \"../../routes\";\nimport { openForm } from \"./forms\";\nimport { SemanticModelComponentFunc } from \"./SemanticModelComponent\";\nimport { TableComponentFunc } from \"./table/TableComponent\";\n\nexport const MenuBar = observer(\n  ({\n    tableRef,\n    graphRef,\n    table,\n    semanticmodel,\n  }: {\n    table: Table;\n    semanticmodel: {\n      sms: SemanticModel[];\n      index: number;\n      setIndex: (index: number) => void;\n    };\n    tableRef: React.MutableRefObject<TableComponentFunc | null>;\n    graphRef: React.MutableRefObject<SemanticModelComponentFunc | null>;\n  }) => {\n    const [menuVisible, setMenuVisible] = useState(false);\n    const { semanticModelStore, assistantService, uiSettings } = useStores();\n\n    useHotkeys(\n      \"c\",\n      graphRef.current === null ? () => {} : graphRef.current.recenter,\n      [graphRef.current, smUniqueIdent(semanticmodel.sms[semanticmodel.index])]\n    );\n\n    {\n      const lstSmsKey = semanticmodel.sms.map(smUniqueIdent).join(\"---\");\n      useHotkeys(\n        \"shift+n\",\n        () => {\n          if (semanticmodel.index < semanticmodel.sms.length - 1) {\n            semanticmodel.setIndex(semanticmodel.index + 1);\n          }\n        },\n        [table.id, semanticmodel.index, lstSmsKey]\n      );\n      useHotkeys(\n        \"shift+b\",\n        () => {\n          if (semanticmodel.index > 0) {\n            semanticmodel.setIndex(semanticmodel.index - 1);\n          }\n        },\n        [table.id, semanticmodel.index, lstSmsKey]\n      );\n    }\n\n    const sm = semanticmodel.sms[semanticmodel.index];\n\n    const funcs = {\n      saveModel: () => {\n        if (SemanticModel.isDraft(sm)) {\n          semanticModelStore.create(sm);\n        } else if (sm.graph.stale) {\n          semanticModelStore.update(sm);\n        }\n      },\n      addModel: () => {\n        const id = semanticModelStore.getNewCreateDraftId(table);\n        const nSms = semanticmodel.sms.length;\n        const draft = DraftSemanticModel.getDefaultDraftSemanticModel(\n          id,\n          semanticModelStore.getNewSemanticModelName(table),\n          table\n        );\n        draft.graph = sm.graph.clone();\n        draft.graph.id = id;\n        semanticModelStore.setCreateDraft(draft);\n        semanticmodel.setIndex(nSms);\n      },\n      deleteModel: () => {\n        if (SemanticModel.isDraft(sm)) {\n          semanticModelStore.deleteCreateDraft(sm.draftID);\n        } else {\n          semanticModelStore.delete(sm.id);\n        }\n        semanticmodel.setIndex(0);\n        setMenuVisible(false);\n      },\n      exportModel: () => {\n        routes.tableExportModel\n          .path({ tableId: table.id }, { attachment: false })\n          .mouseClickNavigationHandler(undefined, true);\n      },\n      exportData: () => {\n        routes.tableExportData\n          .path({ tableId: table.id }, { attachment: false })\n          .mouseClickNavigationHandler(undefined, true);\n      },\n      openAddNodeForm: () => {\n        openForm({ type: \"node\", sm });\n      },\n      openAddEdgeForm: () => openForm({ type: \"edge\", sm }),\n      predict: () => {\n        assistantService.predict(table).then(() => {\n          tableRef.current?.reload();\n          uiSettings.table.enableEntityLinkingEditor();\n        });\n      },\n    };\n\n    const menu = (\n      <Menu\n        onClick={(event) => {\n          if (!event.key.startsWith(\"manual-close\")) {\n            setMenuVisible(false);\n          }\n        }}\n      >\n        <Menu.ItemGroup key=\"group-sm\" title=\"Semantic Descriptions\">\n          {semanticmodel.sms.length > 1 ? (\n            <Menu.SubMenu\n              key=\"list-model\"\n              title=\"List models\"\n              icon={<FontAwesomeIcon icon={faFloppyDisk} />}\n            >\n              {semanticmodel.sms.map((sm, index) => {\n                return (\n                  <Menu.Item\n                    key={`sm-${sm.name}`}\n                    onClick={() => semanticmodel.setIndex(index)}\n                    style={{\n                      fontWeight:\n                        index === semanticmodel.index ? \"bold\" : undefined,\n                    }}\n                  >\n                    {SemanticModel.isDraft(sm) ? (\n                      <Tag color=\"orange\">draft</Tag>\n                    ) : sm.graph.stale ? (\n                      <Tag color=\"orange\">unsaved</Tag>\n                    ) : null}\n                    {sm.name}\n                  </Menu.Item>\n                );\n              })}\n            </Menu.SubMenu>\n          ) : null}\n          <Menu.Item\n            key=\"save-model\"\n            disabled={!SemanticModel.isDraft(sm) && !sm.graph.stale}\n            icon={<SaveOutlined />}\n            onClick={funcs.saveModel}\n          >\n            Save current model\n          </Menu.Item>\n          <Menu.Item\n            key=\"add-model\"\n            onClick={funcs.addModel}\n            icon={<FileAddOutlined />}\n          >\n            Add new model\n          </Menu.Item>\n          <Menu.Item\n            key=\"manual-close-0\"\n            danger={true}\n            icon={<DeleteOutlined />}\n          >\n            <Popconfirm\n              title=\"Are you sure to delete this semantic description?\"\n              onConfirm={funcs.deleteModel}\n              onCancel={() => setMenuVisible(false)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              Delete current model\n            </Popconfirm>\n          </Menu.Item>\n          <Menu.Item\n            key=\"import-model\"\n            disabled={true}\n            icon={<ImportOutlined />}\n          >\n            Import models\n          </Menu.Item>\n          <Menu.Item\n            key=\"export-model\"\n            onClick={funcs.exportModel}\n            icon={<ExportOutlined />}\n          >\n            Export models\n          </Menu.Item>\n        </Menu.ItemGroup>\n        <Menu.Divider />\n        <Menu.Item\n          key=\"enable-el-editor\"\n          icon={<FontAwesomeIcon icon={faRectangleList} />}\n          onClick={uiSettings.table.toggleEntityLinkingEditor}\n        >\n          Toggle Entity Linking Editor\n        </Menu.Item>\n        <Menu.Item\n          key=\"export-data\"\n          icon={<FontAwesomeIcon icon={faDownload} />}\n          onClick={funcs.exportData}\n        >\n          Export data\n        </Menu.Item>\n      </Menu>\n    );\n\n    return (\n      <>\n        <Space key=\"space-1\" style={{ float: \"right\" }}>\n          {graphRef.current === undefined ? null : (\n            <Tag\n              color={\n                SemanticModel.isDraft(sm) || sm.graph.stale ? \"orange\" : \"green\"\n              }\n              style={{ marginRight: 0, cursor: \"pointer\" }}\n              onClick={funcs.saveModel}\n            >\n              Status:{\" \"}\n              {SemanticModel.isDraft(sm)\n                ? \"Draft\"\n                : sm.graph.stale\n                ? \"Changed\"\n                : \"Saved\"}\n              {semanticmodel.sms.length > 1 ? ` (${sm.name})` : \"\"}\n            </Tag>\n          )}\n          {uiSettings.table.showEntityLinkingEditor ? (\n            <Tag\n              color={\"geekblue\"}\n              style={{ marginRight: 0, cursor: \"pointer\" }}\n              onClick={uiSettings.table.toggleEntityLinkingEditor}\n            >\n              Editing Entity Linking\n            </Tag>\n          ) : null}\n        </Space>\n        <Space key=\"space-2\">\n          <Button size=\"small\" onClick={graphRef.current?.recenter}>\n            Center graph (C)\n          </Button>\n          <Button size=\"small\" onClick={funcs.openAddNodeForm}>\n            Add node\n          </Button>\n          <Button size=\"small\" onClick={funcs.openAddEdgeForm}>\n            Add edge\n          </Button>\n          <Button size=\"small\" onClick={funcs.predict}>\n            Predict\n          </Button>\n          <Dropdown\n            overlay={menu}\n            onVisibleChange={setMenuVisible}\n            visible={menuVisible}\n          >\n            <Button size=\"small\">\n              More <DownOutlined />\n            </Button>\n          </Dropdown>\n        </Space>\n      </>\n    );\n  }\n);\n\nfunction smUniqueIdent(sm: SemanticModel) {\n  return SemanticModel.isDraft(sm) ? sm.draftID : sm.id;\n}\n","import { WordWrap } from \"./wordwrap\";\nimport G6, {\n  ModelConfig,\n  ShapeStyle,\n  IGroup,\n  IShape,\n  LabelStyle,\n} from \"@antv/g6\";\nimport { ParagraphRenderedUnit } from \"./wordwrap/model\";\n\n/** Draw paragraph */\nexport function drawText(\n  group: IGroup,\n  wordwrap: WordWrap,\n  units: ParagraphRenderedUnit[],\n  {\n    xoffset,\n    yoffset,\n    cfg,\n    stroke,\n  }: {\n    xoffset?: number;\n    yoffset?: number;\n    cfg?: LabelStyle;\n    // whether to draw a small border around the text for better visibility\n    stroke?: { width: number; color: string };\n  }\n): IShape[] {\n  xoffset = xoffset === undefined ? 0 : xoffset;\n  yoffset = yoffset === undefined ? 0 : yoffset;\n\n  if (stroke !== undefined) {\n    units.map(({ text, x, y }) => {\n      group!.addShape(\"text\", {\n        attrs: {\n          text,\n          x: x + xoffset!,\n          y: y + yoffset!,\n          fontFamily: wordwrap.fontFamily,\n          ...cfg,\n          // override the three important styles to draw a border around the text\n          fill: stroke.color,\n          stroke: stroke.color,\n          lineWidth: stroke.width,\n        },\n        name: \"bg-text\",\n        draggable: true,\n      });\n    });\n  }\n\n  return units.map(({ text, x, y }) => {\n    return group!.addShape(\"text\", {\n      attrs: {\n        text,\n        fill: \"black\",\n        x: x + xoffset!,\n        y: y + yoffset!,\n        fontFamily: wordwrap.fontFamily,\n        ...cfg,\n      },\n      name: \"text\",\n      draggable: true,\n    });\n  });\n}\n\n/**\n * Type of each rect node.\n */\nexport interface RectConfig extends ModelConfig {\n  label: string;\n  // width of the rectangle\n  size: number;\n  style: ShapeStyle & {\n    // padding\n    paddingHeight?: number;\n    paddingWidth?: number;\n  };\n  labelCfg?: { style: LabelStyle };\n}\n\nexport function registerRectNode(wordwrap: WordWrap) {\n  const defaultWidth = wordwrap.getApproximateWidth(4);\n  // TODO: fix x and y as well as position of the text\n  const draw = (cfg: RectConfig, group: IGroup): IShape => {\n    const wp = cfg.style.paddingWidth || 0;\n    const hp = cfg.style.paddingHeight || 0;\n    const { units, width, height } = wordwrap.wrapText(\n      cfg.label,\n      cfg.size || defaultWidth,\n      \"center\"\n    );\n\n    // draw shape\n    const shape = group!.addShape(\"rect\", {\n      attrs: {\n        // x,\n        // y,\n        width: width + wp * 2,\n        height: height + hp * 2,\n        ...cfg.style,\n      },\n      name: \"rect\",\n    });\n\n    // draw text\n    drawText(group, wordwrap, units, {\n      xoffset: wp,\n      yoffset: hp,\n      cfg: cfg.labelCfg?.style,\n    });\n    return shape;\n  };\n\n  G6.registerNode(\n    \"rect-wrap\",\n    {\n      draw: (cfg?: ModelConfig, group?: IGroup) => {\n        return draw(cfg! as RectConfig, group!);\n      },\n\n      // call everything state is changed so we can update the shape\n      // currently clear and re-draw it, but we could do better\n      setState(name, value, node) {\n        const cfg = node!._cfg!;\n        const model = cfg.model!;\n        const states = cfg.states!;\n        let styles: any = {};\n        let labelStyles = { ...model.labelCfg?.style };\n\n        for (const [name, prop] of Object.entries(model.style!)) {\n          if (typeof prop === \"object\") {\n            continue;\n          }\n          styles[name] = prop;\n        }\n        for (const state of states) {\n          for (const [name, prop] of Object.entries(\n            cfg.styles![state] as object\n          )) {\n            if (name === \"label\") {\n              Object.assign(labelStyles, prop);\n            } else {\n              styles[name] = prop;\n            }\n          }\n        }\n\n        const group = cfg.group!;\n        group.clear();\n        draw(\n          {\n            label: model.label as string,\n            size: model.size as number,\n            style: styles,\n            labelCfg: { style: labelStyles },\n          },\n          group\n        );\n      },\n    },\n    \"single-node\"\n  );\n\n  return wordwrap;\n}\n","import G6, {\n  IGroup,\n  ILabelConfig,\n  IShape,\n  LabelStyle,\n  ModelConfig,\n  ShapeStyle,\n} from \"@antv/g6\";\nimport { drawText } from \"./RectNode\";\nimport { WordWrap } from \"./wordwrap\";\n\n/**\n * Type of each circle node.\n */\nexport interface CircleConfig {\n  label: string;\n  style: ShapeStyle & {\n    padding?: number;\n    paddingWidth?: number;\n    paddingHeight?: number;\n  };\n  labelCfg?: { offset: number; style: LabelStyle };\n}\n\nexport function registerCircleNode(wordwrap: WordWrap) {\n  const defaultWidth = wordwrap.getApproximateWidth(4);\n\n  const draw = (cfg: CircleConfig, group: IGroup): IShape => {\n    const padding = cfg.style.padding || 8;\n    const labelPosition: string = \"below\";\n    const labelOffset = cfg.labelCfg?.offset || 0;\n\n    if (labelPosition === \"inside\") {\n      // render text inside circle\n      const { units, radius } = wordwrap.wrapTextCircle(cfg.label, 256);\n      const shape = group!.addShape(\"circle\", {\n        attrs: {\n          // x: cfg.x,\n          // y: cfg.y,\n          r: radius + padding,\n          ...cfg.style,\n        },\n        name: \"circle\",\n      });\n      drawText(group, wordwrap, units, {\n        xoffset: 0,\n        yoffset: 0,\n        cfg: cfg.labelCfg?.style,\n      });\n      return shape;\n    }\n\n    // render text below circle\n    const { units, width } = wordwrap.wrapText(\n      cfg.label as string,\n      defaultWidth,\n      \"center\"\n    );\n    const defaultRadius = 10;\n    const shape = group!.addShape(\"circle\", {\n      attrs: {\n        // x: cfg.x,\n        // y: cfg.y,\n        r: defaultRadius,\n        ...cfg.style,\n      },\n      name: \"circle\",\n    });\n\n    drawText(group, wordwrap, units, {\n      xoffset: -width / 2,\n      yoffset: defaultRadius + labelOffset,\n      cfg: cfg?.labelCfg?.style,\n      stroke: { color: \"white\", width: 4 },\n    });\n    return shape;\n  };\n\n  G6.registerNode(\n    \"circle-wrap\",\n    {\n      draw: (cfg?: ModelConfig, group?: IGroup): IShape => {\n        return draw(cfg! as CircleConfig, group!);\n      },\n    },\n    \"single-node\"\n  );\n\n  return wordwrap;\n}\n","import { Paragraph, ParagraphUnit } from \"./model\";\n\nconst cacheFn = <F extends (...args: any) => any>(\n  fn: F,\n  cache: { [key: string]: ReturnType<F> }\n): F => {\n  return ((...args: any) => {\n    const key = args.join(\":\");\n    if (cache[key] === undefined) {\n      cache[key] = fn(...args);\n    }\n    return cache[key];\n  }) as unknown as F;\n};\n\n/**\n * Optimize paragraph to fit lines.\n *\n * Using a score function similar to Knuth-Plass algorithm. Differences:\n * 1. badness of a line is change to <adjustment_ratio>^3, not 100 * <adjustment_ratio>^3 to avoid\n *    making a number too big\n * 2. the ability to brea, super long word (no glue). the <adjustment_ratio> is undefined in Knuth-Plass algorithm, making\n *    badness becomes infinity. Hence, the algorithm avoids breaking it at all cost. We set the glue size to be 0.1 so that\n *    the badness is finite.\n */\nexport class ParagraphOptimizer {\n  protected paragraph: ParagraphUnit[];\n  protected getDesiredLineLength: (i: number) => number;\n  protected cacheLineLengths: { [key: string]: number } = {};\n  protected cacheLineDemerits: { [key: string]: number } = {};\n  protected cacheParagraphDemerits: { [key: string]: number } = {};\n  protected cacheParagraphBreakpoints: {\n    [key: string]: { breakpoints: number[]; demerits: number };\n  } = {};\n\n  constructor(paragraph: Paragraph) {\n    this.paragraph = paragraph.units.map((item) => {\n      item = Object.assign({}, item);\n      item.width = item.width / 16;\n      if (item.type === \"glue\") {\n        item.stretch = item.stretch / 16;\n        item.shrink = item.shrink / 16;\n      }\n      return item;\n    });\n    this.getDesiredLineLength = (i: number) => paragraph.getLineLength(i) / 16;\n  }\n\n  /**\n   * Optimize a paragraph by minimizing a score (demerits) similar to the one defined by Knuth-Plass algorithm\n   *\n   * Example: optimize returns breakpoints [4, 8] meaning it creates 3 lines:\n   * [0, 4], [5, 8], [9, <paragraph.length - 1>]\n   *\n   * @see this.optimizeParagraph for more information\n   */\n  optimize = () => {\n    return this.optimizeParagraph(0, this.paragraph.length - 1, 0);\n  };\n\n  /**\n   * Optimize a (sub) paragraph from [start, end] (inclusive) by minimizing the predefined score\n   *\n   * Example: optimizeParagraph(0, 15, 0) returns breakpoints [4, 8] meaning it creates 3 lines:\n   * [0, 4], [5, 8], [9, 15]\n   *\n   * @param start\n   * @param end (inclusive)\n   * @param nPreviousLines the number of lines of previous paragraphs\n   *\n   * @returns breakpoints & the score (demerits)\n   */\n  optimizeParagraph = cacheFn(\n    (\n      start: number,\n      end: number,\n      nPreviousLines: number\n    ): { breakpoints: number[]; demerits: number } => {\n      const lineAdjustment = this.computeLineAdjustment(\n        start,\n        end,\n        nPreviousLines // base 0\n      );\n      if (lineAdjustment !== undefined && lineAdjustment >= 0) {\n        // this paragraph can fit in a whole line -- no need to break it up\n        return {\n          breakpoints: [],\n          demerits: this.computeLineDemerits(start, end, nPreviousLines),\n        };\n      }\n\n      const optimalSplit = {\n        caret: -1,\n        demerits: Infinity,\n        breakpoints: [] as number[],\n      };\n\n      // work incrementally from right to left -- but only consider breaking points\n      for (let caret = end - 1; caret > start; caret--) {\n        if (this.paragraph[caret].type === \"box\") continue;\n\n        const prevParagraphBreakpoints = this.optimizeParagraph(\n          start,\n          caret,\n          nPreviousLines\n        );\n        const nextParagraphBreakpoints = this.optimizeParagraph(\n          caret + 1,\n          end,\n          nPreviousLines +\n            (prevParagraphBreakpoints.breakpoints.length > 0\n              ? prevParagraphBreakpoints.breakpoints.length + 1\n              : 0)\n        );\n\n        if (\n          prevParagraphBreakpoints.demerits +\n            nextParagraphBreakpoints.demerits <\n          optimalSplit.demerits\n        ) {\n          optimalSplit.caret = caret;\n          optimalSplit.demerits =\n            prevParagraphBreakpoints.demerits +\n            nextParagraphBreakpoints.demerits;\n          optimalSplit.breakpoints =\n            prevParagraphBreakpoints.breakpoints.slice();\n          optimalSplit.breakpoints.push(caret);\n          optimalSplit.breakpoints = optimalSplit.breakpoints.concat(\n            nextParagraphBreakpoints.breakpoints\n          );\n        }\n      }\n\n      return {\n        breakpoints: optimalSplit.breakpoints,\n        demerits: optimalSplit.demerits,\n      };\n    },\n    this.cacheParagraphBreakpoints\n  );\n\n  /**\n   * Compute length of units from [start, end] (inclusive) if rendered in a single line.\n   * We only count items that are box, glue & only the penalty if it's the last item as penalties\n   * won't be rendered in the line.\n   *\n   * @param start\n   * @param end -- inclusive\n   */\n  computeLineLength = cacheFn((start: number, end: number) => {\n    let len = 0;\n    for (let i = start; i < end; i++) {\n      if (this.paragraph[i].type === \"penalty\") continue;\n\n      len += this.paragraph[i].width;\n    }\n\n    // add the width of the last penalty item only if break is forced (break words are added hyphen)\n    if (this.paragraph[end].type === \"penalty\") {\n      // hyphen will have a non zero width\n      len += this.paragraph[end].width;\n    }\n    return len;\n  }, this.cacheLineLengths);\n\n  /**\n   * Compute the elasticity of a line of units from [start, end] (inclusive)\n   * @param start\n   * @param end -- inclusive\n   */\n  computeLineElastic = (start: number, end: number) => {\n    let stretchability = 0;\n    let shrinkability = 0;\n\n    for (let i = start; i <= end; i++) {\n      const item = this.paragraph[i];\n      if (item.type === \"glue\") {\n        stretchability += item.stretch;\n        shrinkability += item.shrink;\n      }\n    }\n\n    return { stretchability, shrinkability };\n  };\n\n  /**\n   * Compute the adjustment ratio of a line\n   *\n   * @param start\n   * @param end\n   * @param lineNumber\n   * @returns\n   */\n  computeLineAdjustment = (start: number, end: number, lineNumber: number) => {\n    const len = this.computeLineLength(start, end);\n    const desiredLength = this.getDesiredLineLength(lineNumber);\n\n    if (len === desiredLength) {\n      return 0;\n    }\n\n    const elastic = this.computeLineElastic(start, end);\n    if (len < desiredLength) {\n      if (elastic.stretchability < 0) {\n        return undefined;\n      }\n      // This is modified from Knuth-Plass algorithm.\n      if (elastic.stretchability === 0) {\n        return (desiredLength - len) / 0.1;\n      }\n      return (desiredLength - len) / elastic.stretchability;\n    }\n    if (elastic.shrinkability <= 0) {\n      return undefined;\n    }\n    return (desiredLength - len) / elastic.shrinkability;\n  };\n\n  computeLineBadness = (start: number, end: number, lineNumber: number) => {\n    const r = this.computeLineAdjustment(start, end, lineNumber);\n    if (r === undefined || r < -1) {\n      return -Infinity;\n    }\n    // original formula: r ** 3 * 100\n    return r ** 3;\n  };\n\n  computeLineDemerits = cacheFn(\n    (start: number, end: number, lineNumber: number) => {\n      const lastLineItem = this.paragraph[end];\n      const linePenalty =\n        lastLineItem.type === \"penalty\" ? lastLineItem.cost : 0;\n      const lineBadness = this.computeLineBadness(start, end, lineNumber);\n      const additionalPenalty = 0;\n\n      if (linePenalty >= 0) {\n        return (1 + lineBadness + linePenalty) ** 2 + additionalPenalty;\n      } else if (linePenalty === -Infinity) {\n        return (1 + lineBadness) ** 2 + additionalPenalty;\n      } else {\n        return (1 + lineBadness) ** 2 - linePenalty ** 2 + additionalPenalty;\n      }\n    },\n    this.cacheLineDemerits\n  );\n\n  computeParagraphDemerits = (\n    start: number,\n    end: number,\n    breakpoints: number[],\n    nPreviousLines: number\n  ) => {\n    let caret = start;\n    let demerits = 0;\n    for (let i = 0; i < breakpoints.length; i++) {\n      demerits += this.computeLineDemerits(\n        caret,\n        breakpoints[i],\n        nPreviousLines + i\n      );\n      caret = breakpoints[i] + 1;\n    }\n    demerits += this.computeLineDemerits(\n      caret,\n      end,\n      nPreviousLines + (breakpoints.length > 0 ? breakpoints.length + 1 : 0)\n    );\n\n    return demerits;\n  };\n}\n","/**\n * An object (eg. a word) to be typeset.\n */\nexport interface Box {\n  type: \"box\";\n\n  text: string;\n\n  /** Amount of space required by this content. Must be >= 0. */\n  width: number;\n}\n\n/**\n * A space between `Box` items with a preferred width and some\n * capacity to stretch or shrink.\n *\n * `Glue` items are also candidates for breakpoints if they immediately follow a\n * `Box`.\n */\nexport interface Glue {\n  type: \"glue\";\n  text: string;\n\n  /**\n   * Preferred width of this space. Must be >= 0.\n   */\n  width: number;\n  /** Maximum amount by which this space can grow. */\n  stretch: number;\n  /** Maximum amount by which this space can shrink. */\n  shrink: number;\n}\n\n/**\n * An explicit candidate position for breaking a line.\n */\nexport interface Penalty {\n  type: \"penalty\";\n  text: string;\n\n  /**\n   * Amount of space required for typeset content to be added (eg. a hyphen) if\n   * a line is broken here. Must be >= 0.\n   */\n  width: number;\n  /**\n   * The undesirability of breaking the line at this point.\n   *\n   * Values <= `MIN_COST` and >= `MAX_COST` mandate or prevent breakpoints\n   * respectively.\n   */\n  cost: number;\n  /**\n   * A hint used to prevent successive lines being broken with hyphens. The\n   * layout algorithm will try to avoid successive lines being broken at flagged\n   * `Penalty` items.\n   */\n  flagged: boolean;\n}\n\nexport type ParagraphUnit = Box | Glue | Penalty;\nexport type ParagraphRenderedUnit = ParagraphUnit & {\n  x: number;\n  y: number;\n  lineNumber: number;\n  renderedWidth: number;\n};\nexport type ParagraphLine = ParagraphUnit[];\n\nexport interface RenderParams {\n  lineHeight: number;\n  cssLineHeight: number;\n  fontSize: number;\n  align: \"center\" | \"left\" | \"justify\" | \"right\";\n  verticalAlign: \"middle\";\n  // shorten the line's length if possible -- this will affect \"justify\" paragraph\n  // for non uniform line length, this does not change the length of line less than the new maximum length\n  // hence may produce ugly result\n  autoLength: boolean;\n}\n\nexport class Paragraph {\n  public readonly spaceWidth: number;\n  public readonly units: ParagraphUnit[];\n  public readonly lineLengths: number | number[];\n  public readonly getLineLength: (i: number) => number;\n\n  constructor(units: ParagraphUnit[], lineLengths: number | number[]) {\n    this.units = units;\n    this.lineLengths = lineLengths;\n\n    if (Array.isArray(lineLengths)) {\n      this.getLineLength = (i: number) =>\n        i < lineLengths.length\n          ? lineLengths[i]\n          : lineLengths[lineLengths.length - 1];\n    } else {\n      this.getLineLength = (i: number) => lineLengths;\n    }\n\n    this.spaceWidth = 0;\n    for (const unit of units) {\n      if (unit.type === \"glue\") {\n        this.spaceWidth = unit.width;\n        break;\n      }\n    }\n  }\n\n  /**\n   * A convenience function that generates a set of input items for `breakLines`\n   * from a string.\n   *\n   * @param text - Text to process\n   * @param measureFn - Callback that calculates the width of a given string\n   * @param hyphenateFn - Callback that calculates legal hyphenation points in\n   *                      words and returns an array of pieces that can be joined\n   *                      with hyphens.\n   */\n  static getUnitsFromText(\n    text: string,\n    measureFn: (word: string) => number,\n    hyphenateFn?: (word: string) => string[],\n    separable?: string[],\n    penaltyCost: number = 1000\n  ): ParagraphUnit[] {\n    const units: ParagraphUnit[] = [];\n    // MODIFY: modify here to split the word further to create possible break points of really long equation/json string\n    let chunks = text.split(/(\\s+)/).filter((w) => w.length > 0);\n    if (separable !== undefined && separable.length > 0) {\n      const re = new RegExp(`.*?[${separable.join(\"\")}]|.+`, \"g\");\n      chunks = chunks.flatMap((w) => w.match(re)!);\n    }\n\n    // Here we assume that every space has the same default size. Callers who want\n    // more flexibility can use the lower-level functions.\n    const spaceWidth = measureFn(\" \");\n    const hyphenWidth = measureFn(\"-\");\n    const isSpace = (word: string) => /\\s/.test(word.charAt(0));\n\n    // MODIFY: from Knuth-Place paper (space 1/3em, stretch 1/6em, shrink 1/9em)\n    const stretch = spaceWidth / 2;\n    const shrink = spaceWidth / 3;\n\n    chunks.forEach((w) => {\n      if (isSpace(w)) {\n        const g: Glue = {\n          type: \"glue\",\n          width: spaceWidth,\n          shrink,\n          stretch,\n          text: w,\n        };\n        units.push(g);\n        return;\n      }\n\n      // MODIFY: for words that are splitted in the middle by :,\" etc as above\n      if (units.length > 0 && units[units.length - 1].type === \"box\") {\n        units.push({\n          type: \"penalty\",\n          width: 0,\n          cost: 1,\n          flagged: false,\n          text: \"\",\n        });\n      }\n\n      if (hyphenateFn) {\n        const chunks = hyphenateFn(w);\n        chunks.forEach((c, i) => {\n          const b: Box = { type: \"box\", width: measureFn(c), text: c };\n          units.push(b);\n          if (i < chunks.length - 1) {\n            const hyphen: Penalty = {\n              type: \"penalty\",\n              text: \"-\",\n              width: hyphenWidth,\n              cost: penaltyCost,\n              flagged: true,\n            };\n            units.push(hyphen);\n          }\n        });\n      } else {\n        const b: Box = { type: \"box\", width: measureFn(w), text: w };\n        units.push(b);\n      }\n    });\n    // Add \"finishing glue\" to space out final line.\n    units.push({\n      type: \"glue\",\n      width: 0,\n      stretch: 10000,\n      shrink: 0,\n      text: \"\",\n    });\n\n    return units;\n  }\n\n  /**\n   * Group units of the paragraph by lines:\n   * - Penalties in the middle of a line are ignored\n   * - Glue at the end is ignored\n   * - Consecutive boxes are merged.\n   */\n  groupByLine = (breaklines: number[]): ParagraphLine[] => {\n    const lines = [];\n    let start = 0;\n\n    breaklines = breaklines.slice();\n    breaklines.push(this.units.length - 1);\n\n    for (const end of breaklines) {\n      const units = this.units.slice(start, end);\n      const line = [];\n\n      // adjust glues of the line\n      for (const unit of units) {\n        if (unit.type === \"penalty\") {\n          continue;\n        }\n\n        if (\n          unit.type === \"box\" &&\n          line.length > 0 &&\n          line[line.length - 1].type === \"box\"\n        ) {\n          // merge consecutive boxes together\n          line[line.length - 1].text += unit.text;\n          line[line.length - 1].width += unit.width;\n          continue;\n        }\n        // make a shallow copy so that we don't modify the original unit\n        line.push(Object.assign({}, unit));\n      }\n\n      if (\n        this.units[end].type === \"penalty\" &&\n        this.units[end].text.length > 0\n      ) {\n        line.push(this.units[end]);\n      }\n\n      start = end + 1;\n      lines.push(line);\n    }\n\n    return lines;\n  };\n\n  /** Compute layout of the paragraph */\n  layout = (\n    lines: ParagraphLine[],\n    {\n      lineHeight,\n      cssLineHeight,\n      fontSize,\n      align,\n      verticalAlign,\n      autoLength,\n    }: RenderParams\n  ): { units: ParagraphRenderedUnit[]; lineLengths: number[] } => {\n    const renderingUnits = [];\n    const lineLengths = lines.map((line) =>\n      line.reduce((a, x) => a + x.width, 0)\n    );\n    const desiredLens = lines.map((line, i) => this.getLineLength(i));\n\n    if (autoLength) {\n      const maxLen = Math.max(...lineLengths);\n      for (let i = 0; i < desiredLens.length; i++) {\n        if (desiredLens[i] > maxLen) {\n          desiredLens[i] = maxLen;\n        }\n      }\n    }\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n\n      // find the glue width, we won't adjust the glue width if the line is shorter than desired and not justify\n      const len = lineLengths[i];\n      const desiredLen = desiredLens[i];\n      const nGlues = line.filter((x) => x.type === \"glue\").length;\n      const glueWidth =\n        len < desiredLen && align !== \"justify\"\n          ? this.spaceWidth\n          : Math.abs(desiredLen - len) / nGlues + this.spaceWidth;\n\n      // verticalAlign === \"middle\"\n      const y = (i + 1) * lineHeight - (fontSize * (cssLineHeight - 1)) / 2;\n      let x = 0;\n\n      if (align === \"center\") {\n        x += (desiredLen - len) / 2;\n      } else if (align === \"right\") {\n        x += desiredLen - len;\n      }\n\n      if (glueWidth === this.spaceWidth) {\n        const renderingUnit = Object.assign(\n          {\n            x,\n            y,\n            renderedWidth: len,\n            lineNumber: i,\n          },\n          line[0]\n        );\n        renderingUnit.text = line.map((x) => x.text).join(\"\");\n        renderingUnits.push(renderingUnit);\n      } else {\n        for (const unit of line) {\n          const renderedWidth = unit.type === \"glue\" ? glueWidth : unit.width;\n          const renderedUnit = Object.assign(\n            {\n              x,\n              y,\n              renderedWidth,\n              lineNumber: i,\n            },\n            unit\n          );\n\n          x += renderedWidth;\n          renderingUnits.push(renderedUnit);\n        }\n      }\n    }\n\n    return { units: renderingUnits, lineLengths };\n  };\n}\n","import enUsPatterns from \"hyphenation.en-us\";\nimport Hypher from \"hypher\";\nimport { ParagraphOptimizer } from \"./optimizer\";\nimport { Paragraph, ParagraphRenderedUnit } from \"./model\";\n\nexport type ElementFontConfig = {\n  font?: string;\n  fontSize: number;\n  fontFamily: string;\n};\n\nexport class WordWrap {\n  protected measureCtx: CanvasRenderingContext2D;\n  protected circleLayout: CircleLayout;\n  protected hypher: Hypher;\n\n  public readonly font: string;\n  public readonly fontFamily: string;\n  public readonly fontSize: number;\n  public readonly cssLineHeight: number = 1.428;\n  // lineHeight in pixel (different from cssLineHeight property)\n  public readonly lineHeight: number;\n  public readonly spaceWidth: number;\n  public readonly separable: string[] = [\n    \"{\",\n    \"}\",\n    \":\",\n    \",\",\n    \"'\",\n    '\"',\n    \".\",\n    \"/\",\n  ];\n\n  constructor(\n    fontCfg: ElementFontConfig,\n    layoutCfg?: { lineHeight?: number; separable?: string[] }\n  ) {\n    const canvas = document.createElement(\"canvas\");\n    this.measureCtx = canvas.getContext(\"2d\")!;\n    this.spaceWidth = this.measureText(\" \");\n\n    this.font = fontCfg.font || `${fontCfg.fontSize}px ${fontCfg.fontFamily}`;\n    this.fontFamily = fontCfg.fontFamily;\n    this.fontSize = fontCfg.fontSize;\n    this.measureCtx.font = this.font;\n\n    this.hypher = new Hypher(enUsPatterns);\n\n    if (layoutCfg !== undefined) {\n      if (layoutCfg.lineHeight !== undefined) {\n        this.cssLineHeight = layoutCfg.lineHeight;\n      }\n      if (layoutCfg.separable !== undefined) {\n        this.separable = layoutCfg.separable;\n      }\n    }\n\n    this.lineHeight = this.fontSize * this.cssLineHeight;\n    this.circleLayout = new CircleLayout(this);\n  }\n\n  /** Generate a plan to render text. Note that font size is automatically figured out from the given container */\n  wrapText = (\n    text: string,\n    desiredLineLengths: number | number[],\n    align: \"justify\" | \"left\" | \"center\" | \"right\" = \"justify\"\n  ): {\n    units: ParagraphRenderedUnit[];\n    width: number;\n    height: number;\n  } => {\n    const paragraph = new Paragraph(\n      Paragraph.getUnitsFromText(\n        text,\n        this.measureText,\n        this.hyphenate,\n        this.separable\n      ),\n      desiredLineLengths\n    );\n    // TODO: uncomment to debug\n    // console.log(\n    //   text,\n    //   desiredLineLengths,\n    //   JSON.stringify(\n    //     Object.fromEntries(paragraph.units.map((u) => [u.text, u.width]))\n    //   )\n    // );\n    const breakpoints = new ParagraphOptimizer(paragraph).optimize()\n      .breakpoints;\n    const { units, lineLengths } = paragraph.layout(\n      paragraph.groupByLine(breakpoints),\n      {\n        align,\n        cssLineHeight: this.cssLineHeight,\n        fontSize: this.fontSize,\n        lineHeight: this.lineHeight,\n        verticalAlign: \"middle\",\n        autoLength: true,\n      }\n    );\n\n    const width = Math.max(...lineLengths);\n    const height = (breakpoints.length + 1) * this.lineHeight;\n\n    return { units: units, width, height };\n  };\n\n  /** Wrap text in a circle */\n  wrapTextCircle = (\n    text: string,\n    maxRadius: number = 1024,\n    acceptableError: number = 10\n  ): {\n    units: ParagraphRenderedUnit[];\n    radius: number;\n  } => {\n    let radius =\n      this.circleLayout.findRadius(\n        this.measureText(text),\n        maxRadius,\n        acceptableError\n      ) + 12;\n    const circleLayout = this.circleLayout.getLayout(radius);\n    const {\n      lines: lineLengths,\n      // centralLine,\n      // linesY,\n    } = circleLayout;\n    const { units, width } = this.wrapText(\n      text,\n      lineLengths.slice(0, 3),\n      \"center\"\n    );\n    const nLines = Math.max(...units.map((item) => item.lineNumber)) + 1;\n\n    // shift the location to the center of the circle\n    radius = width / 2;\n    const deltaX = -radius;\n    const deltaY =\n      -(nLines % 2 === 1 ? (nLines - 1) / 2 : nLines / 2) * this.lineHeight -\n      this.lineHeight / 2;\n\n    for (let itemLayout of units) {\n      itemLayout.x += deltaX;\n      itemLayout.y += deltaY;\n    }\n\n    return {\n      units: units,\n      radius,\n    };\n  };\n\n  /** Hyphenate a long word (at least 4 characters) */\n  hyphenate = (word: string) => {\n    return word.length > 4 ? this.hypher.hyphenate(word) : [word];\n  };\n\n  /** Get approximate width of a sentence of n words */\n  getApproximateWidth = (nWords: number) => {\n    return nWords * this.measureText(\"abcij \");\n  };\n\n  /**\n   * Return the computed CSS `font` property value for an element.\n   */\n  static getCssFont = (container: Element) => {\n    const style = getComputedStyle(container);\n    const { fontStyle, fontVariant, fontWeight, fontSize, fontFamily } = style;\n    return {\n      font: `${fontStyle!} ${fontVariant!} ${fontWeight!} ${fontSize!} ${fontFamily}`,\n      fontSize: parseFloat(fontSize),\n      fontFamily,\n    };\n  };\n\n  /**\n   * Measure the width of `text` as it would appear if rendered with a given computed `font` style.\n   */\n  measureText = (text: string) => {\n    return this.measureCtx.measureText(text).width;\n  };\n}\n\nexport class CircleLayout {\n  protected lineBreak: WordWrap;\n  protected lineHeight: number;\n  protected radius2layout: {\n    [k: number]: {\n      lines: number[];\n      linesY: number[];\n      totalLength: number;\n      centralLine: number;\n    };\n  };\n\n  constructor(lineBreak: WordWrap) {\n    this.lineBreak = lineBreak;\n    this.lineHeight = lineBreak.lineHeight;\n    this.radius2layout = {};\n  }\n\n  findRadius = (\n    textLength: number,\n    maxRadius: number = 1024,\n    acceptableError: number = 10\n  ): number => {\n    // first step is to find the lower bound using binary search\n    let [start, end] = [0, maxRadius];\n    let lowerbound = undefined;\n    for (let i = 0; i < maxRadius; i++) {\n      if (end - start === 1) {\n        lowerbound = end;\n        break;\n      }\n\n      const radius = Math.ceil((start + end) / 2);\n      const l = this.getLayout(radius).totalLength;\n\n      if (l < textLength) {\n        start = radius;\n        continue;\n      }\n\n      if (l - textLength > acceptableError) {\n        end = radius;\n        continue;\n      }\n      lowerbound = radius;\n      break;\n    }\n\n    if (lowerbound === undefined) {\n      throw new Error(\n        `The text of ${textLength} is too long to render in a circle that has the maximum radius: ${maxRadius} - ${\n          this.getLayout(maxRadius).totalLength\n        }`\n      );\n    }\n\n    // next step is to find the upper bound assuming that the longest word\n    // is going to be breaked at every line (textLength + longestWord * nLines)\n    return lowerbound;\n  };\n\n  /** Get layout (line lengths) of a given radius */\n  getLayout = (radius: number) => {\n    if (this.radius2layout[radius] === undefined) {\n      const n = this.computeHalfNumberOfLines(radius);\n      // small to large to small\n      const lines = [];\n      const linesY = [];\n      for (let i = n; i > 0; i--) {\n        lines.push(this.computeLineLength(i, radius));\n        linesY.push(radius - this.lineHeight * (i + 1 / 2));\n      }\n      lines.push(this.computeCentralLineLength(radius));\n      linesY.push(radius - this.lineHeight / 2);\n      for (let i = n - 1; i >= 0; i--) {\n        lines.push(lines[i]);\n        linesY.push(radius + this.lineHeight * (i - 1 / 2));\n      }\n\n      this.radius2layout[radius] = {\n        lines,\n        linesY,\n        centralLine: lines[n],\n        totalLength: lines.reduce((a, b) => a + b),\n      };\n    }\n\n    return this.radius2layout[radius];\n  };\n\n  /** Number of lines can fit in a half of circle without central line */\n  computeHalfNumberOfLines = (radius: number) => {\n    return Math.floor((radius - this.lineHeight / 2) / this.lineHeight);\n  };\n\n  /** Compute line height of non-central lines */\n  computeLineLength = (index: number, radius: number) => {\n    return Math.sqrt(radius ** 2 - (this.lineHeight * index) ** 2) * 2;\n  };\n\n  computeCentralLineLength = (radius: number) => {\n    return Math.sqrt(radius ** 2 - (this.lineHeight / 2) ** 2) * 2;\n  };\n}\n","import G6, { Graph, GraphData, NodeConfig, LayoutConfig } from \"@antv/g6\";\nimport { registerRectNode } from \"./RectNode\";\nimport { registerCircleNode } from \"./CircleNode\";\nimport { WordWrap } from \"./wordwrap\";\nimport { testNodeWrap } from \"./TestNodeWrap\";\nimport _ from \"lodash\";\n\nexport interface GraphEdge {\n  id: string;\n  source: string;\n  target: string;\n  label: string;\n}\n\nexport interface GraphNode {\n  id: string;\n  label: string;\n  style?: object;\n  labelStyle?: object;\n  shape?:\n    | \"rect\"\n    | \"circle\"\n    | \"ellipse\"\n    | \"diamond\"\n    | \"triangle\"\n    | \"star\"\n    | \"image\";\n}\n\nexport interface G6GraphProps {\n  // init height of the canvas\n  initHeight: number;\n  // shift the node in the graph by `leftOffset` units -- default 0\n  leftOffset?: number;\n  // shift the node in the graph by `topOffset` units -- default 0\n  topOffset?: number;\n  /**\n   * Layout of the graph. Default it's force layout with distance 50\n   */\n  layout?: LayoutConfig;\n  onNodeClick?: (nodeId: string) => void;\n  onEdgeClick?: (edge: GraphEdge) => void;\n  // highlight the node and its related nodes and edges when the mouse enter the node;\n  // default is false\n  enableActivateRelations?: boolean;\n}\n\nexport class G6Graph {\n  private version: number;\n  private container: HTMLDivElement;\n  public graph: Graph;\n  private data: GraphData;\n  public props: G6GraphProps;\n  private wordwrap: WordWrap;\n\n  constructor(container: HTMLDivElement, props: G6GraphProps) {\n    this.version = 0;\n    this.props = props;\n    this.container = container;\n    this.data = {\n      nodes: [],\n      edges: [],\n    };\n\n    const cfg = {\n      fontFamily:\n        \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'\",\n      fontSize: 12,\n    };\n    this.wordwrap = new WordWrap(cfg);\n    registerRectNode(this.wordwrap);\n    registerCircleNode(this.wordwrap);\n\n    const modes: any[] = [\"drag-canvas\", \"drag-node\"];\n\n    if (props.enableActivateRelations) {\n      modes.push({\n        type: \"activate-relations\",\n        resetSelected: true,\n      });\n    }\n\n    this.graph = new G6.Graph({\n      container: container,\n      width: container.scrollWidth,\n      height: props.initHeight,\n      layout: props.layout || {\n        type: \"force\",\n        preventOverlap: true,\n        linkDistance: 50,\n        nodeSpacing: 50,\n      },\n      defaultEdge: {\n        type: \"quadratic\",\n        style: {\n          stroke: \"black\",\n          endArrow: {\n            fill: \"black\",\n            path: G6.Arrow.triangle(6, 8),\n          },\n        },\n        labelCfg: {\n          style: {\n            fill: \"black\",\n            background: {\n              fill: \"#ffffff\",\n              stroke: \"#9EC9FF\",\n              padding: [2, 2, 2, 2],\n              radius: 2,\n            },\n          },\n        },\n      },\n      modes: {\n        default: modes,\n        edit: [\"click-select\"],\n      },\n      // these control styles of nodes & edges at different states\n      // currently define active & inactive for the activate-relations mode\n      nodeStateStyles: {\n        active: {\n          opacity: 1,\n          // this is a custom attr for label's style\n          // checkout `setState` method in the custom nodes such as rect-wrap\n          label: {\n            opacity: 1,\n          },\n        },\n        inactive: {\n          opacity: 0.2,\n          // this is a custom attr for label's style\n          // checkout `setState` method in the custom nodes such as rect-wrap\n          label: {\n            opacity: 0.2,\n          },\n        },\n      },\n      edgeStateStyles: {\n        active: {\n          stroke: \"black\",\n          opacity: 1,\n        },\n        inactive: {\n          opacity: 0.2,\n          text: {\n            opacity: 0.2,\n          },\n        },\n      },\n    });\n\n    if (props.onNodeClick !== undefined) {\n      this.graph.on(\"node:click\", (event: any) => {\n        this.props.onNodeClick!(event.item._cfg.model.id);\n      });\n    }\n\n    if (props.onEdgeClick !== undefined) {\n      this.graph.on(\"edge:click\", (event: any) => {\n        this.props.onEdgeClick!(event.item._cfg.model);\n      });\n    }\n  }\n\n  /** Try to hot-swap the properties of this graph and returns whether it's success or not */\n  hotswapProps = (props: G6GraphProps) => {\n    if (!_.isEqual(this.props.layout, props.layout)) {\n      return false;\n    }\n\n    if (this.props.enableActivateRelations !== props.enableActivateRelations) {\n      return false;\n    }\n\n    this.props = props;\n    return true;\n  };\n\n  destroy = () => {\n    this.graph.destroy();\n  };\n\n  /** Transform the data from our format to G6 format */\n  static transformData(nodes: GraphNode[], edges: GraphEdge[]): GraphData {\n    // const { nodes: x, edges: y } = testNodeWrap(\"rect\");\n    // nodes = x;\n    // edges = y;\n\n    // get new nodes\n    let newNodes = nodes.map((u, i) => {\n      let type;\n      if (u.label.trim().length > 0) {\n        if (u.shape === \"rect\" || u.shape === \"circle\") {\n          type = u.shape + \"-wrap\";\n        } else {\n          type = u.shape;\n        }\n      } else {\n        type = u.shape;\n      }\n\n      const node: NodeConfig = {\n        id: u.id,\n        label: u.label,\n        type: type,\n        style: {\n          ...u.style,\n          radius: 4,\n          paddingHeight: 2,\n          paddingWidth: 4,\n        },\n        labelCfg: {\n          style: u.labelStyle,\n        },\n      };\n      if (u.shape === \"rect\") {\n        node.style!.radius = 4;\n      }\n      return node;\n    });\n\n    // get new edges\n    if (_.uniq(edges.map((u) => u.id)).length !== edges.length) {\n      console.error(\n        \"Edges must have unique ids. However, we get:\",\n        edges.map((u) => u.id)\n      );\n    }\n\n    let newEdges = edges.map((e) => ({\n      id: e.id,\n      source: e.source,\n      target: e.target,\n      label: e.label,\n    }));\n\n    // process parallel edges if needed\n    const uv = new Set();\n    let hasParallelEdges = false;\n    for (const edge of edges) {\n      const pair = `${edge.source}-${edge.target}`;\n      if (uv.has(pair)) {\n        hasParallelEdges = true;\n        break;\n      }\n      uv.add(pair);\n    }\n    if (hasParallelEdges) {\n      G6.Util.processParallelEdges(newEdges);\n    }\n\n    return { nodes: newNodes, edges: newEdges };\n  }\n\n  /**\n   * Adjust the viewport to fit the view without zooming,\n   * just align the center of the image bbox to the center of the canvas\n   */\n  fitCenter = () => {\n    this.graph.fitCenter();\n  };\n\n  /** Entry point of graph. Render the graph with given data */\n  setDataAndRender = (data: GraphData, onFinish?: () => void) => {\n    if (this.version > 0) {\n      this.graph.clear();\n    }\n    this.data = data;\n    this.graph.data({ nodes: data.nodes, edges: data.edges });\n    this.graph.render();\n    this.version += 1;\n\n    if (onFinish !== undefined) {\n      onFinish();\n    }\n  };\n\n  /** Update layout of the graph **/\n  updateLayout = (layoutCfg: LayoutConfig) => {\n    this.graph.updateLayout(layoutCfg);\n    this.graph.layout();\n  };\n\n  /**\n   * Adjust the canvas size to fit with the graph\n   *\n   * For fit-graph mode, the extraHeight mode is used to add top & bottom padding so that it's not too close (e.g., 20px)\n   * For fit-remaining-window, the offsetHeight is used to reserved some pixels at the bottom of the window so that it's not overflow (e.g., minus 1px for the border)\n   * For keep-as-is, we use the initial height\n   */\n  updateContainerSize = ({\n    center,\n    height,\n  }: {\n    center: boolean;\n    height:\n      | { type: \"fit-graph\"; extraHeight: number }\n      | { type: \"fit-remaining-window\"; offsetHeight: number }\n      | { type: \"keep-as-is\" };\n  }): DOMRect => {\n    // follow the code in fitView & fitCenter\n    let group = this.graph.get(\"group\");\n    group.resetMatrix();\n    let bbox = group.getCanvasBBox();\n    if (!(bbox.width === 0 || bbox.height === 0)) {\n      // let graphWidth = this.graph.getWidth();\n      let graphWidth = this.container.clientWidth;\n\n      let graphHeight;\n      switch (height.type) {\n        case \"fit-graph\":\n          graphHeight = bbox.height + height.extraHeight;\n          break;\n        case \"fit-remaining-window\":\n          let viewportOffset = this.container.getBoundingClientRect().top;\n          let documentScrollY = window.scrollY;\n          let viewportHeight = document.documentElement.clientHeight;\n          graphHeight =\n            viewportHeight -\n            (viewportOffset + documentScrollY) -\n            height.offsetHeight;\n          break;\n        case \"keep-as-is\":\n          graphHeight = this.props.initHeight;\n      }\n      this.graph.changeSize(graphWidth, graphHeight);\n      if (center === true) {\n        this.graph.moveTo(\n          graphWidth / 2 - bbox.width / 2,\n          graphHeight / 2 - bbox.height / 2\n        );\n      } else {\n        this.graph.moveTo(\n          this.props.leftOffset || 0,\n          this.props.topOffset || 0\n        );\n      }\n    }\n    return bbox;\n  };\n\n  /**\n   * During rendering, the bounding box of the graph is changing and may\n   * lead to incorrect canvas size. This function will check until the layout\n   * process is finished (the bounding box is not changing a lot) to\n   * call the function.\n   *\n   * If you doesn't provide prevBBox, the function will wait for 3 * delay ms\n   * (first delay to compute bbox, second delay is in the last wait), because of\n   * the last wait, you can set the delay smaller (e.g., 50ms)\n   *\n   * @param maxTries\n   * @param delay milliseconds\n   * @param fn\n   * @param args\n   * @param onFinish\n   * @param significantChange\n   * @param prevBBox\n   */\n  untilLayoutStable = <F extends (...args: any[]) => any>(\n    maxTries: number,\n    delay: number,\n    fn: F,\n    args: Parameters<F>,\n    onFinish?: () => void,\n    significantChange?: number,\n    prevBBox?: DOMRect\n  ) => {\n    if (maxTries <= 0) {\n      // timeout, call the function anyway\n      fn(...args);\n      if (onFinish !== undefined) {\n        onFinish();\n      }\n      return;\n    }\n\n    const group = this.graph.get(\"group\");\n    const bbox = group.getCanvasBBox();\n\n    significantChange = significantChange || 10;\n\n    if (prevBBox !== undefined) {\n      if (\n        Math.abs(prevBBox.width - bbox.width) < significantChange &&\n        Math.abs(prevBBox.height - bbox.height) < significantChange\n      ) {\n        // seem like no significant change we may call the function now\n        // but what if the layout is running quite slow and we call too fast?\n        // wait for sometime and check again to make sure it's really stable\n        setTimeout(() => {\n          const group = this.graph.get(\"group\");\n          const nextBBox = group.getCanvasBBox();\n\n          if (\n            Math.abs(bbox.width - nextBBox.width) >= significantChange! ||\n            Math.abs(bbox.height - nextBBox.height) >= significantChange!\n          ) {\n            // the layout is still changing, keep on waiting\n            this.untilLayoutStable(\n              maxTries - 1,\n              delay,\n              fn,\n              args,\n              onFinish,\n              significantChange,\n              nextBBox\n            );\n          } else {\n            fn(...args);\n            if (onFinish !== undefined) {\n              onFinish();\n            }\n          }\n        }, delay);\n        return;\n      } else {\n        setTimeout(() => {\n          this.untilLayoutStable(\n            maxTries - 1,\n            delay,\n            fn,\n            args,\n            onFinish,\n            significantChange,\n            bbox\n          );\n        }, delay);\n      }\n    } else {\n      setTimeout(() => {\n        this.untilLayoutStable(\n          maxTries,\n          delay,\n          fn,\n          args,\n          onFinish,\n          significantChange,\n          bbox\n        );\n      }, delay);\n    }\n  };\n}\n","import {\n  DownOutlined,\n  FullscreenOutlined,\n  LayoutOutlined,\n} from \"@ant-design/icons\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport MyLocationIcon from \"@mui/icons-material/MyLocation\";\nimport { Button, Dropdown, Menu, Space, Tooltip } from \"antd\";\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { G6Graph, G6GraphProps, GraphEdge, GraphNode } from \"./G6Graph\";\n\nconst styles = {\n  hide: {\n    display: \"none\",\n  },\n  graph: {\n    position: \"relative\",\n    width: \"100%\",\n    // marginLeft: -36,\n    // marginRight: -36,\n  },\n  toolbar: {\n    position: \"absolute\",\n    top: 8,\n    left: 8,\n    \"& button.text\": {\n      borderRadius: 4,\n      paddingLeft: 8,\n      paddingRight: 8,\n    },\n    \"& button.icon\": {\n      borderRadius: 4,\n      padding: 4,\n      \"& svg\": {\n        fontSize: 22,\n      },\n    },\n  },\n  bordered: {\n    border: \"1px solid #bbb\",\n    borderRadius: 4,\n  },\n  container: {\n    // width: \"calc(100% + 72px)\",\n    width: \"100%\",\n    \"& canvas\": {\n      display: \"block\",\n    },\n  },\n} as const;\n\nconst GraphLayout = {\n  Force: {\n    type: \"force\",\n    preventOverlap: true,\n    linkDistance: 50,\n    nodeSpacing: 50,\n  },\n  Dagre: {\n    type: \"dagre\",\n    rankdir: \"TB\",\n    nodesep: 70,\n    ranksep: 30,\n  },\n};\n\nexport interface GraphComponentFunc {\n  graph: () => G6Graph | undefined;\n  recenter: () => boolean;\n}\n\nexport const GraphComponent = withStyles(styles)(\n  forwardRef(\n    (\n      {\n        id,\n        version,\n        nodes,\n        edges,\n        classes,\n        props,\n        className,\n        renderingAdjustedHeight = { type: \"fit-graph\", extraHeight: 8 },\n        toolbar = false,\n        bordered = true,\n        layouts = GraphLayout,\n      }: {\n        nodes: GraphNode[];\n        edges: GraphEdge[];\n        id?: string | number;\n        version?: number;\n        bordered?: boolean;\n        toolbar?: boolean | \"auto-hide\";\n        props?: G6GraphProps;\n        renderingAdjustedHeight?:\n          | { type: \"fit-graph\"; extraHeight: number }\n          | { type: \"fit-remaining-window\"; offsetHeight: number }\n          | { type: \"keep-as-is\" };\n        className?: string;\n        layouts?: typeof GraphLayout;\n      } & WithStyles<typeof styles>,\n      ref\n    ) => {\n      const container = useRef(null);\n      const graph = useRef<G6Graph | undefined>(undefined);\n\n      useImperativeHandle(\n        ref,\n        (): GraphComponentFunc => ({\n          graph: () => graph.current,\n          recenter: () => {\n            if (graph.current === undefined) return false;\n            graph.current.updateContainerSize({\n              center: true,\n              height: renderingAdjustedHeight,\n            });\n            return true;\n          },\n        })\n      );\n\n      useEffect(() => {\n        if (container.current === null) return;\n        if (graph.current === undefined) {\n          graph.current = new G6Graph(\n            container.current,\n            props || {\n              initHeight: 500,\n            }\n          );\n        }\n\n        let g = graph.current;\n        if (props !== undefined) {\n          const success = g.hotswapProps(props);\n          if (!success) {\n            g.destroy();\n            graph.current = new G6Graph(\n              container.current,\n              props || {\n                initHeight: 500,\n              }\n            );\n            g = graph.current;\n          }\n        }\n        g.setDataAndRender(G6Graph.transformData(nodes, edges), () => {\n          (window as any).g = g;\n          // maximum wait is 1 second\n          g.untilLayoutStable(\n            20,\n            50,\n            g.updateContainerSize,\n            [{ center: true, height: renderingAdjustedHeight }],\n            () => {}\n          );\n        });\n      }, [id, version, nodes, edges, props, renderingAdjustedHeight]);\n\n      const toolbarElement =\n        toolbar === false ? null : (\n          <GraphToolbar\n            autoHide={toolbar === \"auto-hide\"}\n            graph={graph}\n            layouts={layouts}\n          />\n        );\n\n      return (\n        <div className={className}>\n          <div className={classes.hide}>{version}</div>\n          <div className={classes.graph}>\n            {toolbarElement}\n            <div\n              ref={container}\n              className={\n                classes.container + (bordered ? \" \" + classes.bordered : \"\")\n              }\n            ></div>\n          </div>\n        </div>\n      );\n    }\n  )\n);\n\nexport const GraphToolbar = withStyles(styles)(\n  ({\n    autoHide = false,\n    graph,\n    classes,\n    layouts,\n  }: {\n    autoHide?: boolean;\n    graph: React.MutableRefObject<G6Graph | undefined>;\n    layouts: typeof GraphLayout;\n  } & WithStyles<typeof styles>) => {\n    const [isHover, setIsHover] = useState(false);\n    const [layout, setLayout] = useState(\"Force\" as keyof typeof GraphLayout);\n\n    const onMouseEnter = () => {\n      if (autoHide) setIsHover(true);\n    };\n    const onMouseLeave = () => {\n      if (autoHide) setIsHover(false);\n    };\n\n    if (autoHide && !isHover) {\n      return (\n        <div\n          className={classes.toolbar}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          <Button className=\"icon\">\n            <MoreHorizIcon />\n          </Button>\n        </div>\n      );\n    }\n\n    const centerGraph = () => {\n      graph.current?.graph.fitCenter();\n    };\n\n    const changeLayout = (name: keyof typeof GraphLayout) => {\n      setLayout(name);\n      graph.current?.updateLayout(layouts[name]);\n      graph.current?.untilLayoutStable(20, 50, centerGraph, [], () => {});\n    };\n\n    const cycleLayout = () => {\n      if (layout === \"Force\") changeLayout(\"Dagre\");\n      if (layout === \"Dagre\") changeLayout(\"Force\");\n    };\n\n    const onMenuSelectLayout = (e: any) => {\n      changeLayout(e.key);\n    };\n\n    return (\n      <div\n        className={classes.toolbar}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <Space size={4} align=\"start\">\n          <Tooltip title=\"Center the graph\">\n            <Button className=\"icon\" onClick={centerGraph}>\n              <MyLocationIcon />\n            </Button>\n          </Tooltip>\n          <Tooltip title=\"Make the graph full screen\">\n            <Button className=\"icon\">\n              <FullscreenOutlined />\n            </Button>\n          </Tooltip>\n          <Tooltip title=\"Change graph layout\">\n            <Dropdown\n              overlay={\n                <Menu onClick={onMenuSelectLayout}>\n                  {Object.keys(GraphLayout).map((layout) => (\n                    <Menu.Item key={layout}>{layout}</Menu.Item>\n                  ))}\n                </Menu>\n              }\n            >\n              <Button\n                className=\"text\"\n                icon={<LayoutOutlined />}\n                onClick={cycleLayout}\n              >\n                {layout} <DownOutlined />\n              </Button>\n            </Dropdown>\n          </Tooltip>\n        </Space>\n      </div>\n    );\n  }\n);\n","import { gold, green, purple, yellow } from \"@ant-design/colors\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { observer } from \"mobx-react\";\nimport React, {\n  forwardRef,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  GraphComponent,\n  GraphComponentFunc,\n  GraphEdge,\n  GraphNode,\n} from \"../../components/graph\";\nimport {\n  DraftSemanticModel,\n  SemanticModel,\n  Table,\n  useStores,\n} from \"../../models\";\nimport { SMNode } from \"../../models/sm\";\nimport { routes } from \"../../routes\";\nimport { openForm } from \"./forms\";\n\nconst styles = {\n  hide: {\n    display: \"none\",\n  },\n  graphContainer: {},\n  draft: {\n    border: `1px dashed ${yellow[7]} !important`,\n    \"&:hover\": {\n      color: `${gold[5]} !important`,\n    },\n  },\n  selectedDraft: {\n    backgroundColor: `${gold[5]} !important`,\n  },\n};\n\nexport interface SemanticModelComponentFunc {\n  recenter: () => boolean;\n}\n\nexport const SemanticModelComponent = withStyles(styles)(\n  observer(\n    forwardRef(\n      (\n        {\n          classes,\n          table,\n          sm,\n        }: { table: Table; sm: SemanticModel } & WithStyles<typeof styles>,\n        ref\n      ) => {\n        const graphRef = useRef<GraphComponentFunc>();\n\n        // expose the APIs for the control bar to call\n        useImperativeHandle(\n          ref,\n          (): SemanticModelComponentFunc => ({\n            recenter: () => graphRef.current?.recenter() || false,\n          })\n        );\n\n        const [nodes, edges] = useMemo(() => {\n          const nodes = sm.graph.nodes.map((node) => {\n            let shape: GraphNode[\"shape\"], style;\n            switch (node.nodetype) {\n              case \"class_node\":\n                shape = \"circle\";\n                style = { fill: green[2], stroke: green[8] };\n                break;\n              case \"data_node\":\n                shape = \"rect\";\n                style = { fill: gold[3], stroke: gold[8] };\n                break;\n              case \"literal_node\":\n                if (node.value.type === \"entity-id\") {\n                  shape = \"circle\";\n                } else {\n                  shape = \"rect\";\n                }\n                if (node.isInContext) {\n                  style = { fill: \"#C6E5FF\", stroke: \"#5B8FF9\" };\n                } else {\n                  style = { fill: purple[2], stroke: \"#c41d7f\" };\n                }\n                break;\n              default:\n                throw new Error(`Unreachable!`);\n            }\n\n            return {\n              id: node.id,\n              label: getNodeLabel(sm, node),\n              style,\n              shape,\n            };\n          });\n          const edges = sm.graph.edges.map((edge) => {\n            return {\n              id: `${edge.source}-${edge.target}-${edge.uri}`,\n              source: edge.source,\n              target: edge.target,\n              label: edge.label,\n            };\n          });\n\n          return [nodes, edges];\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n          SemanticModel.isDraft(sm) ? sm.draftID : null,\n          sm.id,\n          sm.graph.version,\n        ]);\n\n        return (\n          <GraphComponent\n            ref={graphRef}\n            className={classes.graphContainer}\n            id={sm.id}\n            version={sm.graph.version}\n            nodes={nodes}\n            edges={edges}\n            toolbar={false}\n            renderingAdjustedHeight={{ type: \"fit-graph\", extraHeight: 20 }}\n            props={{\n              initHeight: 300,\n              layout: {\n                type: \"dagre\",\n                rankdir: \"TB\",\n                nodesep: 50,\n                ranksep: 15,\n              },\n              onNodeClick: (nodeId: string) => {\n                openForm({\n                  type: \"node\",\n                  sm,\n                  node: sm.graph.node(nodeId),\n                });\n              },\n              onEdgeClick: (edge: GraphEdge) => {\n                openForm({\n                  type: \"edge\",\n                  sm,\n                  edge: sm.graph.edge(edge.source, edge.target),\n                });\n              },\n            }}\n          />\n        );\n      }\n    )\n  )\n);\n\nconst getNodeLabel = (sm: SemanticModel, node: SMNode) => {\n  switch (node.nodetype) {\n    case \"data_node\":\n      return node.label;\n    case \"literal_node\":\n      return node.label;\n    case \"class_node\":\n      return sm.graph.uriCount.label(node);\n  }\n};\n","import { ExternalLink } from \"gena-app\";\nimport { Entity } from \"./Entity\";\n\n/**\n * Render entity in a single line.\n *\n * @param entity the entity to render\n * @param noLink whether to render the entity as plain text (not clickable to open a page)\n */\nexport const InlineEntityComponent = ({\n  entity,\n  nolink = false,\n  onCtrlClick,\n  ...restprops\n}: {\n  entity: Entity;\n  nolink?: boolean;\n  onCtrlClick?: () => void;\n} & Omit<React.HTMLProps<HTMLAnchorElement>, \"href\" | \"target\" | \"rel\">) => {\n  if (nolink) {\n    return <span {...restprops}>{entity.readableLabel}</span>;\n  }\n\n  return (\n    <ExternalLink\n      href={entity.uri}\n      openInNewPage={true}\n      onCtrlClick={onCtrlClick}\n      {...restprops}\n    >\n      {entity.readableLabel}\n    </ExternalLink>\n  );\n};\n","import { useEffect, useMemo } from \"react\";\nimport { Property, useStores } from \"../../models\";\nimport { Entity } from \"../../models/entity\";\nexport { Entity } from \"../../models/entity\";\n\n/**\n * A placeholder for an entity that has not been loaded yet.\n */\nexport interface IncompleteEntity {\n  id: string;\n  // whether the value is still fetching or not\n  doesNotExist: boolean;\n}\n\n/**\n * Type guard to check if an entity is loaded (completed)\n */\nexport function isEntityComplete(\n  entity: Entity | IncompleteEntity\n): entity is Entity {\n  return (entity as IncompleteEntity).doesNotExist === undefined;\n}\n\n/**\n * A placeholder for a property that has not been loaded yet.\n */\nexport interface IncompleteProperty {\n  id: string;\n  // will just be the property id\n  label: string;\n  // whether the value is still fetching or not\n  doesNotExist: boolean;\n}\n\n/**\n * Type guard to check if a property is loaded (completed)\n */\nexport function isPropertyComplete(\n  prop: Property | IncompleteProperty\n): prop is Property {\n  return (prop as IncompleteProperty).doesNotExist === undefined;\n}\n\nexport type ID2Prop = Record<string, Property | IncompleteProperty>;\n\n/**\n * Gather properties of an entity.\n */\nexport function useEntityProperties(entity: Entity): ID2Prop {\n  const propIds = useMemo(() => {\n    const ids: Set<string> = new Set();\n    for (const [pid, stmts] of Object.entries(entity.properties)) {\n      ids.add(pid);\n      for (const stmt of stmts) {\n        for (const qid of Object.keys(stmt.qualifiers)) {\n          ids.add(qid);\n        }\n      }\n    }\n    return Array.from(ids);\n  }, [entity.id]);\n\n  const { propertyStore } = useStores();\n\n  useEffect(() => {\n    propertyStore.batch.fetchByIds(propIds);\n  }, [entity.id]);\n\n  return Object.fromEntries(\n    propIds.map((id) => {\n      const record = propertyStore.get(id);\n      if (record) {\n        return [id, record];\n      }\n      return [id, { id, doesNotExist: record === null }];\n    })\n  );\n}\n","import { Result } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { LoadingComponent } from \"gena-app\";\nimport { useStores } from \"../../models\";\nimport { EntitySettings } from \"../../models\";\nimport { Entity } from \"./Entity\";\n\nexport const FetchEntityComponent = observer(\n  ({\n    entityId,\n    render,\n    renderLoading,\n    renderNotFound,\n    forceWaiting = false,\n  }: {\n    entityId: string;\n    forceWaiting?: boolean;\n    render: (entity: Entity, settings: EntitySettings) => React.ReactElement;\n    renderLoading?: () => React.ReactElement;\n    renderNotFound?: () => React.ReactElement;\n  }) => {\n    const { entityStore, uiSettings } = useStores();\n\n    useEffect(() => {\n      entityStore.batch.fetchById(entityId);\n    }, [entityStore, entityId]);\n\n    const entity = entityStore.get(entityId);\n\n    if (entity === undefined) {\n      if (forceWaiting) {\n        if (renderLoading !== undefined) {\n          return renderLoading();\n        }\n        return <LoadingComponent />;\n      }\n\n      return <span>{entityId}</span>;\n    }\n\n    if (entity === null) {\n      if (renderNotFound !== undefined) {\n        return renderNotFound();\n      }\n\n      return (\n        <Result\n          status=\"404\"\n          title=\"404\"\n          subTitle={`Entity ${entityId} does not exist`}\n        />\n      );\n    }\n\n    return render(entity, uiSettings.entity);\n  }\n);\n","import { ExternalLink } from \"gena-app\";\nimport { Property } from \"../../models\";\nimport { IncompleteProperty, isPropertyComplete } from \"./Entity\";\n\n/**\n * Render property in a single line.\n *\n * @param property the property to render\n * @param noLink whether to render the property as plain text (not clickable to open a page)\n */\nexport const InlinePropertyComponent = ({\n  property,\n  nolink = false,\n  showId = false,\n  ...restprops\n}: {\n  property: Property | IncompleteProperty;\n  showId?: boolean;\n  nolink?: boolean;\n} & Omit<\n  React.HTMLProps<HTMLAnchorElement>,\n  \"href\" | \"target\" | \"rel\" | \"property\"\n>) => {\n  if (!isPropertyComplete(property)) {\n    if (property.doesNotExist) {\n      return (\n        <span {...restprops}>\n          <i>Property {property.id} doesn't exist</i>\n        </span>\n      );\n    } else if (nolink) {\n      return <span {...restprops}>({property.id})</span>;\n    } else {\n      // TODO: we need to have a way to handle id & uri properly\n      // create a local page for the property? for entity add uri to part of the entity\n      return (\n        <ExternalLink href={\"\"} openInNewPage={true} {...restprops}>\n          ({property.id})\n        </ExternalLink>\n      );\n    }\n  }\n\n  if (nolink) {\n    return (\n      <span {...restprops}>\n        {property.label} ({property.id})\n      </span>\n    );\n  }\n\n  const label = showId ? `${property.label} (${property.id})` : property.label;\n\n  return (\n    <ExternalLink href={property.uri} openInNewPage={true} {...restprops}>\n      {label}\n    </ExternalLink>\n  );\n};\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { EyeOutlined, EyeInvisibleOutlined } from \"@ant-design/icons\";\nimport { Space } from \"antd\";\n\nconst styles = {\n  hide: {\n    display: \"none\",\n  },\n};\nexport const CollapsibleComponent = withStyles(styles)(\n  (\n    props: React.PropsWithChildren<\n      { collapsible: React.ReactNode } & WithStyles<typeof styles>\n    >\n  ) => {\n    const [visible, setVisible] = useState(false);\n    const toggleVisible = () => {\n      setVisible(!visible);\n    };\n    const btn = visible ? (\n      <EyeInvisibleOutlined onClick={toggleVisible} />\n    ) : (\n      <EyeOutlined onClick={toggleVisible} />\n    );\n\n    return (\n      <div>\n        <Space size={4}>\n          {props.children}\n          {btn}\n        </Space>\n        <div className={visible ? \"gena-app\" : props.classes.hide}>\n          {props.collapsible}\n        </div>\n      </div>\n    );\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Typography } from \"antd\";\nimport { toJS } from \"mobx\";\nimport { ExternalLink } from \"gena-app\";\nimport { FetchEntityComponent } from \"./FetchEntityComponent\";\nimport { InlineEntityComponent } from \"./InlineEntityComponent\";\nimport { DataValue } from \"../../models/entity\";\nimport { CollapsibleComponent } from \"../element/Collapse\";\n\nconst styles = {};\n\nexport const ValueComponent = withStyles(styles)(\n  ({ value }: { value: DataValue } & WithStyles<typeof styles>) => {\n    if (value.type === \"entityid\") {\n      return (\n        <FetchEntityComponent\n          entityId={value.value}\n          render={(entity) => {\n            return <InlineEntityComponent entity={entity} />;\n          }}\n        />\n      );\n    }\n\n    if (value.type === \"time\") {\n      return (\n        <CollapsibleComponent\n          collapsible={\n            <ul>\n              <li>\n                <b>Timezone:</b> {value.value.timezone}\n              </li>\n              <li>\n                <b>From:</b> {value.value.before} - {value.value.after}\n              </li>\n              <li>\n                <b>Precision:</b> {value.value.precision}\n              </li>\n              <li>\n                <b>Calendar Model:</b>{\" \"}\n                <ExternalLink\n                  href={value.value.calendarmodel}\n                  openInNewPage={true}\n                >\n                  {value.value.calendarmodel}\n                </ExternalLink>\n              </li>\n            </ul>\n          }\n        >\n          {value.value.time}\n        </CollapsibleComponent>\n      );\n    }\n\n    if (value.type === \"quantity\") {\n      return (\n        <CollapsibleComponent\n          collapsible={\n            <ul>\n              <li>\n                <b>Bound:</b> {value.value.lowerBound} -{\" \"}\n                {value.value.upperBound}\n              </li>\n              <li>\n                <b>Unit:</b> {value.value.unit}\n              </li>\n            </ul>\n          }\n        >\n          {value.value.amount}\n        </CollapsibleComponent>\n      );\n    }\n\n    if (value.type === \"monolingualtext\") {\n      return (\n        <span>\n          {value.value.text} <i>@{value.value.language}</i>\n        </span>\n      );\n    }\n\n    if (value.type === \"globecoordinate\") {\n      return (\n        <CollapsibleComponent\n          collapsible={\n            <ul>\n              <li>\n                <b>Precision:</b> {value.value.precision}\n              </li>\n              <li>\n                <b>Globe:</b>{\" \"}\n                <ExternalLink href={value.value.globe} openInNewPage={true}>\n                  {value.value.globe}\n                </ExternalLink>\n              </li>\n            </ul>\n          }\n        >\n          <ExternalLink\n            href={`http://maps.google.com/maps?q=${value.value.latitude},${value.value.longitude}`}\n            openInNewPage={true}\n          >\n            {value.value.latitude} N,{value.value.longitude} W\n          </ExternalLink>\n        </CollapsibleComponent>\n      );\n    }\n\n    // haven't handle these types\n    if (typeof value.value === \"object\") {\n      return <span>{JSON.stringify(value.value)}</span>;\n    }\n\n    return <span>{value.value}</span>;\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Col, Row, Typography } from \"antd\";\nimport { ID2Prop, IncompleteProperty } from \"./Entity\";\nimport { Statement } from \"../../models/entity\";\nimport { InlinePropertyComponent } from \"./InlinePropertyComponent\";\nimport { ValueComponent } from \"./ValueComponent\";\n\nconst styles = {\n  qualifiers: {\n    marginLeft: 24,\n  },\n};\n\nexport const StatementComponent = withStyles(styles)(\n  ({\n    stmt,\n    classes,\n    id2prop,\n    ...restprops\n  }: {\n    id2prop: ID2Prop;\n    stmt: Statement;\n  } & WithStyles<typeof styles> &\n    React.HTMLProps<HTMLDivElement>) => {\n    const qualifiers = [];\n    for (const qid of stmt.qualifiersOrder) {\n      let qval;\n      if (stmt.qualifiers[qid].length === 0) {\n        qval = (\n          <Typography.Text type=\"secondary\" italic={true}>\n            no value\n          </Typography.Text>\n        );\n      } else {\n        qval = stmt.qualifiers[qid].map((value, valueIndex) => {\n          return (\n            <div key={valueIndex}>\n              <ValueComponent value={value} />\n            </div>\n          );\n        });\n      }\n\n      qualifiers.push(\n        <Row gutter={8} key={qid}>\n          <Col span={6}>\n            <InlinePropertyComponent property={id2prop[qid]} />\n          </Col>\n          <Col span={18}>{qval}</Col>\n        </Row>\n      );\n    }\n\n    return (\n      <div {...restprops}>\n        <div>\n          <ValueComponent value={stmt.value} />\n        </div>\n        <div className={classes.qualifiers}>{qualifiers}</div>\n      </div>\n    );\n  }\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Col, Row, Space, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { ID2Prop } from \".\";\nimport { Entity } from \"../../models/entity\";\nimport { InlinePropertyComponent } from \"./InlinePropertyComponent\";\nimport { StatementComponent } from \"./StatementComponent\";\n\nconst styles = {\n  propDivider: {\n    height: 1,\n    border: \"none\",\n    color: \"#ddd\",\n    backgroundColor: \"#ddd\",\n  },\n};\n\nexport const PropertyComponent = withStyles(styles)(\n  observer(\n    ({\n      entity,\n      id2prop,\n      filteredProps,\n      showId = false,\n      classes,\n    }: {\n      entity: Entity;\n      id2prop: ID2Prop;\n      showId?: boolean;\n      filteredProps: string[];\n    } & WithStyles<typeof styles>) => {\n      if (filteredProps.length === 0) {\n        filteredProps = Object.keys(entity.properties);\n      }\n\n      const components = [];\n      for (const pid of filteredProps) {\n        // we have undefined when entity does not have this property `pid`\n        if (entity.properties[pid] === undefined) continue;\n\n        const stmts = entity.properties[pid];\n        if (components.length > 0) {\n          components.push(\n            <hr key={`divider-${pid}`} className={classes.propDivider} />\n          );\n        }\n        components.push(\n          <Row gutter={8} key={pid}>\n            <Col span={6}>\n              <Typography.Text strong={true}>\n                <InlinePropertyComponent\n                  property={id2prop[pid]}\n                  showId={showId}\n                />\n              </Typography.Text>\n            </Col>\n            <Col span={18}>\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                {stmts.map((stmt, idx) => {\n                  return (\n                    <StatementComponent\n                      key={idx}\n                      stmt={stmt}\n                      id2prop={id2prop}\n                    />\n                  );\n                })}\n              </Space>\n            </Col>\n          </Row>\n        );\n      }\n\n      return (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }} size={2}>\n          {components}\n        </Space>\n      );\n    }\n  )\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Checkbox, Select } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { useMemo } from \"react\";\nimport { Entity, ID2Prop } from \"./Entity\";\n\nconst styles = {\n  root: {\n    width: 240,\n  },\n};\n\nexport const PropertyFilterComponent = withStyles(styles)(\n  observer(\n    ({\n      entity,\n      enable,\n      setEnable,\n      id2prop,\n      filteredProps,\n      addFilteredProp,\n      removeFilteredProp,\n      classes,\n    }: {\n      enable: boolean;\n      setEnable: (enable: boolean) => void;\n      entity: Entity;\n      id2prop: ID2Prop;\n      filteredProps: string[];\n      addFilteredProp: (prop: string) => void;\n      removeFilteredProp: (prop: string) => void;\n    } & WithStyles<typeof styles>) => {\n      const props = useMemo(() => {\n        return Object.keys(entity.properties).map((pid) => ({\n          label: `${id2prop[pid].label} (${pid})`,\n          value: pid,\n        }));\n      }, [id2prop, entity.id]);\n\n      return (\n        <div>\n          <Checkbox onChange={() => setEnable(!enable)} checked={enable}>\n            Enable Filtering\n          </Checkbox>\n          <Select\n            mode=\"multiple\"\n            allowClear={true}\n            options={props}\n            optionFilterProp=\"label\"\n            className={classes.root}\n            value={filteredProps}\n            onSelect={addFilteredProp as any}\n            onDeselect={removeFilteredProp as any}\n          />\n        </div>\n      );\n    }\n  )\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Modal, Space, Typography } from \"antd\";\nimport { ExternalLink } from \"gena-app\";\nimport { FetchEntityComponent } from \"./FetchEntityComponent\";\nimport { Entity, useEntityProperties } from \"./Entity\";\nimport { PropertyComponent } from \"./PropertyComponent\";\nimport { PropertyFilterComponent } from \"./PropertyFilterComponent\";\nimport { useState } from \"react\";\nimport { EntitySettings } from \"../../models\";\nimport { observer } from \"mobx-react\";\nconst styles = {\n  root: {\n    \"& > h2, p, span\": {\n      margin: 0,\n    },\n    minWidth: 360,\n  },\n};\n\nexport const PageEntityComponent = withStyles(styles)(\n  observer(\n    ({\n      entity,\n      settings,\n    }: { entity: Entity; settings: EntitySettings } & WithStyles<\n      typeof styles\n    >) => {\n      const id2prop = useEntityProperties(entity);\n      const [enable, setEnable] = useState<boolean>(true);\n\n      return (\n        <div>\n          <Space style={{ float: \"right\" }}>\n            <PropertyFilterComponent\n              enable={enable}\n              setEnable={setEnable}\n              entity={entity}\n              id2prop={id2prop}\n              filteredProps={settings.showedPropsInFullView}\n              addFilteredProp={settings.addShowedPropsInFullView}\n              removeFilteredProp={settings.removeShowedPropsInFullView}\n            />\n          </Space>\n          <h2>\n            <ExternalLink href={entity.uri} openInNewPage={true}>\n              {entity.label.lang2value[entity.label.lang]}\n            </ExternalLink>\n            &nbsp;\n            <Typography.Text\n              italic={true}\n              strong={false}\n              style={{ fontSize: 14, fontWeight: 400 }}\n              copyable={{ text: entity.id }}\n            >\n              ({entity.id})\n            </Typography.Text>\n          </h2>\n          <Typography.Text type=\"secondary\">\n            {entity.aliases.lang2values[entity.aliases.lang].join(\" | \")}\n          </Typography.Text>\n          <p>{entity.description.lang2value[entity.description.lang]}</p>\n          <hr />\n          <PropertyComponent\n            entity={entity}\n            id2prop={id2prop}\n            showId={true}\n            filteredProps={enable ? settings.showedPropsInFullView : []}\n          />\n        </div>\n      );\n    }\n  )\n);\n\n/** Open a full page of entity as a modal */\nexport function openPageEntityComponent(\n  args: { entity: Entity; settings: EntitySettings } | string,\n  zIndex?: number\n) {\n  // avoid using instanceof Entity because it's going to be proxy object due to mobx\n  const isEntity = typeof args !== \"string\";\n  let content;\n  if (isEntity) {\n    content = (\n      <PageEntityComponent entity={args.entity} settings={args.settings} />\n    );\n  } else {\n    content = (\n      <FetchEntityComponent\n        entityId={args}\n        render={(entity, settings) => (\n          <PageEntityComponent entity={entity} settings={settings} />\n        )}\n      />\n    );\n  }\n\n  Modal.info({\n    icon: null,\n    content,\n    bodyStyle: { margin: -8, marginTop: -16 },\n    okButtonProps: { style: { display: \"none\" } },\n    maskClosable: true,\n    mask: true,\n    zIndex: zIndex,\n    width: \"calc(100% - 128px)\",\n    style: { top: 64 },\n  });\n}\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport UnfoldMoreIcon from \"@mui/icons-material/UnfoldMore\";\nimport { Popover, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { ExternalLink } from \"gena-app\";\nimport { EntitySettings } from \"../../models\";\nimport { Entity, useEntityProperties } from \"./Entity\";\nimport { openPageEntityComponent } from \"./PageEntityComponent\";\nimport { PropertyComponent } from \"./PropertyComponent\";\n\nconst styles = {\n  root: {\n    \"& > h2, p, span\": {\n      margin: 0,\n    },\n    minWidth: 600,\n  },\n};\n\n/**\n * Showing entity in popover mode.\n *\n * To control which one to show first, set the zIndex property of the popover.\n */\nexport const PopoverEntityComponent = withStyles(styles)(\n  observer(\n    ({\n      entity,\n      children,\n      classes,\n      zIndex,\n      settings,\n      ...restprops\n    }: {\n      entity: Entity;\n      settings: EntitySettings;\n      zIndex?: number;\n    } & React.HTMLProps<HTMLDivElement> &\n      WithStyles<typeof styles>) => {\n      // TODO: find a way to remove this hard code\n      const id2prop = useEntityProperties(entity);\n      const content = (\n        <div\n          {...restprops}\n          className={`${classes.root} ${restprops.className}`}\n        >\n          <h2>\n            <ExternalLink href={entity.uri} openInNewPage={true}>\n              {entity.label.lang2value[entity.label.lang]}\n            </ExternalLink>\n            &nbsp;\n            <Typography.Text\n              italic={true}\n              strong={false}\n              style={{ fontSize: 14, fontWeight: 400 }}\n              copyable={{ text: entity.id }}\n            >\n              ({entity.id})\n            </Typography.Text>\n            <UnfoldMoreIcon\n              style={{ marginBottom: -2, paddingTop: 4, cursor: \"pointer\" }}\n              onClick={() => {\n                openPageEntityComponent(\n                  { entity, settings },\n                  zIndex !== undefined ? zIndex + 1 : undefined\n                );\n              }}\n            />\n          </h2>\n          <Typography.Text type=\"secondary\">\n            {entity.aliases.lang2values[entity.aliases.lang].join(\" | \")}\n          </Typography.Text>\n          <p>{entity.description.lang2value[entity.description.lang]}</p>\n          <hr />\n          <PropertyComponent\n            id2prop={id2prop}\n            entity={entity}\n            filteredProps={settings.showedPropsInPopoverView}\n          />\n        </div>\n      );\n\n      return (\n        <Popover content={content} zIndex={zIndex}>\n          {children}\n        </Popover>\n      );\n    }\n  )\n);\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Checkbox, Divider, Space, Tooltip, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { ReactNode, useEffect, useMemo, useState } from \"react\";\nimport { Table, useStores } from \"../../../../models\";\nimport { Class } from \"../../../../models/ontology/ClassStore\";\nimport { ColumnFilter, TableFilter } from \"./Filter\";\n\nconst styles = {\n  treeNode: {},\n  levelMarker: {},\n  table: {\n    \"& th\": {\n      minWidth: 30,\n      textAlign: \"left\",\n    },\n  },\n};\n\n/** Render a tree from the mappings */\nexport const TypeTreeFilter = withStyles(styles)(\n  observer(\n    ({\n      types,\n      classes,\n      filter,\n    }: {\n      types: { [id: string]: Class };\n      filter: ColumnFilter;\n    } & WithStyles<typeof styles>) => {\n      const [treeData, setTreeData] = useState<ReactNode[]>([]);\n\n      useMemo(() => {\n        // construct parent to children mapping\n        const p2cs = Object.fromEntries(\n          Object.keys(types).map((id) => [id, new Set<string>()])\n        );\n        for (const type of Object.values(types)) {\n          for (const parentTypeId of type.parents) {\n            if (types[parentTypeId] !== undefined) {\n              p2cs[parentTypeId].add(type.id);\n            }\n          }\n        }\n\n        // get list of roots to start with\n        const rootIds = new Set(Object.keys(p2cs));\n        for (const [parent, children] of Object.entries(p2cs)) {\n          for (const child of children) {\n            rootIds.delete(child);\n          }\n        }\n\n        // traveling the mapping to build the flatten tree\n        filter.addTypes(Object.keys(types));\n\n        const args = {\n          start: \"\",\n          nodes: types,\n          p2cs: p2cs,\n          visited: {} as { [id: string]: number },\n          counter: 0,\n          filter: filter,\n        };\n        const treeNodes: ReactNode[] = [];\n\n        for (const rootId of rootIds) {\n          args.start = rootId;\n          travel2constructTreeNodes(args, treeNodes);\n        }\n\n        // the remaining nodes are part of cycles, we just pick a random node to start\n        for (const nodeId in p2cs) {\n          if (args.visited[nodeId] === undefined) {\n            args.start = nodeId;\n            travel2constructTreeNodes(args, treeNodes);\n          }\n        }\n\n        setTreeData(treeNodes);\n      }, [Object.keys(types).sort().join(\"\\t\")]);\n\n      return (\n        <>\n          <table className={classes.table}>\n            <thead>\n              <tr>\n                <th>\n                  <Typography.Text type=\"secondary\" strong={true}>\n                    #\n                  </Typography.Text>\n                </th>\n                <th>\n                  <Tooltip title=\"Include: select rows that have a specific type\">\n                    <Typography.Text type=\"secondary\" strong={true}>\n                      In\n                    </Typography.Text>\n                  </Tooltip>\n                </th>\n                <th>\n                  <Tooltip title=\"Exclude: select rows that do not have a specific type\">\n                    <Typography.Text type=\"secondary\" strong={true}>\n                      Ex\n                    </Typography.Text>\n                  </Tooltip>\n                </th>\n                <th>\n                  <Typography.Text type=\"secondary\" strong={true}>\n                    Type\n                  </Typography.Text>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td></td>\n                <Tooltip\n                  title=\"Select all checkbox in this `Include` column\"\n                  placement=\"left\"\n                >\n                  <td>\n                    <Checkbox\n                      indeterminate={\n                        filter.hasAnyOp(\"include\") &&\n                        !filter.hasAllOp(\"include\")\n                      }\n                      checked={filter.hasAllOp(\"include\")}\n                      onChange={(e) =>\n                        filter.toggleAllType(\"include\", e.target.checked)\n                      }\n                    />\n                  </td>\n                </Tooltip>\n                <Tooltip\n                  title=\"Select all checkbox in this `Exclude` column\"\n                  placement=\"right\"\n                >\n                  <td>\n                    <Checkbox\n                      indeterminate={\n                        filter.hasAnyOp(\"exclude\") &&\n                        !filter.hasAllOp(\"exclude\")\n                      }\n                      checked={filter.hasAllOp(\"exclude\")}\n                      onChange={(e) =>\n                        filter.toggleAllType(\"exclude\", e.target.checked)\n                      }\n                    />\n                  </td>\n                </Tooltip>\n                <td>\n                  <Typography.Text type=\"secondary\">\n                    (Select all)\n                  </Typography.Text>\n                </td>\n              </tr>\n              {treeData}\n            </tbody>\n          </table>\n          <Divider style={{ margin: \"8px 0\" }} />\n          <Space>\n            <Typography.Text\n              type=\"secondary\"\n              strong={true}\n              title=\"Reset all filters\"\n              onClick={() => filter.toggleAllType(\"null\", true)}\n              style={{ cursor: \"pointer\" }}\n            >\n              Reset\n            </Typography.Text>\n            <Divider type=\"vertical\" />\n            <Tooltip\n              title=\"Select rows containing NIL entities\"\n              placement=\"bottom\"\n            >\n              <Typography.Text\n                type=\"secondary\"\n                strong={true}\n                onClick={() => filter.setSelectNil(!filter.selectNil)}\n                style={{ cursor: \"pointer\", userSelect: \"none\" }}\n              >\n                <Checkbox\n                  checked={filter.selectNil}\n                  onChange={(e) => filter.setSelectNil(e.target.checked)}\n                />\n                &nbsp;NIL Rows\n              </Typography.Text>\n            </Tooltip>\n            <Divider type=\"vertical\" />\n            <Tooltip\n              title=\"Select rows that do not link to any entity\"\n              placement=\"bottom\"\n            >\n              <Typography.Text\n                type=\"secondary\"\n                strong={true}\n                onClick={() => filter.setSelectUnlinked(!filter.selectUnlinked)}\n                style={{ cursor: \"pointer\", userSelect: \"none\" }}\n              >\n                <Checkbox\n                  checked={filter.selectUnlinked}\n                  onChange={(e) => filter.setSelectUnlinked(e.target.checked)}\n                />\n                &nbsp;Unlinked Rows\n              </Typography.Text>\n            </Tooltip>\n            <Divider type=\"vertical\" />\n            <Tooltip\n              title=\"Applying filters to candidate entities\"\n              placement=\"bottom\"\n            >\n              <Typography.Text\n                type=\"secondary\"\n                strong={true}\n                onClick={() =>\n                  filter.setIncludeCandidateEntities(\n                    !filter.includeCandidateEntities\n                  )\n                }\n                style={{ cursor: \"pointer\", userSelect: \"none\" }}\n              >\n                <Checkbox\n                  checked={filter.includeCandidateEntities}\n                  onChange={(e) =>\n                    filter.setIncludeCandidateEntities(e.target.checked)\n                  }\n                />\n                &nbsp;Candidate entities\n              </Typography.Text>\n            </Tooltip>\n          </Space>\n        </>\n      );\n    }\n  )\n);\n\nexport const TreeNode = withStyles(styles)(\n  observer(\n    ({\n      nodeId,\n      nodes,\n      visited,\n      unknown,\n      depth,\n      counter,\n      classes,\n      filter,\n    }: {\n      nodeId: string;\n      nodes: { [id: string]: Class };\n      visited: number | undefined;\n      unknown: boolean;\n      depth: number;\n      counter: number;\n      filter: ColumnFilter;\n    } & WithStyles<typeof styles>) => {\n      const title = nodes[nodeId]?.readableLabel || nodeId;\n\n      let comp = [];\n\n      if (depth === 0) {\n        comp.push(<span key=\"2\">{title}</span>);\n      } else {\n        let indent = \"\";\n        for (let i = 1; i < depth; i++) {\n          indent += \"│&nbsp;&nbsp;&nbsp;\";\n        }\n\n        comp.push(\n          <code\n            key=\"1\"\n            className={classes.levelMarker}\n            dangerouslySetInnerHTML={{ __html: `${indent}├──&nbsp;` }}\n          ></code>\n        );\n        comp.push(<span key=\"2\">{title}</span>);\n      }\n\n      if (visited !== undefined) {\n        comp.push(\n          <Typography.Text type=\"secondary\" style={{ marginLeft: 4 }}>\n            (visited at #{visited})\n          </Typography.Text>\n        );\n      }\n\n      if (unknown) {\n        comp.push(\n          <Typography.Text type=\"secondary\" style={{ marginLeft: 4 }}>\n            (unknown)\n          </Typography.Text>\n        );\n      }\n\n      return (\n        <tr className={classes.treeNode}>\n          <td title=\"The index number of this type\">\n            <Typography.Text type=\"secondary\">{counter}.</Typography.Text>\n          </td>\n          <td title=\"Select rows having entities of this type\">\n            {visited === undefined ? (\n              <Checkbox\n                checked={filter.type2op[nodeId] === \"include\"}\n                onChange={(e) => {\n                  filter.setTypeOp(\n                    nodeId,\n                    e.target.checked ? \"include\" : \"null\"\n                  );\n                }}\n              />\n            ) : null}\n          </td>\n          <td title=\"Select rows having entities that do not be part of this type\">\n            {visited === undefined ? (\n              <Checkbox\n                checked={filter.type2op[nodeId] === \"exclude\"}\n                onChange={(e) => {\n                  filter.setTypeOp(\n                    nodeId,\n                    e.target.checked ? \"exclude\" : \"null\"\n                  );\n                }}\n              />\n            ) : null}\n          </td>\n          <td>{comp}</td>\n        </tr>\n      );\n    }\n  )\n);\n\nconst travel2constructTreeNodes = (\n  args: {\n    start: string;\n    nodes: { [id: string]: Class };\n    p2cs: { [id: string]: Set<string> };\n\n    visited: { [node: string]: number };\n    counter: number;\n    filter: ColumnFilter;\n  },\n  outputs: ReactNode[]\n) => {\n  const stack: [string, number][] = [[args.start, 0]];\n  while (stack.length > 0) {\n    args.counter += 1;\n    const [nodeId, depth] = stack.pop()!;\n    outputs.push(\n      <TreeNode\n        key={args.counter}\n        counter={args.counter}\n        nodeId={nodeId}\n        nodes={args.nodes}\n        unknown={args.nodes[nodeId] === undefined}\n        depth={depth}\n        visited={args.visited[nodeId]}\n        filter={args.filter}\n      />\n    );\n\n    if (args.visited[nodeId] === undefined) {\n      args.visited[nodeId] = args.counter;\n      for (const child of args.p2cs[nodeId]) {\n        stack.push([child, depth + 1]);\n      }\n    }\n  }\n};\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Checkbox, Divider, Space, Tooltip, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { ReactNode, useEffect, useMemo, useState } from \"react\";\nimport { Property, Table, useStores } from \"../../../../models\";\nimport { Class } from \"../../../../models/ontology/ClassStore\";\nimport { ColumnFilter, TableFilter } from \"./Filter\";\n\nconst styles = {\n  treeNode: {},\n  levelMarker: {},\n  table: {\n    \"& th\": {\n      minWidth: 30,\n      textAlign: \"left\",\n    },\n  },\n};\n\n/** Render a tree from the mappings */\nexport const PropTreeFilter = withStyles(styles)(\n  observer(\n    ({\n      properties,\n      classes,\n      filter,\n    }: {\n      properties: { [id: string]: Property };\n      filter: ColumnFilter;\n    } & WithStyles<typeof styles>) => {\n      const [treeData, setTreeData] = useState<ReactNode[]>([]);\n\n      useMemo(() => {\n        // construct parent to children mapping\n        const p2cs = Object.fromEntries(\n          Object.keys(properties).map((id) => [id, new Set<string>()])\n        );\n        for (const prop of Object.values(properties)) {\n          for (const parentTypeId of prop.parents) {\n            if (properties[parentTypeId] !== undefined) {\n              p2cs[parentTypeId].add(prop.id);\n            }\n          }\n        }\n\n        // get list of roots to start with\n        const rootIds = new Set(Object.keys(p2cs));\n        for (const [parent, children] of Object.entries(p2cs)) {\n          for (const child of children) {\n            rootIds.delete(child);\n          }\n        }\n\n        // traveling the mapping to build the flatten tree\n        filter.addTypes(Object.keys(properties));\n\n        const args = {\n          start: \"\",\n          nodes: properties,\n          p2cs: p2cs,\n          visited: {} as { [id: string]: number },\n          counter: 0,\n          filter: filter,\n        };\n        const treeNodes: ReactNode[] = [];\n\n        for (const rootId of rootIds) {\n          args.start = rootId;\n          travel2constructTreeNodes(args, treeNodes);\n        }\n\n        // the remaining nodes are part of cycles, we just pick a random node to start\n        for (const nodeId in p2cs) {\n          if (args.visited[nodeId] === undefined) {\n            args.start = nodeId;\n            travel2constructTreeNodes(args, treeNodes);\n          }\n        }\n\n        setTreeData(treeNodes);\n      }, [Object.keys(properties).sort().join(\"\\t\")]);\n\n      return (\n        <>\n          <table className={classes.table}>\n            <thead>\n              <tr>\n                <th>\n                  <Typography.Text type=\"secondary\" strong={true}>\n                    #\n                  </Typography.Text>\n                </th>\n                <th>\n                  <Tooltip title=\"Include: select rows that have a specific type\">\n                    <Typography.Text type=\"secondary\" strong={true}>\n                      In\n                    </Typography.Text>\n                  </Tooltip>\n                </th>\n                <th>\n                  <Tooltip title=\"Exclude: select rows that do not have a specific type\">\n                    <Typography.Text type=\"secondary\" strong={true}>\n                      Ex\n                    </Typography.Text>\n                  </Tooltip>\n                </th>\n                <th>\n                  <Typography.Text type=\"secondary\" strong={true}>\n                    Type\n                  </Typography.Text>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td></td>\n                <Tooltip\n                  title=\"Select all checkbox in this `Include` column\"\n                  placement=\"left\"\n                >\n                  <td>\n                    <Checkbox\n                      indeterminate={\n                        filter.hasAnyOp(\"include\") &&\n                        !filter.hasAllOp(\"include\")\n                      }\n                      checked={filter.hasAllOp(\"include\")}\n                      onChange={(e) =>\n                        filter.toggleAllType(\"include\", e.target.checked)\n                      }\n                    />\n                  </td>\n                </Tooltip>\n                <Tooltip\n                  title=\"Select all checkbox in this `Exclude` column\"\n                  placement=\"right\"\n                >\n                  <td>\n                    <Checkbox\n                      indeterminate={\n                        filter.hasAnyOp(\"exclude\") &&\n                        !filter.hasAllOp(\"exclude\")\n                      }\n                      checked={filter.hasAllOp(\"exclude\")}\n                      onChange={(e) =>\n                        filter.toggleAllType(\"exclude\", e.target.checked)\n                      }\n                    />\n                  </td>\n                </Tooltip>\n                <td>\n                  <Typography.Text type=\"secondary\">\n                    (Select all)\n                  </Typography.Text>\n                </td>\n              </tr>\n              {treeData}\n            </tbody>\n          </table>\n          <Divider style={{ margin: \"8px 0\" }} />\n          <Space>\n            <Typography.Text\n              type=\"secondary\"\n              strong={true}\n              title=\"Reset all filters\"\n              onClick={() => filter.toggleAllType(\"null\", true)}\n              style={{ cursor: \"pointer\" }}\n            >\n              Reset\n            </Typography.Text>\n            <Divider type=\"vertical\" />\n            <Tooltip\n              title=\"Select rows containing NIL entities\"\n              placement=\"bottom\"\n            >\n              <Typography.Text\n                type=\"secondary\"\n                strong={true}\n                onClick={() => filter.setSelectNil(!filter.selectNil)}\n                style={{ cursor: \"pointer\", userSelect: \"none\" }}\n              >\n                <Checkbox\n                  checked={filter.selectNil}\n                  onChange={(e) => filter.setSelectNil(e.target.checked)}\n                />\n                &nbsp;NIL Rows\n              </Typography.Text>\n            </Tooltip>\n            <Divider type=\"vertical\" />\n            <Tooltip\n              title=\"Select rows that do not link to any entity\"\n              placement=\"bottom\"\n            >\n              <Typography.Text\n                type=\"secondary\"\n                strong={true}\n                onClick={() => filter.setSelectUnlinked(!filter.selectUnlinked)}\n                style={{ cursor: \"pointer\", userSelect: \"none\" }}\n              >\n                <Checkbox\n                  checked={filter.selectUnlinked}\n                  onChange={(e) => filter.setSelectUnlinked(e.target.checked)}\n                />\n                &nbsp;Unlinked Rows\n              </Typography.Text>\n            </Tooltip>\n            <Divider type=\"vertical\" />\n            <Tooltip\n              title=\"Applying filters to candidate entities\"\n              placement=\"bottom\"\n            >\n              <Typography.Text\n                type=\"secondary\"\n                strong={true}\n                onClick={() =>\n                  filter.setIncludeCandidateEntities(\n                    !filter.includeCandidateEntities\n                  )\n                }\n                style={{ cursor: \"pointer\", userSelect: \"none\" }}\n              >\n                <Checkbox\n                  checked={filter.includeCandidateEntities}\n                  onChange={(e) =>\n                    filter.setIncludeCandidateEntities(e.target.checked)\n                  }\n                />\n                &nbsp;Candidate entities\n              </Typography.Text>\n            </Tooltip>\n          </Space>\n        </>\n      );\n    }\n  )\n);\n\nexport const TreeNode = withStyles(styles)(\n  observer(\n    ({\n      nodeId,\n      nodes,\n      visited,\n      unknown,\n      depth,\n      counter,\n      classes,\n      filter,\n    }: {\n      nodeId: string;\n      nodes: { [id: string]: Property };\n      visited: number | undefined;\n      unknown: boolean;\n      depth: number;\n      counter: number;\n      filter: ColumnFilter;\n    } & WithStyles<typeof styles>) => {\n      const title = nodes[nodeId]?.readableLabel || nodeId;\n\n      let comp = [];\n\n      if (depth === 0) {\n        comp.push(<span key=\"2\">{title}</span>);\n      } else {\n        let indent = \"\";\n        for (let i = 1; i < depth; i++) {\n          indent += \"│&nbsp;&nbsp;&nbsp;\";\n        }\n\n        comp.push(\n          <code\n            key=\"1\"\n            className={classes.levelMarker}\n            dangerouslySetInnerHTML={{ __html: `${indent}├──&nbsp;` }}\n          ></code>\n        );\n        comp.push(<span key=\"2\">{title}</span>);\n      }\n\n      if (visited !== undefined) {\n        comp.push(\n          <Typography.Text type=\"secondary\" style={{ marginLeft: 4 }}>\n            (visited at #{visited})\n          </Typography.Text>\n        );\n      }\n\n      if (unknown) {\n        comp.push(\n          <Typography.Text type=\"secondary\" style={{ marginLeft: 4 }}>\n            (unknown)\n          </Typography.Text>\n        );\n      }\n\n      return (\n        <tr className={classes.treeNode}>\n          <td title=\"The index number of this type\">\n            <Typography.Text type=\"secondary\">{counter}.</Typography.Text>\n          </td>\n          <td title=\"Select rows having entities of this type\">\n            {visited === undefined ? (\n              <Checkbox\n                checked={filter.type2op[nodeId] === \"include\"}\n                onChange={(e) => {\n                  filter.setTypeOp(\n                    nodeId,\n                    e.target.checked ? \"include\" : \"null\"\n                  );\n                }}\n              />\n            ) : null}\n          </td>\n          <td title=\"Select rows having entities that do not be part of this type\">\n            {visited === undefined ? (\n              <Checkbox\n                checked={filter.type2op[nodeId] === \"exclude\"}\n                onChange={(e) => {\n                  filter.setTypeOp(\n                    nodeId,\n                    e.target.checked ? \"exclude\" : \"null\"\n                  );\n                }}\n              />\n            ) : null}\n          </td>\n          <td>{comp}</td>\n        </tr>\n      );\n    }\n  )\n);\n\nconst travel2constructTreeNodes = (\n  args: {\n    start: string;\n    nodes: { [id: string]: Property };\n    p2cs: { [id: string]: Set<string> };\n\n    visited: { [node: string]: number };\n    counter: number;\n    filter: ColumnFilter;\n  },\n  outputs: ReactNode[]\n) => {\n  const stack: [string, number][] = [[args.start, 0]];\n  while (stack.length > 0) {\n    args.counter += 1;\n    const [nodeId, depth] = stack.pop()!;\n    outputs.push(\n      <TreeNode\n        key={args.counter}\n        counter={args.counter}\n        nodeId={nodeId}\n        nodes={args.nodes}\n        unknown={args.nodes[nodeId] === undefined}\n        depth={depth}\n        visited={args.visited[nodeId]}\n        filter={args.filter}\n      />\n    );\n\n    if (args.visited[nodeId] === undefined) {\n      args.visited[nodeId] = args.counter;\n      for (const child of args.p2cs[nodeId]) {\n        stack.push([child, depth + 1]);\n      }\n    }\n  }\n};\n","import { Menu, Space, Tabs, Typography } from \"antd\";\nimport { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { useEffect, useState } from \"react\";\nimport { Property, Table, useStores } from \"../../models\";\nimport { Class } from \"../../models/ontology/ClassStore\";\nimport { TypeTreeFilter } from \"./table/filters\";\nimport { ColumnFilter } from \"./table/filters/Filter\";\nimport { PropTreeFilter } from \"./table/filters/PropTreeFilter\";\n\nconst styles = {\n  tab: {\n    \"& div.ant-tabs-nav\": {\n      marginBottom: \"8px !important\",\n    },\n  },\n};\n\nexport const TableColumnFilter = withStyles(styles)(\n  ({\n    table,\n    columnIndex,\n    filter,\n    classes,\n  }: {\n    table: Table;\n    columnIndex: number;\n    filter: ColumnFilter;\n  } & WithStyles<typeof styles>) => {\n    const [menu, setMenu] = useState(\"by-type\");\n    const { assistantService, semanticModelStore, classStore } = useStores();\n    const [types, setTypes] = useState<{ [id: string]: Class }>({});\n    const [props, setProps] = useState<{ [id: string]: Property }>({});\n    const [typeCfg, setTypeCfg] = useState({\n      includeNil: false,\n      includeUnlinked: false,\n    });\n\n    useEffect(() => {\n      assistantService.getColumnTypes(table, columnIndex, false).then(setTypes);\n      // assistantService\n      //   .getColumnProperties(table, columnIndex, false)\n      //   .then(setProps);\n    }, [menu]);\n\n    return (\n      <div style={{ minWidth: 495, padding: 8 }}>\n        <Tabs className={classes.tab} defaultActiveKey=\"by-type\" size={\"small\"}>\n          <Tabs.TabPane tab=\"Filter By Type\" key=\"by-type\">\n            <TypeTreeFilter\n              key={`${table.id} ${columnIndex}`}\n              types={types}\n              filter={filter}\n            />\n          </Tabs.TabPane>\n          <Tabs.TabPane tab=\"Filter By Property\" key=\"by-prop\">\n            <PropTreeFilter\n              key={`${table.id} ${columnIndex}`}\n              properties={props}\n              filter={filter}\n            />\n          </Tabs.TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n);\n","export const Number: React.FunctionComponent<\n  {\n    value: number;\n    fractionDigits?: number;\n  } & Omit<React.HTMLProps<HTMLSpanElement>, \"title\">\n> = ({ value, fractionDigits, ...restprops }) => {\n  return (\n    <span title={value.toString()} {...restprops}>\n      {value.toFixed(fractionDigits)}\n    </span>\n  );\n};\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { blue, grey } from \"@ant-design/colors\";\nimport { useState } from \"react\";\n\nconst styles = {\n  checkboxIcon: {\n    padding: \"1px 2px\",\n    border: \"1px solid\",\n    borderRadius: 2,\n    fontSize: 12,\n    marginBottom: -1,\n  },\n};\n\nexport const CheckboxIcon = withStyles(styles)(\n  ({\n    icon,\n    classes,\n    selected,\n    onChange,\n    colorSelected = blue[5],\n    colorUnselected = grey[5],\n  }: {\n    icon: IconProp;\n    selected?: boolean;\n    onChange?: (selected: boolean) => void;\n    colorSelected?: string;\n    colorUnselected?: string;\n  } & WithStyles<typeof styles>) => {\n    const [stateSelected, setStateSelected] = useState(false);\n    const toggle = () => {\n      if (selected !== undefined && onChange !== undefined) {\n        return onChange(!selected);\n      }\n\n      setStateSelected(!stateSelected);\n      if (onChange !== undefined) {\n        onChange(!stateSelected);\n      }\n    };\n\n    const correctSelected = selected === undefined ? stateSelected : selected;\n\n    return (\n      <FontAwesomeIcon\n        icon={icon}\n        color={correctSelected ? colorSelected : colorUnselected}\n        className={classes.checkboxIcon}\n        onClick={toggle}\n      />\n    );\n  }\n);\n","import { Tooltip } from \"antd\";\nimport { useState } from \"react\";\n\nexport const AutoHideTooltip: React.FC<{ title: string; ms: number }> = ({\n  children,\n  title,\n  ms,\n}) => {\n  const [visible, setVisible] = useState(false);\n  const autoHide = (visible: boolean) => {\n    if (visible) {\n      setVisible(true);\n      setTimeout(() => {\n        setVisible(false);\n      }, ms);\n    }\n  };\n\n  return (\n    <Tooltip\n      title={title}\n      visible={visible}\n      onVisibleChange={autoHide}\n      trigger=\"click\"\n    >\n      {children}\n    </Tooltip>\n  );\n};\n","import { blue, grey } from \"@ant-design/colors\";\nimport ProTable from \"@ant-design/pro-table\";\nimport {\n  faCheck,\n  faCheckDouble,\n  faPlus,\n  faBan,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Button, Divider, Modal, Space, Typography } from \"antd\";\nimport { runInAction, toJS } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport React, { useState } from \"react\";\nimport { CheckboxIcon, Number } from \"../../../components/element\";\nimport {\n  FetchEntityComponent,\n  InlineEntityComponent,\n  PopoverEntityComponent,\n} from \"../../../components/entity\";\nimport { useStores } from \"../../../models\";\nimport { appConfig } from \"../../../models/settings\";\nimport { TableRow, Link } from \"../../../models/table\";\nimport { EntitySearchComponent } from \"../OntSearchComponent\";\n\nconst styles = {\n  correctCandidateEntity: {\n    color: blue[5],\n  },\n  candidateEntity: {\n    color: grey[5],\n    \"&:hover\": {\n      color: `${grey[5]} !important`,\n    },\n  },\n  candidateEntitySeeMore: {\n    color: grey[5],\n    cursor: \"pointer\",\n  },\n};\n\n/**\n * Component to help select candidate entity for a given cell.\n */\nexport const CandidateEntityListComponent = withStyles(styles)(\n  observer(\n    ({\n      record: record,\n      index,\n      classes,\n      topK = 3,\n    }: {\n      record: TableRow;\n      index: number;\n      topK?: number;\n    } & WithStyles<typeof styles>) => {\n      const { tableRowStore, tableStore } = useStores();\n      const [showAllCandidateModals, setShowAllCandidateModals] =\n        useState(false);\n      const singleUpdate = (entityId: string) => {\n        return (select: boolean) => {\n          return tableRowStore.updateCellLinks(\n            record,\n            index,\n            select ? entityId : undefined,\n            false // don't save the candidate entities\n          );\n        };\n      };\n\n      const selectMultiple = (entityId: string) => {\n        return (select: boolean) => {\n          const value = record.row[index];\n          if (typeof value === \"number\") {\n            throw new Error(`Can't not link a number \"${value}\" to an entity`);\n          }\n\n          return tableRowStore.updateColumnLinks(\n            tableStore.get(record.table)!,\n            index,\n            value,\n            select ? entityId : undefined\n          );\n        };\n      };\n\n      const links = record.links[index] || [];\n      const candidateLst = [];\n      if (links.length > 0) {\n        for (let candidateEntity of links[0].candidateEntities.slice(0, topK)) {\n          const className =\n            candidateEntity.entityId === links[0].entityId\n              ? classes.correctCandidateEntity\n              : classes.candidateEntity;\n\n          candidateLst.push(\n            <div key={candidateEntity.entityId}>\n              <Space size={4}>\n                <CheckboxIcon\n                  icon={faCheck}\n                  selected={links[0].entityId === candidateEntity.entityId}\n                  onChange={singleUpdate(candidateEntity.entityId)}\n                />\n                <CheckboxIcon\n                  icon={faCheckDouble}\n                  selected={links[0].entityId === candidateEntity.entityId}\n                  onChange={selectMultiple(candidateEntity.entityId)}\n                />\n                <FetchEntityComponent\n                  entityId={candidateEntity.entityId}\n                  render={(entity, settings) => (\n                    <PopoverEntityComponent entity={entity} settings={settings}>\n                      <InlineEntityComponent\n                        nolink={true}\n                        entity={entity}\n                        className={className}\n                      />\n                    </PopoverEntityComponent>\n                  )}\n                />\n                <span className={className}>\n                  (\n                  <Number\n                    value={candidateEntity.probability}\n                    fractionDigits={3}\n                  />\n                  )\n                </span>\n              </Space>\n            </div>\n          );\n        }\n\n        // if there is a correct entity in top K, no need to highlight, otherwise,\n        // add them to the list\n        const idx = links[0].candidateEntities.findIndex(\n          (candidate) => candidate.entityId === links[0].entityId\n        );\n        if (idx !== -1 && idx >= topK) {\n          const candidateEntity = links[0].candidateEntities[idx];\n          candidateLst.push(\n            <div key={candidateEntity.entityId}>\n              <Space size={4}>\n                <CheckboxIcon\n                  icon={faCheck}\n                  selected={links[0].entityId === candidateEntity.entityId}\n                  onChange={singleUpdate(candidateEntity.entityId)}\n                />\n                <CheckboxIcon\n                  icon={faCheckDouble}\n                  selected={links[0].entityId === candidateEntity.entityId}\n                  onChange={selectMultiple(candidateEntity.entityId)}\n                />\n                <FetchEntityComponent\n                  entityId={candidateEntity.entityId}\n                  render={(entity, settings) => (\n                    <span className={classes.correctCandidateEntity}>\n                      ({idx})&nbsp;\n                      <PopoverEntityComponent\n                        entity={entity}\n                        settings={settings}\n                      >\n                        <InlineEntityComponent nolink={true} entity={entity} />\n                      </PopoverEntityComponent>\n                    </span>\n                  )}\n                />\n                <span className={classes.correctCandidateEntity}>\n                  (\n                  <Number\n                    value={candidateEntity.probability}\n                    fractionDigits={3}\n                  />\n                  )\n                </span>\n              </Space>\n            </div>\n          );\n        }\n\n        if (links[0].candidateEntities.length > topK) {\n          candidateLst.push(\n            <div key=\"see-more\">\n              <Typography.Text\n                className={classes.candidateEntitySeeMore}\n                onClick={() =>\n                  setShowAllCandidateModals(!showAllCandidateModals)\n                }\n              >\n                See more\n              </Typography.Text>\n            </div>\n          );\n        }\n      }\n\n      // nil entity & create new entity\n      const className =\n        links.length > 0 && links[0].entityId === appConfig.NIL_ENTITY\n          ? classes.correctCandidateEntity\n          : classes.candidateEntity;\n\n      candidateLst.push(\n        <div className={className} key=\"nil-entity\">\n          <Space size={4}>\n            <CheckboxIcon\n              icon={faCheck}\n              selected={\n                links.length > 0 && links[0].entityId === appConfig.NIL_ENTITY\n              }\n              onChange={singleUpdate(appConfig.NIL_ENTITY)}\n            />\n            <CheckboxIcon\n              icon={faCheckDouble}\n              selected={\n                links.length > 0 && links[0].entityId === appConfig.NIL_ENTITY\n              }\n              onChange={selectMultiple(appConfig.NIL_ENTITY)}\n            />\n            <FetchEntityComponent\n              entityId={appConfig.NIL_ENTITY}\n              render={(entity, settings) => (\n                <PopoverEntityComponent entity={entity} settings={settings}>\n                  <InlineEntityComponent\n                    nolink={true}\n                    entity={entity}\n                    className={className}\n                  />\n                </PopoverEntityComponent>\n              )}\n            />\n          </Space>\n        </div>\n      );\n      candidateLst.push(\n        <div className={classes.candidateEntity} key=\"new-entity\">\n          <Space\n            size={4}\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              const content = (\n                <EntitySearchComponent\n                  onSelect={(entityId) => {\n                    singleUpdate(entityId)(true).then(() => {\n                      Modal.destroyAll();\n                    });\n                  }}\n                />\n              );\n\n              Modal.info({\n                title: (\n                  <span style={{ marginBottom: 16, display: \"inline-block\" }}>\n                    Search Entity\n                  </span>\n                ),\n                content,\n                bodyStyle: { margin: -8 },\n                okButtonProps: { style: { display: \"none\" } },\n                maskClosable: true,\n                mask: true,\n              });\n            }}\n          >\n            <CheckboxIcon icon={faPlus} />\n            Create\n          </Space>\n        </div>\n      );\n\n      const columns: any = [\n        {\n          dataIndex: \"id\",\n          title: \"Entity\",\n          render: (entityId: string) => {\n            return (\n              <FetchEntityComponent\n                entityId={entityId}\n                render={(entity, settings) => (\n                  <PopoverEntityComponent entity={entity} settings={settings}>\n                    <InlineEntityComponent nolink={true} entity={entity} />\n                  </PopoverEntityComponent>\n                )}\n              />\n            );\n          },\n        },\n        {\n          dataIndex: \"score\",\n          title: \"Score\",\n          render: (score: number) => {\n            return <Number value={score} fractionDigits={5} />;\n          },\n        },\n        {\n          title: \"action\",\n          render: () => {\n            return (\n              <Space size={4}>\n                <Button>Select</Button>\n              </Space>\n            );\n          },\n        },\n      ];\n\n      return (\n        <React.Fragment>\n          {candidateLst}\n          <Modal\n            title=\"Candidate Entities\"\n            visible={showAllCandidateModals}\n            style={{ top: 20 }}\n            bodyStyle={{ padding: 0 }}\n            width={\"60%\"}\n            onOk={() => setShowAllCandidateModals(false)}\n            onCancel={() => setShowAllCandidateModals(false)}\n          >\n            <ProTable\n              defaultSize=\"small\"\n              bordered={true}\n              search={false}\n              pagination={{\n                pageSize: 20,\n                pageSizeOptions: [\"20\", \"50\", \"100\", \"200\", \"500\", \"1000\"],\n              }}\n              rowKey=\"id\"\n              columns={columns}\n              request={async (params, sort, filter) => {\n                return Promise.resolve({\n                  total:\n                    links.length > 0 ? links[0].candidateEntities.length : 0,\n                  success: true,\n                  data:\n                    links.length === 0\n                      ? []\n                      : links[0].candidateEntities\n                          .slice(\n                            (params.current! - 1) * params.pageSize!,\n                            params.current! * params.pageSize!\n                          )\n                          .map((candidateEntity, index) => ({\n                            id: candidateEntity.entityId,\n                            score: candidateEntity.probability,\n                          })),\n                });\n              }}\n            ></ProTable>\n          </Modal>\n        </React.Fragment>\n      );\n    }\n  )\n);\n","import { withStyles, WithStyles } from \"@material-ui/styles\";\nimport {\n  FetchEntityComponent,\n  openPageEntityComponent,\n  PopoverEntityComponent,\n} from \"../../../components/entity\";\nimport { grey } from \"@ant-design/colors\";\nimport { CandidateEntityListComponent } from \"./CandidateEntityListComponent\";\nimport { ExternalLink } from \"gena-app\";\nimport { TableRow } from \"../../../models/table\";\nimport { observer } from \"mobx-react\";\nimport { useStores } from \"../../../models\";\nimport { appConfig } from \"../../../models/settings\";\n\nconst styles = {\n  link: {\n    textDecoration: \"underline\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n  noEntityLink: {\n    color: grey[5],\n    \"&:hover\": {\n      color: grey[5],\n    },\n  },\n};\n\nexport const CellComponent = withStyles(styles)(\n  observer(\n    ({\n      cell,\n      record,\n      index,\n      classes,\n      topK = 3,\n    }: {\n      cell: string;\n      record: TableRow;\n      index: number;\n      topK?: number;\n    } & WithStyles<typeof styles>) => {\n      const { uiSettings } = useStores();\n\n      const links = record.links[index] || [];\n      let components = links.flatMap((link, index) => {\n        let prefix =\n          index === 0\n            ? cell.substring(0, link.start)\n            : cell.substring(links[index - 1].end, link.start);\n        let linksurface = cell.substring(link.start, link.end);\n        let onCtrlClick = undefined;\n        if (link.entityId !== undefined) {\n          onCtrlClick = () => {\n            openPageEntityComponent(link.entityId!);\n          };\n        }\n        const infix =\n          link.url === undefined && link.entityId === undefined ? (\n            linksurface\n          ) : (\n            <ExternalLink\n              key={index}\n              href={link.url}\n              openInNewPage={true}\n              dangerouslySetInnerHTML={{\n                __html: linksurface.trim() === \"\" ? \"&blank;\" : linksurface,\n              }}\n              className={\n                classes.link +\n                (link.entityId === undefined ||\n                link.entityId === appConfig.NIL_ENTITY\n                  ? \" \" + classes.noEntityLink\n                  : \"\")\n              }\n              style={link.entityId === null ? { color: \"#aaa\" } : {}}\n              onCtrlClick={onCtrlClick}\n            />\n          );\n\n        if (link.entityId === undefined) {\n          return [prefix, infix];\n        }\n\n        // reassign to infix somehow killing the application\n        const wrappedInfix = (\n          <FetchEntityComponent\n            key={index}\n            entityId={link.entityId}\n            render={(entity, settings) => (\n              <PopoverEntityComponent\n                entity={entity}\n                zIndex={500}\n                settings={settings}\n              >\n                {infix}\n              </PopoverEntityComponent>\n            )}\n            renderNotFound={() => (\n              <span className={classes.noEntityLink}>{infix}</span>\n            )}\n          />\n        );\n\n        return [prefix, wrappedInfix];\n      });\n\n      if (links.length === 0) {\n        components.push(cell);\n      } else {\n        components.push(cell.substring(links[links.length - 1].end));\n      }\n\n      return (\n        <div>\n          {components}\n          {uiSettings.table.showEntityLinkingEditor &&\n          typeof record.row[index] !== \"number\" ? (\n            <CandidateEntityListComponent\n              record={record}\n              index={index}\n              topK={topK}\n            />\n          ) : null}\n        </div>\n      );\n    }\n  )\n);\n","import { action, computed, makeObservable, observable, toJS } from \"mobx\";\nimport { ClassStore, EntityStore, TableRow } from \"../../../../models\";\nimport { appConfig } from \"../../../../models/settings\";\n\nexport class ColumnFilter {\n  public type2op: { [type: string]: \"null\" | \"include\" | \"exclude\" } = {};\n  public selectNil: boolean = false;\n  public selectUnlinked: boolean = false;\n  public includeCandidateEntities: boolean = true;\n\n  protected columnIndex: number;\n  protected onChange: () => void;\n\n  constructor(columnIndex: number, onChange: () => void) {\n    this.columnIndex = columnIndex;\n    this.onChange = onChange;\n\n    makeObservable(this, {\n      type2op: observable,\n      selectNil: observable,\n      selectUnlinked: observable,\n      includeCandidateEntities: observable,\n      hasFilter: computed,\n      addTypes: action,\n      setSelectNil: action,\n      setSelectUnlinked: action,\n      setIncludeCandidateEntities: action,\n      toggleAllType: action,\n      setTypeOp: action,\n    });\n  }\n\n  addTypes = (types: string[]) => {\n    for (const type of types) {\n      this.type2op[type] = \"null\";\n    }\n  };\n\n  setIncludeCandidateEntities = (value: boolean) => {\n    if (this.includeCandidateEntities === value) return;\n    this.includeCandidateEntities = value;\n    this.onChange();\n  };\n\n  setSelectNil = (value: boolean) => {\n    if (this.selectNil === value) return;\n    this.selectNil = value;\n    this.onChange();\n  };\n\n  setSelectUnlinked = (value: boolean) => {\n    if (this.selectUnlinked === value) return;\n    this.selectUnlinked = value;\n    this.onChange();\n  };\n\n  /**\n   * Set all types to a new op if the next state is checked.\n   * Otherwise, only states of the same op are changed to null.\n   */\n  toggleAllType = (op: \"null\" | \"include\" | \"exclude\", checked: boolean) => {\n    let hasChange = false;\n\n    if (checked) {\n      for (const type in this.type2op) {\n        if (this.type2op[type] === op) continue;\n        this.type2op[type] = op;\n        hasChange = true;\n      }\n    } else {\n      for (const type in this.type2op) {\n        if (this.type2op[type] === op) {\n          this.type2op[type] = \"null\";\n          hasChange = true;\n        }\n      }\n    }\n\n    if (hasChange) {\n      this.onChange();\n    }\n  };\n\n  setTypeOp = (type: string, op: \"null\" | \"include\" | \"exclude\") => {\n    if (this.type2op[type] === op) return;\n    this.type2op[type] = op;\n    this.onChange();\n  };\n\n  hasAnyOp = (op: \"null\" | \"include\" | \"exclude\") => {\n    for (const type in this.type2op) {\n      if (this.type2op[type] === op) return true;\n    }\n    return false;\n  };\n\n  hasAllOp = (op: \"null\" | \"include\" | \"exclude\") => {\n    for (const type in this.type2op) {\n      if (this.type2op[type] !== op) return false;\n    }\n    return true;\n  };\n\n  /** Whether we have any filter on */\n  get hasFilter() {\n    for (const type in this.type2op) {\n      if (this.type2op[type] !== \"null\") return true;\n    }\n    return this.selectNil || this.selectUnlinked;\n  }\n\n  /** Test whether the row match this filter */\n  getFilterExec = (entStore: EntityStore, classStore: ClassStore) => {\n    // gather include & exclude types\n    const includeTypeIds: string[] = [];\n    const excludeTypeIds: string[] = [];\n    for (const type in this.type2op) {\n      if (this.type2op[type] === \"include\") {\n        includeTypeIds.push(type);\n      } else if (this.type2op[type] === \"exclude\") {\n        excludeTypeIds.push(type);\n      }\n    }\n\n    return async (row: TableRow) => {\n      if (!this.hasFilter) return true;\n\n      // nil and unlinked are or operator (not and operator)\n      if (this.selectNil || this.selectUnlinked) {\n        for (const link of row.links[this.columnIndex] || []) {\n          if (\n            (this.selectNil && link.entityId === appConfig.NIL_ENTITY) ||\n            (this.selectUnlinked && link.entityId === undefined)\n          )\n            return true;\n        }\n\n        if (\n          this.selectUnlinked &&\n          (row.links[this.columnIndex] || []).length === 0\n        ) {\n          return true;\n        }\n\n        return false;\n      }\n\n      // now apply the filter on those types\n      const entIds = new Set<string>();\n      for (const link of row.links[this.columnIndex] || []) {\n        if (\n          link.entityId !== appConfig.NIL_ENTITY &&\n          link.entityId !== undefined\n        ) {\n          entIds.add(link.entityId);\n        }\n        if (this.includeCandidateEntities) {\n          for (const canEnt of link.candidateEntities) {\n            entIds.add(canEnt.entityId);\n          }\n        }\n      }\n\n      if (entIds.size === 0) return false;\n\n      const ents = await entStore.fetchByIds(Array.from(entIds));\n      const classes = await classStore.fetchByIds(\n        Object.values(ents).flatMap((ent) => {\n          const instanceOf = appConfig.instanceof(ent.uri);\n          if (\n            instanceOf === undefined ||\n            ent.properties[instanceOf] === undefined\n          ) {\n            return [];\n          }\n\n          const output = [];\n          for (const stmt of ent.properties[instanceOf]) {\n            if (stmt.value.type === \"entityid\") {\n              output.push(stmt.value.value);\n            }\n          }\n          return output;\n        })\n      );\n\n      return (\n        (includeTypeIds.length === 0 ||\n          Object.values(classes).some((klass) =>\n            includeTypeIds.some(\n              (typeId) =>\n                klass.id === typeId || klass.parentsClosure.has(typeId)\n            )\n          )) &&\n        (excludeTypeIds.length === 0 ||\n          !Object.values(classes).some((klass) =>\n            excludeTypeIds.some(\n              (typeId) =>\n                klass.id === typeId || klass.parentsClosure.has(typeId)\n            )\n          ))\n      );\n    };\n  };\n}\n\nexport class TableFilter {\n  public columnFilters: ColumnFilter[] = [];\n\n  protected onChange = (filter: TableFilter) => {};\n\n  constructor(nColumns: number, onChange?: (filter: TableFilter) => void) {\n    if (onChange !== undefined) {\n      this.onChange = onChange;\n    }\n\n    for (let i = 0; i < nColumns; i++) {\n      this.columnFilters.push(\n        new ColumnFilter(i, () => {\n          this.handleChange();\n        })\n      );\n    }\n\n    makeObservable(this, {\n      columnFilters: observable,\n      setOnChange: action,\n    });\n  }\n\n  setOnChange = (onChange: (filter: TableFilter) => void) => {\n    this.onChange = onChange;\n  };\n\n  handleChange = () => {\n    this.onChange(this);\n  };\n\n  /** Whether we have any filter on */\n  hasFilter = () => {\n    return this.columnFilters.some((c) => c.hasFilter);\n  };\n\n  /** Filter rows */\n  filter = async (\n    rows: TableRow[],\n    entStore: EntityStore,\n    classStore: ClassStore\n  ) => {\n    const filterExecs = this.columnFilters.map((c) =>\n      c.getFilterExec(entStore, classStore)\n    );\n\n    const matches = await Promise.all(\n      rows.map((row) => {\n        return Promise.all(filterExecs.map((exec) => exec(row))).then(\n          (results) => {\n            return results.every((res) => res);\n          }\n        );\n      })\n    );\n    return rows.filter((row, i) => matches[i]);\n  };\n}\n","import { SearchOutlined } from \"@ant-design/icons\";\nimport ProTable, { ActionType } from \"@ant-design/pro-table\";\nimport { withStyles, WithStyles } from \"@material-ui/styles\";\nimport { Descriptions, Typography } from \"antd\";\nimport { toJS } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport React, {\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { ExternalLink } from \"gena-app\";\nimport {\n  FetchEntityComponent,\n  InlineEntityComponent,\n  openPageEntityComponent,\n  PopoverEntityComponent,\n} from \"../../../components/entity\";\nimport { Table, TableRow } from \"../../../models/table\";\nimport {\n  isLineBreak,\n  LineBreak,\n  Text,\n} from \"../../../models/table/TableContext\";\nimport { TableColumnFilter } from \"../TableColumn\";\nimport { CellComponent } from \"./CellComponent\";\nimport { TableFilter } from \"./filters/Filter\";\nimport { tableStyles } from \"./styles\";\n\nexport const styles = {\n  table: tableStyles,\n};\n\nexport interface TableComponentFunc {\n  reload: () => void;\n}\n\nexport const TableComponent = withStyles(styles)(\n  observer(\n    forwardRef(\n      (\n        {\n          table,\n          query,\n          classes,\n          toolBarRender,\n          showRowIndex = false,\n        }: {\n          table: Table;\n          query: (\n            limit: number,\n            offset: number,\n            filter: TableFilter\n          ) => Promise<{ rows: TableRow[]; total: number }>;\n          toolBarRender?: false;\n          showRowIndex?: boolean;\n        } & WithStyles<typeof styles>,\n        ref\n      ) => {\n        const actionRef = useRef<ActionType>();\n        const [filter, _setFilter] = useState(\n          new TableFilter(table.columns.length, (filter: TableFilter) => {\n            // reload the table and reset the page index cause we update the filter\n            // another reason is some how without resetting the page index, protable triggers the request\n            // function twice\n            actionRef.current?.reload(true);\n          })\n        );\n\n        useImperativeHandle(\n          ref,\n          (): TableComponentFunc => ({\n            reload: () => {\n              actionRef.current?.reload();\n            },\n          })\n        );\n\n        const columns = table.columns.map((col, columnIndex) => ({\n          dataIndex: [\"row\", columnIndex],\n          title: table.columns[columnIndex],\n          render: ((value: string, record: TableRow) => {\n            return (\n              <CellComponent cell={value} record={record} index={columnIndex} />\n            );\n          }) as any,\n          filterDropdown: (\n            <TableColumnFilter\n              table={table}\n              columnIndex={columnIndex}\n              filter={filter.columnFilters[columnIndex]}\n            />\n          ),\n          filterIcon: (\n            <SearchOutlined\n              style={{\n                color: filter.columnFilters[columnIndex].hasFilter\n                  ? \"#1890ff\"\n                  : undefined,\n              }}\n            />\n          ),\n        }));\n\n        if (showRowIndex) {\n          columns.splice(0, 0, {\n            title: (\n              <Typography.Text type=\"secondary\" disabled={true}>\n                #\n              </Typography.Text>\n            ),\n            dataIndex: \"index\",\n          } as any);\n        }\n\n        return (\n          <>\n            <ProTable\n              actionRef={actionRef}\n              className={classes.table}\n              defaultSize=\"small\"\n              bordered={true}\n              params={{ filter }}\n              request={async (params, sort, filter) => {\n                const { rows, total } = await query(\n                  params.pageSize!,\n                  (params.current! - 1) * params.pageSize!,\n                  params.filter\n                );\n                return {\n                  data: rows,\n                  success: true,\n                  total,\n                };\n              }}\n              search={false}\n              pagination={{\n                pageSize: 5,\n                pageSizeOptions: [\n                  \"5\",\n                  \"10\",\n                  \"20\",\n                  \"50\",\n                  \"100\",\n                  \"200\",\n                  \"500\",\n                  \"1000\",\n                ],\n              }}\n              headerTitle={\n                table.contextPage.url !== undefined ? (\n                  <ExternalLink\n                    href={table.contextPage.url}\n                    openInNewPage={true}\n                  >\n                    {table.name}\n                  </ExternalLink>\n                ) : (\n                  table.name\n                )\n              }\n              toolBarRender={toolBarRender}\n              rowKey=\"index\"\n              columns={columns}\n            />\n            <TableInformation table={table} />\n          </>\n        );\n      }\n    )\n  )\n);\n\nexport const TableInformation: React.FunctionComponent<{\n  table: Table;\n}> = ({ table }) => {\n  const info: [string, React.ReactNode][] = [\n    [\"Description\", table.description],\n  ];\n\n  if (table.contextPage.url !== undefined) {\n    info.push([\n      \"From website\",\n      <ExternalLink href={table.contextPage.url} openInNewPage={true}>\n        {table.contextPage.title}\n      </ExternalLink>,\n    ]);\n  } else {\n    info.push([\"From website\", \"N/A\"]);\n  }\n  info.push([\n    \"Associated Entity\",\n    table.contextPage.entityId !== undefined ? (\n      <FetchEntityComponent\n        entityId={table.contextPage.entityId}\n        render={(entity, settings) => (\n          <PopoverEntityComponent\n            entity={entity}\n            zIndex={500}\n            settings={settings}\n          >\n            <InlineEntityComponent\n              entity={entity}\n              onCtrlClick={() => {\n                openPageEntityComponent({ entity, settings });\n              }}\n            />\n          </PopoverEntityComponent>\n        )}\n        renderNotFound={() => (\n          <span>`Entity ${table.contextPage.entityId} does not exist`</span>\n        )}\n      />\n    ) : (\n      \"N/A\"\n    ),\n  ]);\n\n  let content = (table.contextHierarchy || []).flatMap((hierarchy, index) => {\n    if (hierarchy.level === 0 && hierarchy.heading.trim().length === 0) {\n      if (\n        hierarchy.contentBefore.every(isLineBreak) &&\n        hierarchy.contentAfter.length === 0\n      ) {\n        return [];\n      }\n    }\n    const output = [\n      <p key={`${index}-head`}>\n        <b>\n          {\"#\".repeat(hierarchy.level)} {hierarchy.heading}\n        </b>\n      </p>,\n    ];\n    return output\n      .concat(ContentComponent(`${index}-before`, hierarchy.contentBefore))\n      .concat(ContentComponent(`${index}-after`, hierarchy.contentAfter));\n  });\n  info.push([\n    \"Content Hierarchy\",\n    content.length > 0 ? <div>{content}</div> : \"N/A\",\n  ]);\n\n  return (\n    <Descriptions title=\"Table Info\" size=\"small\">\n      {info.map(([label, value]) => (\n        <Descriptions.Item key={label} label={label}>\n          {value}\n        </Descriptions.Item>\n      ))}\n    </Descriptions>\n  );\n};\n\nconst ContentComponent = (key: string, lines: (Text | LineBreak)[]) => {\n  const comps: string[][] = [[]];\n  for (const line of lines) {\n    if (isLineBreak(line)) {\n      comps.push([]);\n    } else {\n      comps[comps.length - 1].push(line.value);\n    }\n  }\n  return comps\n    .filter((lst) => lst.length > 0)\n    .map((lst, i) => <p key={`${key}-${i}`}>{lst}</p>);\n};\n","/** Table styles applied to all tables */\nexport const tableStyles = {\n  width: \"100%\",\n  \"& div.ant-table-container\": {\n    border: \"1px solid #bbb\",\n    borderRadius: 4,\n    borderLeft: \"1px solid #bbb !important\",\n  },\n  \"& div.ant-card-body\": {\n    paddingLeft: 0,\n    paddingRight: 0,\n  },\n  \"& th\": {\n    fontWeight: 600,\n  },\n  \"& .ant-table-cell\": {\n    verticalAlign: \"top\",\n  },\n};\n","import { Button, PageHeader, Space } from \"antd\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { AutoHideTooltip } from \"../../components\";\nimport { Table, Project, useStores } from \"../../models\";\nimport { routes } from \"../../routes\";\nimport _ from \"lodash\";\nimport { history } from \"gena-app\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\n\nfunction useTableNavigation(tableId: number) {\n  const { tableStore } = useStores();\n  const PREFETCH_LIMIT = 50;\n  const queryParams = routes.table.useQueryParams();\n  const b64query = queryParams === null ? \"\" : queryParams.query;\n  const tableQueryConditions = useMemo(\n    () => (b64query !== \"\" ? tableStore.decodeWhereQuery(b64query) : {}),\n    [tableStore, b64query]\n  );\n\n  // Note: assume that the list is always sorted by id (which the order which the table)\n  // is inserted into the DB\n  const [state, setState] = useState({\n    tableId: -1,\n    tableIndex: -1,\n    query: \"\",\n    records: [] as number[],\n    leftOffset: 0,\n    total: 0,\n    hasPrev: false,\n    hasNext: false,\n    allLeft: false,\n    allRight: false,\n    version: 0,\n  });\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const fn = async () => {\n      // we reinit the state whenever the query change, or table id is moved\n      // too far from the list (e.g., when users modify the URL)\n      const idx = _.sortedIndex(state.records, tableId);\n      const reinit = state.query !== b64query || state.records[idx] !== tableId;\n      let newState: Partial<typeof state>;\n\n      if (reinit) {\n        const [gtr, ltr] = await Promise.all([\n          tableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"gte\", value: tableId },\n            },\n          }),\n          tableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"lt\", value: tableId },\n            },\n          }),\n        ]);\n\n        const records = ltr.records\n          .map((tbl) => tbl.id)\n          .concat(gtr.records.map((tbl) => tbl.id));\n        newState = {\n          tableIndex: ltr.records.length,\n          records,\n          total: ltr.total + gtr.total,\n          leftOffset: ltr.total - ltr.records.length,\n          allLeft: ltr.total <= PREFETCH_LIMIT,\n          allRight: gtr.total <= PREFETCH_LIMIT,\n          hasPrev: ltr.records.length > 0,\n          hasNext: gtr.records.length > 1,\n        };\n      } else {\n        // only table id change, we fetch if it's near the boundary\n        if (idx === 0 && !state.allLeft) {\n          const ltr = await tableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"lt\", value: tableId },\n            },\n          });\n          newState = {\n            tableIndex: ltr.records.length,\n            leftOffset: ltr.total - ltr.records.length,\n            records: ltr.records.map((tbl) => tbl.id).concat(state.records),\n            allLeft: ltr.total <= PREFETCH_LIMIT,\n            hasPrev: ltr.records.length > 0,\n          };\n        } else if (idx === state.records.length - 1 && !state.allRight) {\n          const gtr = await tableStore.query({\n            limit: PREFETCH_LIMIT,\n            offset: 0,\n            fields: [\"id\"],\n            conditions: {\n              ...tableQueryConditions,\n              id: { op: \"gt\", value: tableId },\n            },\n          });\n          newState = {\n            tableIndex: idx,\n            records: state.records.concat(gtr.records.map((tbl) => tbl.id)),\n            allRight: gtr.total <= PREFETCH_LIMIT,\n            hasNext: gtr.records.length > 0,\n          };\n        } else {\n          newState = {\n            tableIndex: idx,\n            hasNext: idx < state.records.length - 1,\n            hasPrev: idx > 0,\n          };\n        }\n      }\n\n      if (isMounted) {\n        setState({\n          ...state,\n          ...newState,\n          version: state.version + 1,\n          query: b64query,\n          tableId,\n        });\n      }\n    };\n\n    fn();\n\n    return () => {\n      isMounted = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableId, b64query]);\n\n  // open another table relative to the current table by some offset\n  const move = (offset: number) => {\n    if (tableId !== state.tableId) {\n      // they call the function too fast before the state is updated\n      return;\n    }\n\n    const nextTableId = state.records[state.tableIndex + offset];\n    if (nextTableId !== undefined) {\n      routes.table.path({ tableId: nextTableId }, { query: b64query }).open();\n    }\n  };\n\n  return {\n    // get id of the table relative to the current table by some offset\n    toPreviousTable: () => {\n      move(-1);\n    },\n    toNextTable: () => {\n      move(1);\n    },\n    navState: state,\n  };\n}\n\nexport const TableNavBar = (props: {\n  project: Project | null | undefined;\n  table: Table;\n  btns?: React.ReactNode[];\n  extraSubTitle?: React.ReactNode;\n}) => {\n  let project = props.project || new Project(0, \"\", \"\");\n  const { navState, toNextTable, toPreviousTable } = useTableNavigation(\n    props.table.id\n  );\n\n  useHotkeys(\"b\", toPreviousTable, [props.table.id, navState.version]);\n  useHotkeys(\"n\", toNextTable, [props.table.id, navState.version]);\n\n  return (\n    <PageHeader\n      onBack={() =>\n        history.push(\n          routes.project.getURL({\n            projectId: props.table.project,\n          })\n        )\n      }\n      title={\n        <Space key=\"title\">\n          <span style={{ fontWeight: 500 }}>Table </span>\n          <AutoHideTooltip title=\"copied\" ms={500}>\n            <span\n              style={{\n                color: \"#237804\",\n                textDecoration: \"underline\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => navigator.clipboard.writeText(props.table.name)}\n            >\n              {props.table.name}\n            </span>\n          </AutoHideTooltip>\n        </Space>\n      }\n      subTitle={\n        <Space key=\"sub-title\">\n          <span>\n            (Project <b>{project.name}</b>)\n          </span>\n          <span className=\"ml-2\">\n            Position:{\" \"}\n            <b>\n              {\" \"}\n              {navState.leftOffset + navState.tableIndex + 1}/{navState.total}\n            </b>\n          </span>\n        </Space>\n      }\n      extra={[\n        <Button\n          key=\"prev\"\n          onClick={toPreviousTable}\n          disabled={!navState.hasPrev}\n        >\n          Previous Table (B)\n        </Button>,\n        <Button key=\"next\" onClick={toNextTable} disabled={!navState.hasNext}>\n          Next Table (N)\n        </Button>,\n      ]}\n    />\n  );\n};\n","import { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Button, PageHeader, Space } from \"antd\";\nimport _ from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport { history, LoadingComponent, NotFoundComponent } from \"gena-app\";\nimport { AutoHideTooltip } from \"../../components/element\";\nimport {\n  DraftSemanticModel,\n  Project,\n  Table,\n  TableStore as TableStoreType,\n  useStores,\n} from \"../../models\";\nimport { routes } from \"../../routes\";\nimport { EntitySettingComponent } from \"./EntitySettingComponent\";\nimport { MenuBar } from \"./MenuBar\";\nimport {\n  SemanticModelComponent,\n  SemanticModelComponentFunc,\n} from \"./SemanticModelComponent\";\nimport { TableComponent } from \"./table\";\nimport { TableFilter } from \"./table/filters/Filter\";\nimport { TableComponentFunc } from \"./table/TableComponent\";\nimport { TableNavBar } from \"./TableNavBar\";\n\n// https://cssinjs.org/jss-plugin-nested?v=v10.8.0#use--to-reference-selector-of-the-parent-rule\nconst styles = {\n  table: {\n    marginTop: 8,\n    \"& div.ant-table-container\": {\n      border: \"1px solid #bbb\",\n      borderRadius: 4,\n      borderLeft: \"1px solid #bbb !important\",\n    },\n  },\n  container: {\n    marginLeft: 24,\n    marginRight: 24,\n  },\n};\n\nexport const TablePage = withStyles(styles)(\n  observer(({ classes }: WithStyles<typeof styles>) => {\n    // use stores\n    const {\n      projectStore,\n      tableStore,\n      tableRowStore,\n      semanticModelStore,\n      assistantService,\n      classStore,\n      entityStore,\n    } = useStores();\n    // parse necessary route parameters\n    const tableId = routes.table.useURLParams()!.tableId;\n    const { sms, index, setIndex } = useSemanticModel(tableId);\n\n    const tableRef = useRef<TableComponentFunc>(null);\n    const graphRef = useRef<SemanticModelComponentFunc>(null);\n\n    useEffect(() => {\n      // fetch the table\n      tableStore.fetchById(tableId).then((table) => {\n        if (table !== undefined) {\n          projectStore.fetchById(table.project);\n        }\n      });\n    }, [tableStore, projectStore, semanticModelStore, tableId]);\n\n    const table = tableStore.get(tableId);\n\n    if (table === null) {\n      return <NotFoundComponent />;\n    } else if (table === undefined || sms.length === 0) {\n      // the table and sms is loading\n      return <LoadingComponent />;\n    }\n\n    return (\n      <React.Fragment>\n        <TableNavBar project={projectStore.get(table.project)} table={table} />\n        <div className={classes.container}>\n          <Space direction=\"vertical\" size={8}>\n            <MenuBar\n              graphRef={graphRef}\n              tableRef={tableRef}\n              table={table}\n              semanticmodel={{ sms, index, setIndex }}\n            />\n            <SemanticModelComponent\n              ref={graphRef}\n              key={`sm-${tableId}`}\n              table={table}\n              sm={sms[index]}\n            />\n            <TableComponent\n              ref={tableRef}\n              key={`tbl-${tableId}`}\n              toolBarRender={false}\n              table={table}\n              query={async (\n                limit: number,\n                offset: number,\n                filter: TableFilter\n              ) => {\n                if (!filter.hasFilter()) {\n                  const rows = await tableRowStore.fetchByTable(\n                    table,\n                    offset,\n                    limit\n                  );\n                  return { rows, total: table.size };\n                }\n\n                const allrows = await tableRowStore.fetchByTable(\n                  table,\n                  0,\n                  table.size\n                );\n                const rows = await filter.filter(\n                  allrows,\n                  entityStore,\n                  classStore\n                );\n                return {\n                  rows: rows.slice(offset, offset + limit),\n                  total: rows.length,\n                };\n              }}\n              showRowIndex={true}\n            />\n            <EntitySettingComponent />\n          </Space>\n        </div>\n      </React.Fragment>\n    );\n  })\n);\n\nfunction useSemanticModel(tableId: number) {\n  const { tableStore, semanticModelStore } = useStores();\n  const [prevTableId, setPrevTableId] = useState(-1);\n  const [hasFetchSemanticModel, setHasFetchSemanticModel] = useState(false);\n  const [index, setIndex] = useState(0);\n  const isUpdatedState = prevTableId === -1 || tableId === prevTableId;\n\n  if (tableId !== prevTableId) {\n    // reset the internal state\n    setPrevTableId(tableId);\n    setHasFetchSemanticModel(false);\n    setIndex(0);\n  }\n\n  useEffect(() => {\n    let mounted = true;\n    if (!semanticModelStore.hasByTable(tableId)) {\n      semanticModelStore\n        .fetch({\n          limit: 1000,\n          offset: 0,\n          conditions: {\n            table: tableId,\n          },\n        })\n        .then(() => {\n          if (mounted) {\n            setHasFetchSemanticModel(true);\n          }\n        });\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [semanticModelStore, tableId]);\n\n  const table = tableStore.get(tableId);\n\n  if (\n    !isUpdatedState ||\n    table === undefined ||\n    table === null ||\n    (!semanticModelStore.hasByTable(tableId) && !hasFetchSemanticModel)\n  ) {\n    // either the table does not exist, the internal state is not updated, or the semantic model is not fetched\n    return { index, sms: [], setIndex };\n  }\n\n  const sms = semanticModelStore.findByTable(tableId);\n  const drafts = semanticModelStore.getCreateDraftsByTable(table);\n\n  if (index >= sms.length + drafts.length) {\n    // there is no semantic model & no draft for this table, create a new draft\n    const id = semanticModelStore.getNewCreateDraftId(table);\n    const draft = DraftSemanticModel.getDefaultDraftSemanticModel(\n      id,\n      `sm-${sms.length}`,\n      table\n    );\n    semanticModelStore.setCreateDraft(draft);\n    drafts.push(draft);\n  }\n\n  const sm = index < sms.length ? sms[index] : drafts[index - sms.length];\n\n  return { sms: sms.concat(drafts), index, setIndex };\n}\n","import { Col, Row } from \"antd\";\n\nexport const SettingPage = () => {\n  return (\n    <Row gutter={16}>\n      <Col className=\"gutter-row\" span={24}></Col>\n    </Row>\n  );\n};\n","import { Menu } from \"antd\";\nimport { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { useLocation } from \"react-router-dom\";\nimport { getActiveRouteName, PathDef } from \"gena-app\";\nimport React from \"react\";\n\nconst css = {\n  centerNavBar: {\n    justifyContent: \"center\",\n    boxShadow: \"0 2px 8px #f0f1f2\",\n  },\n  leftNavBar: {\n    \"& .logo::after\": {\n      borderBottom: \"none !important\",\n      transition: \"none !important\",\n    },\n    \"& .logo:hover::after\": {\n      borderBottom: \"none !important\",\n      transition: \"none !important\",\n    },\n    \"& .logo img\": {\n      height: 24,\n      borderRadius: 4,\n      marginTop: -2,\n    },\n    paddingLeft: 24,\n    paddingRight: 24,\n    boxShadow: \"0 2px 8px #f0f1f2\",\n  },\n};\n\ntype MenuItemProps = {\n  children: string | JSX.Element;\n  icon?: JSX.Element;\n  danger?: boolean;\n  disabled?: boolean;\n};\n\ninterface Props<R> {\n  menus: Partial<Record<keyof R, string | JSX.Element | MenuItemProps>>;\n  routes: R;\n  className?: string;\n  style?: React.CSSProperties;\n  isFirstItemLogo?: boolean;\n}\ntype Component = <R extends Record<any, PathDef<any, any>>>(\n  p: Props<R>\n) => JSX.Element;\n\nexport const CenterNavBar = withStyles(css)(\n  <R extends Record<any, PathDef<any, any>>>({\n    classes,\n    menus,\n    routes,\n    className,\n    style,\n    isFirstItemLogo,\n  }: Props<R> & WithStyles<typeof css>) => {\n    const location = useLocation();\n    const openMenu = (e: { key: keyof R }) => {\n      routes[e.key].path({}, {}).open();\n    };\n\n    const items = Object.keys(menus).map((routeName, index) => {\n      const className = isFirstItemLogo === true && index === 0 ? \"logo\" : \"\";\n      return getMenuItem(routeName, className, menus[routeName]!);\n    });\n    const activeRouteName = getActiveRouteName(location, routes);\n\n    return (\n      <Menu\n        mode=\"horizontal\"\n        className={\n          classes.centerNavBar +\n          (className !== undefined ? \" \" + className : \"\")\n        }\n        style={style}\n        onClick={openMenu}\n        selectedKeys={\n          activeRouteName !== undefined ? [activeRouteName] : undefined\n        }\n      >\n        {items}\n      </Menu>\n    );\n  }\n) as Component;\n\nexport const LeftNavBar = withStyles(css)(\n  <R extends Record<any, PathDef<any, any>>>({\n    classes,\n    menus,\n    routes,\n    className,\n    style,\n    isFirstItemLogo,\n  }: Props<R> & WithStyles<typeof css>) => {\n    const location = useLocation();\n    const openMenu = (e: { key: keyof R }) => {\n      routes[e.key].path({}, {}).open();\n    };\n\n    const items = Object.keys(menus).map((routeName, index) => {\n      const className = isFirstItemLogo === true && index === 0 ? \"logo\" : \"\";\n      return getMenuItem(routeName, className, menus[routeName]!);\n    });\n    const activeRouteName = getActiveRouteName(location, routes);\n\n    return (\n      <Menu\n        mode=\"horizontal\"\n        className={\n          classes.leftNavBar + (className !== undefined ? \" \" + className : \"\")\n        }\n        style={style}\n        onClick={openMenu}\n        selectedKeys={\n          activeRouteName !== undefined ? [activeRouteName] : undefined\n        }\n      >\n        {items}\n      </Menu>\n    );\n  }\n) as Component;\n\nfunction getMenuItem(\n  key: string,\n  className: string,\n  props: string | JSX.Element | MenuItemProps\n) {\n  let children, realprops;\n\n  if (typeof props === \"string\") {\n    children = props;\n  } else if (React.isValidElement(props)) {\n    children = props;\n  } else {\n    const { children: children2, ...realprops2 } = props as MenuItemProps;\n    children = children2;\n    realprops = realprops2;\n  }\n\n  return (\n    <Menu.Item className={className} key={key} {...realprops}>\n      {children}\n    </Menu.Item>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.aa0996dd.png\";","import {\n  PathDef,\n  NoArgsPathDef,\n  NoQueryArgsPathDef,\n  applyLayout,\n} from \"gena-app\";\nimport { HomePage, ProjectPage, TablePage, SettingPage } from \"./pages\";\n\nimport React from \"react\";\nimport { LeftNavBar } from \"./components/Navbar\";\nimport { Space } from \"antd\";\nimport logo from \"./logo.png\";\n\nimport {\n  CloudUploadOutlined,\n  ProjectOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\n\n/*************************************************************************************\n * Layouts of the application\n */\nexport const Layout = (\n  component: React.FunctionComponent<any> | React.ComponentClass<any, any>\n) => {\n  return (props: any) => {\n    const element = React.createElement(component, props);\n    return (\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <LeftNavBar\n          menus={{\n            home: <img src={logo} alt=\"logo\" />,\n            projects: { icon: <ProjectOutlined />, children: \"Projects\" },\n            upload: { icon: <CloudUploadOutlined />, children: \"Upload\" },\n            settings: { icon: <SettingOutlined />, children: \"Settings\" },\n          }}\n          routes={routes}\n          isFirstItemLogo={true}\n        />\n        <div className=\"wide-container\">{element}</div>\n      </Space>\n    );\n  };\n};\n\nconst None = () => <h1>Not supposed to see this page</h1>;\n\n/*************************************************************************************\n * Definitions for routes in this application\n */\nexport const routes = {\n  project: new NoQueryArgsPathDef({\n    component: ProjectPage,\n    urlSchema: { projectId: \"number\" },\n    pathDef: \"/projects/:projectId\",\n  }),\n  table: new PathDef({\n    component: TablePage,\n    urlSchema: { tableId: \"number\" },\n    querySchema: { query: \"string\" },\n    pathDef: \"/tables/:tableId\",\n  }),\n  tableExportModel: new PathDef({\n    component: None,\n    urlSchema: { tableId: \"number\" },\n    querySchema: { attachment: \"optionalboolean\" },\n    pathDef: \"/api/table/:tableId/export-models\",\n  }),\n  tableExportData: new PathDef({\n    component: None,\n    urlSchema: { tableId: \"number\" },\n    querySchema: { attachment: \"optionalboolean\" },\n    pathDef: \"/api/table/:tableId/export\",\n  }),\n  settings: new NoArgsPathDef({\n    component: SettingPage,\n    pathDef: \"/settings\",\n    exact: true,\n  }),\n  upload: new NoArgsPathDef({\n    component: HomePage,\n    pathDef: \"/upload\",\n    exact: true,\n  }),\n  projects: new NoArgsPathDef({\n    component: HomePage,\n    pathDef: \"/projects\",\n    exact: true,\n  }),\n  home: new NoArgsPathDef({ component: HomePage, pathDef: \"/\", exact: true }),\n};\n(window as any)._routes = routes;\n\n// apply this layout to all routes except table\napplyLayout(routes, Layout, [\"table\"]);\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"gena-app\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { stores, initStores, StoreContext } from \"./models\";\nimport { routes } from \"./routes\";\nimport enUSIntl from \"antd/lib/locale/en_US\";\nimport { ConfigProvider } from \"antd\";\n\ninitStores().then(() => {\n  ReactDOM.render(\n    <StoreContext.Provider value={stores}>\n      <ConfigProvider locale={enUSIntl}>\n        <App enUSLocale={true} routes={routes} />\n      </ConfigProvider>\n    </StoreContext.Provider>,\n    document.getElementById(\"root\")\n  );\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}